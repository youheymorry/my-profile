/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[23],Array(543).concat([function(e,t,n){"use strict";n.r(t),n.d(t,"AdadeltaOptimizer",(function(){return base.d})),n.d(t,"AdagradOptimizer",(function(){return base.e})),n.d(t,"AdamOptimizer",(function(){return base.f})),n.d(t,"AdamaxOptimizer",(function(){return base.g})),n.d(t,"MomentumOptimizer",(function(){return base.gc})),n.d(t,"Optimizer",(function(){return base.rc})),n.d(t,"OptimizerConstructors",(function(){return base.sc})),n.d(t,"RMSPropOptimizer",(function(){return base.zc})),n.d(t,"SGDOptimizer",(function(){return base.Sc})),n.d(t,"Tensor",(function(){return base.xd})),n.d(t,"TensorBuffer",(function(){return base.yd})),n.d(t,"Variable",(function(){return base.Hd})),n.d(t,"Rank",(function(){return base.Cc})),n.d(t,"sumOutType",(function(){return base.fi})),n.d(t,"upcastType",(function(){return base.Di})),n.d(t,"abs",(function(){return base.Kd})),n.d(t,"acos",(function(){return base.Ld})),n.d(t,"acosh",(function(){return base.Md})),n.d(t,"add",(function(){return base.Nd})),n.d(t,"addN",(function(){return base.Od})),n.d(t,"all",(function(){return base.Pd})),n.d(t,"any",(function(){return base.Qd})),n.d(t,"argMax",(function(){return base.Rd})),n.d(t,"argMin",(function(){return base.Sd})),n.d(t,"asin",(function(){return base.Td})),n.d(t,"asinh",(function(){return base.Ud})),n.d(t,"atan",(function(){return base.Vd})),n.d(t,"atan2",(function(){return base.Wd})),n.d(t,"atanh",(function(){return base.Xd})),n.d(t,"avgPool",(function(){return base.Yd})),n.d(t,"avgPool3d",(function(){return base.Zd})),n.d(t,"basicLSTMCell",(function(){return base.ce})),n.d(t,"batchToSpaceND",(function(){return base.he})),n.d(t,"batchNorm",(function(){return base.de})),n.d(t,"batchNorm2d",(function(){return base.ee})),n.d(t,"batchNorm3d",(function(){return base.fe})),n.d(t,"batchNorm4d",(function(){return base.ge})),n.d(t,"bincount",(function(){return base.ie})),n.d(t,"broadcastArgs",(function(){return base.ke})),n.d(t,"broadcastTo",(function(){return base.le})),n.d(t,"buffer",(function(){return base.oe})),n.d(t,"cast",(function(){return base.pe})),n.d(t,"ceil",(function(){return base.qe})),n.d(t,"clipByValue",(function(){return base.re})),n.d(t,"clone",(function(){return base.se})),n.d(t,"complex",(function(){return base.te})),n.d(t,"concat",(function(){return base.ue})),n.d(t,"concat1d",(function(){return base.ve})),n.d(t,"concat2d",(function(){return base.we})),n.d(t,"concat3d",(function(){return base.xe})),n.d(t,"concat4d",(function(){return base.ye})),n.d(t,"conv1d",(function(){return base.ze})),n.d(t,"conv2d",(function(){return base.Ae})),n.d(t,"conv2dTranspose",(function(){return base.Be})),n.d(t,"conv3d",(function(){return base.Ce})),n.d(t,"conv3dTranspose",(function(){return base.De})),n.d(t,"cos",(function(){return base.Fe})),n.d(t,"cosh",(function(){return base.Ge})),n.d(t,"cumprod",(function(){return base.Ie})),n.d(t,"cumsum",(function(){return base.Je})),n.d(t,"denseBincount",(function(){return base.Le})),n.d(t,"depthToSpace",(function(){return base.Ne})),n.d(t,"depthwiseConv2d",(function(){return base.Oe})),n.d(t,"diag",(function(){return base.Qe})),n.d(t,"dilation2d",(function(){return base.Re})),n.d(t,"div",(function(){return base.Ve})),n.d(t,"divNoNan",(function(){return base.We})),n.d(t,"dot",(function(){return base.Xe})),n.d(t,"einsum",(function(){return base.Ze})),n.d(t,"elu",(function(){return base.af})),n.d(t,"equal",(function(){return base.gf})),n.d(t,"erf",(function(){return base.hf})),n.d(t,"euclideanNorm",(function(){return base.if})),n.d(t,"exp",(function(){return base.jf})),n.d(t,"expandDims",(function(){return base.kf})),n.d(t,"expm1",(function(){return base.lf})),n.d(t,"eye",(function(){return base.mf})),n.d(t,"fill",(function(){return base.of})),n.d(t,"floor",(function(){return base.rf})),n.d(t,"floorDiv",(function(){return base.sf})),n.d(t,"gather",(function(){return base.uf})),n.d(t,"greater",(function(){return base.Df})),n.d(t,"greaterEqual",(function(){return base.Ef})),n.d(t,"imag",(function(){return base.Gf})),n.d(t,"isFinite",(function(){return base.Lf})),n.d(t,"isInf",(function(){return base.Mf})),n.d(t,"isNaN",(function(){return base.Nf})),n.d(t,"leakyRelu",(function(){return base.Qf})),n.d(t,"less",(function(){return base.Rf})),n.d(t,"lessEqual",(function(){return base.Sf})),n.d(t,"linspace",(function(){return base.Uf})),n.d(t,"localResponseNormalization",(function(){return base.Vf})),n.d(t,"log",(function(){return base.Wf})),n.d(t,"log1p",(function(){return base.Xf})),n.d(t,"logSigmoid",(function(){return base.Yf})),n.d(t,"logSoftmax",(function(){return base.Zf})),n.d(t,"logSumExp",(function(){return base.ag})),n.d(t,"logicalAnd",(function(){return base.bg})),n.d(t,"logicalNot",(function(){return base.cg})),n.d(t,"logicalOr",(function(){return base.dg})),n.d(t,"logicalXor",(function(){return base.eg})),n.d(t,"lowerBound",(function(){return base.gg})),n.d(t,"matMul",(function(){return base.hg})),n.d(t,"max",(function(){return base.jg})),n.d(t,"maxPool",(function(){return base.kg})),n.d(t,"maxPool3d",(function(){return base.lg})),n.d(t,"maxPoolWithArgmax",(function(){return base.mg})),n.d(t,"maximum",(function(){return base.ng})),n.d(t,"mean",(function(){return base.og})),n.d(t,"meshgrid",(function(){return base.qg})),n.d(t,"min",(function(){return base.rg})),n.d(t,"minimum",(function(){return base.sg})),n.d(t,"mirrorPad",(function(){return base.tg})),n.d(t,"mod",(function(){return base.ug})),n.d(t,"moments",(function(){return base.vg})),n.d(t,"mul",(function(){return base.xg})),n.d(t,"multiRNNCell",(function(){return base.yg})),n.d(t,"multinomial",(function(){return base.zg})),n.d(t,"neg",(function(){return base.Ag})),n.d(t,"notEqual",(function(){return base.Dg})),n.d(t,"oneHot",(function(){return base.Eg})),n.d(t,"ones",(function(){return base.Fg})),n.d(t,"onesLike",(function(){return base.Gg})),n.d(t,"outerProduct",(function(){return base.Ig})),n.d(t,"pad",(function(){return base.Jg})),n.d(t,"pad1d",(function(){return base.Kg})),n.d(t,"pad2d",(function(){return base.Lg})),n.d(t,"pad3d",(function(){return base.Mg})),n.d(t,"pad4d",(function(){return base.Ng})),n.d(t,"pool",(function(){return base.Og})),n.d(t,"pow",(function(){return base.Pg})),n.d(t,"prelu",(function(){return base.Qg})),n.d(t,"print",(function(){return base.Rg})),n.d(t,"prod",(function(){return base.Sg})),n.d(t,"raggedTensorToTensor",(function(){return base.Ug})),n.d(t,"rand",(function(){return base.Vg})),n.d(t,"randomGamma",(function(){return base.Wg})),n.d(t,"randomNormal",(function(){return base.Xg})),n.d(t,"randomStandardNormal",(function(){return base.Yg})),n.d(t,"randomUniform",(function(){return base.Zg})),n.d(t,"range",(function(){return base.ah})),n.d(t,"real",(function(){return base.ch})),n.d(t,"reciprocal",(function(){return base.dh})),n.d(t,"relu",(function(){return base.hh})),n.d(t,"relu6",(function(){return base.ih})),n.d(t,"reshape",(function(){return base.kh})),n.d(t,"reverse",(function(){return base.lh})),n.d(t,"reverse1d",(function(){return base.mh})),n.d(t,"reverse2d",(function(){return base.nh})),n.d(t,"reverse3d",(function(){return base.oh})),n.d(t,"reverse4d",(function(){return base.ph})),n.d(t,"round",(function(){return base.rh})),n.d(t,"rsqrt",(function(){return base.sh})),n.d(t,"scalar",(function(){return base.th})),n.d(t,"selu",(function(){return base.xh})),n.d(t,"separableConv2d",(function(){return base.yh})),n.d(t,"setdiff1dAsync",(function(){return base.Ch})),n.d(t,"sigmoid",(function(){return base.Dh})),n.d(t,"sign",(function(){return base.Eh})),n.d(t,"sin",(function(){return base.Gh})),n.d(t,"sinh",(function(){return base.Hh})),n.d(t,"slice",(function(){return base.Ih})),n.d(t,"slice1d",(function(){return base.Jh})),n.d(t,"slice2d",(function(){return base.Kh})),n.d(t,"slice3d",(function(){return base.Lh})),n.d(t,"slice4d",(function(){return base.Mh})),n.d(t,"softmax",(function(){return base.Oh})),n.d(t,"softplus",(function(){return base.Ph})),n.d(t,"spaceToBatchND",(function(){return base.Qh})),n.d(t,"fft",(function(){return base.nf})),n.d(t,"ifft",(function(){return base.Ff})),n.d(t,"irfft",(function(){return base.Kf})),n.d(t,"rfft",(function(){return base.qh})),n.d(t,"split",(function(){return base.Uh})),n.d(t,"sqrt",(function(){return base.Vh})),n.d(t,"square",(function(){return base.Wh})),n.d(t,"squaredDifference",(function(){return base.Xh})),n.d(t,"squeeze",(function(){return base.Yh})),n.d(t,"stack",(function(){return base.Zh})),n.d(t,"step",(function(){return base.ai})),n.d(t,"stridedSlice",(function(){return base.bi})),n.d(t,"sub",(function(){return base.di})),n.d(t,"sum",(function(){return base.ei})),n.d(t,"tan",(function(){return base.gi})),n.d(t,"tanh",(function(){return base.hi})),n.d(t,"tensor",(function(){return base.ii})),n.d(t,"tensor1d",(function(){return base.ji})),n.d(t,"tensor2d",(function(){return base.ki})),n.d(t,"tensor3d",(function(){return base.li})),n.d(t,"tensor4d",(function(){return base.mi})),n.d(t,"tensor5d",(function(){return base.ni})),n.d(t,"tensor6d",(function(){return base.oi})),n.d(t,"tile",(function(){return base.si})),n.d(t,"topk",(function(){return base.ui})),n.d(t,"truncatedNormal",(function(){return base.xi})),n.d(t,"unique",(function(){return base.yi})),n.d(t,"unsortedSegmentSum",(function(){return base.Bi})),n.d(t,"unstack",(function(){return base.Ci})),n.d(t,"upperBound",(function(){return base.Ei})),n.d(t,"variable",(function(){return base.Ii})),n.d(t,"where",(function(){return base.Li})),n.d(t,"whereAsync",(function(){return base.Mi})),n.d(t,"zeros",(function(){return base.Ni})),n.d(t,"zerosLike",(function(){return base.Oi})),n.d(t,"booleanMaskAsync",(function(){return base.je})),n.d(t,"transpose",(function(){return base.wi})),n.d(t,"norm",(function(){return base.Cg})),n.d(t,"movingAverage",(function(){return base.wg})),n.d(t,"scatterND",(function(){return base.uh})),n.d(t,"searchSorted",(function(){return base.wh})),n.d(t,"sparseToDense",(function(){return base.Sh})),n.d(t,"gatherND",(function(){return base.vf})),n.d(t,"dropout",(function(){return base.Ye})),n.d(t,"enclosingPowerOfTwo",(function(){return base.df})),n.d(t,"cosineWindow",(function(){return base.He})),n.d(t,"inTopKAsync",(function(){return base.If})),n.d(t,"op",(function(){return base.Hg})),n.d(t,"OP_SCOPE_SUFFIX",(function(){return base.oc})),n.d(t,"image",(function(){return base.Hf})),n.d(t,"linalg",(function(){return base.Tf})),n.d(t,"losses",(function(){return base.fg})),n.d(t,"spectral",(function(){return base.Th})),n.d(t,"fused",(function(){return base.tf})),n.d(t,"signal",(function(){return base.Fh})),n.d(t,"sparse",(function(){return base.Rh})),n.d(t,"string",(function(){return base.ci})),n.d(t,"Reduction",(function(){return base.Gc})),n.d(t,"train",(function(){return base.vi})),n.d(t,"enableProdMode",(function(){return base.cf})),n.d(t,"enableDebugMode",(function(){return base.bf})),n.d(t,"disableDeprecationWarnings",(function(){return base.Se})),n.d(t,"deprecationWarn",(function(){return base.Me})),n.d(t,"disposeVariables",(function(){return base.Ue})),n.d(t,"engine",(function(){return base.ef})),n.d(t,"memory",(function(){return base.pg})),n.d(t,"profile",(function(){return base.Tg})),n.d(t,"tidy",(function(){return base.ri})),n.d(t,"dispose",(function(){return base.Te})),n.d(t,"keep",(function(){return base.Of})),n.d(t,"time",(function(){return base.ti})),n.d(t,"setBackend",(function(){return base.Ah})),n.d(t,"ready",(function(){return base.bh})),n.d(t,"getBackend",(function(){return base.xf})),n.d(t,"removeBackend",(function(){return base.jh})),n.d(t,"findBackend",(function(){return base.pf})),n.d(t,"findBackendFactory",(function(){return base.qf})),n.d(t,"registerBackend",(function(){return base.eh})),n.d(t,"backend",(function(){return base.ae})),n.d(t,"setPlatform",(function(){return base.Bh})),n.d(t,"getKernel",(function(){return base.zf})),n.d(t,"getGradient",(function(){return base.yf})),n.d(t,"getKernelsForBackend",(function(){return base.Af})),n.d(t,"registerKernel",(function(){return base.gh})),n.d(t,"registerGradient",(function(){return base.fh})),n.d(t,"unregisterKernel",(function(){return base.Ai})),n.d(t,"unregisterGradient",(function(){return base.zi})),n.d(t,"copyRegisteredKernels",(function(){return base.Ee})),n.d(t,"customGrad",(function(){return base.Ke})),n.d(t,"grad",(function(){return base.Bf})),n.d(t,"grads",(function(){return base.Cf})),n.d(t,"valueAndGrad",(function(){return base.Gi})),n.d(t,"valueAndGrads",(function(){return base.Hi})),n.d(t,"variableGrads",(function(){return base.Ji})),n.d(t,"Environment",(function(){return base.gb})),n.d(t,"env",(function(){return base.ff})),n.d(t,"ENV",(function(){return base.cb})),n.d(t,"version_core",(function(){return base.Ki})),n.d(t,"nextFrame",(function(){return base.Bg})),n.d(t,"browser",(function(){return base.ne})),n.d(t,"io",(function(){return base.Jf})),n.d(t,"math",(function(){return base.ig})),n.d(t,"serialization",(function(){return base.zh})),n.d(t,"test_util",(function(){return base.qi})),n.d(t,"util",(function(){return base.Fi})),n.d(t,"backend_util",(function(){return base.be})),n.d(t,"broadcast_util",(function(){return base.me})),n.d(t,"tensor_util",(function(){return base.pi})),n.d(t,"slice_util",(function(){return base.Nh})),n.d(t,"gather_util",(function(){return base.wf})),n.d(t,"scatter_util",(function(){return base.vh})),n.d(t,"device_util",(function(){return base.Pe})),n.d(t,"kernel_impls",(function(){return base.Pf})),n.d(t,"KernelBackend",(function(){return base.Fb})),n.d(t,"DataStorage",(function(){return base.S})),n.d(t,"Abs",(function(){return base.a})),n.d(t,"Acos",(function(){return base.b})),n.d(t,"Acosh",(function(){return base.c})),n.d(t,"Add",(function(){return base.h})),n.d(t,"AddN",(function(){return base.i})),n.d(t,"All",(function(){return base.j})),n.d(t,"Any",(function(){return base.k})),n.d(t,"ArgMax",(function(){return base.l})),n.d(t,"ArgMin",(function(){return base.m})),n.d(t,"Asin",(function(){return base.n})),n.d(t,"Asinh",(function(){return base.o})),n.d(t,"Atan",(function(){return base.p})),n.d(t,"Atanh",(function(){return base.r})),n.d(t,"Atan2",(function(){return base.q})),n.d(t,"AvgPool",(function(){return base.s})),n.d(t,"AvgPoolGrad",(function(){return base.v})),n.d(t,"AvgPool3D",(function(){return base.t})),n.d(t,"AvgPool3DGrad",(function(){return base.u})),n.d(t,"BatchMatMul",(function(){return base.w})),n.d(t,"BatchToSpaceND",(function(){return base.x})),n.d(t,"Bincount",(function(){return base.y})),n.d(t,"BroadcastTo",(function(){return base.A})),n.d(t,"BroadcastArgs",(function(){return base.z})),n.d(t,"Cast",(function(){return base.B})),n.d(t,"Ceil",(function(){return base.C})),n.d(t,"ClipByValue",(function(){return base.D})),n.d(t,"Complex",(function(){return base.E})),n.d(t,"ComplexAbs",(function(){return base.F})),n.d(t,"Concat",(function(){return base.G})),n.d(t,"Conv2D",(function(){return base.H})),n.d(t,"Conv2DBackpropFilter",(function(){return base.I})),n.d(t,"Conv2DBackpropInput",(function(){return base.J})),n.d(t,"Conv3D",(function(){return base.K})),n.d(t,"Conv3DBackpropFilterV2",(function(){return base.L})),n.d(t,"Conv3DBackpropInputV2",(function(){return base.M})),n.d(t,"Cos",(function(){return base.N})),n.d(t,"Cosh",(function(){return base.O})),n.d(t,"Cumprod",(function(){return base.Q})),n.d(t,"Cumsum",(function(){return base.R})),n.d(t,"CropAndResize",(function(){return base.P})),n.d(t,"DenseBincount",(function(){return base.T})),n.d(t,"DepthToSpace",(function(){return base.U})),n.d(t,"DepthwiseConv2dNative",(function(){return base.V})),n.d(t,"DepthwiseConv2dNativeBackpropFilter",(function(){return base.W})),n.d(t,"DepthwiseConv2dNativeBackpropInput",(function(){return base.X})),n.d(t,"Diag",(function(){return base.Y})),n.d(t,"Dilation2D",(function(){return base.Z})),n.d(t,"Dilation2DBackpropInput",(function(){return base.bb})),n.d(t,"Dilation2DBackpropFilter",(function(){return base.ab})),n.d(t,"RealDiv",(function(){return base.Ec})),n.d(t,"Einsum",(function(){return base.db})),n.d(t,"Elu",(function(){return base.eb})),n.d(t,"EluGrad",(function(){return base.fb})),n.d(t,"Erf",(function(){return base.ib})),n.d(t,"Equal",(function(){return base.hb})),n.d(t,"Exp",(function(){return base.jb})),n.d(t,"ExpandDims",(function(){return base.kb})),n.d(t,"Expm1",(function(){return base.lb})),n.d(t,"FFT",(function(){return base.mb})),n.d(t,"Fill",(function(){return base.nb})),n.d(t,"FlipLeftRight",(function(){return base.ob})),n.d(t,"Floor",(function(){return base.pb})),n.d(t,"FloorDiv",(function(){return base.qb})),n.d(t,"FusedBatchNorm",(function(){return base.sb})),n.d(t,"GatherV2",(function(){return base.wb})),n.d(t,"GatherNd",(function(){return base.vb})),n.d(t,"Greater",(function(){return base.xb})),n.d(t,"GreaterEqual",(function(){return base.yb})),n.d(t,"Identity",(function(){return base.Ab})),n.d(t,"IFFT",(function(){return base.zb})),n.d(t,"Imag",(function(){return base.Bb})),n.d(t,"IsFinite",(function(){return base.Cb})),n.d(t,"IsInf",(function(){return base.Db})),n.d(t,"IsNan",(function(){return base.Eb})),n.d(t,"LeakyRelu",(function(){return base.Ib})),n.d(t,"Less",(function(){return base.Jb})),n.d(t,"LessEqual",(function(){return base.Kb})),n.d(t,"LinSpace",(function(){return base.Lb})),n.d(t,"Log",(function(){return base.Mb})),n.d(t,"Log1p",(function(){return base.Nb})),n.d(t,"LogicalAnd",(function(){return base.Pb})),n.d(t,"LogicalNot",(function(){return base.Qb})),n.d(t,"LogicalOr",(function(){return base.Rb})),n.d(t,"LogicalXor",(function(){return base.Sb})),n.d(t,"LogSoftmax",(function(){return base.Ob})),n.d(t,"LowerBound",(function(){return base.Tb})),n.d(t,"LRN",(function(){return base.Gb})),n.d(t,"LRNGrad",(function(){return base.Hb})),n.d(t,"Max",(function(){return base.Ub})),n.d(t,"Maximum",(function(){return base.ac})),n.d(t,"MaxPool",(function(){return base.Vb})),n.d(t,"MaxPoolGrad",(function(){return base.Yb})),n.d(t,"MaxPool3D",(function(){return base.Wb})),n.d(t,"MaxPool3DGrad",(function(){return base.Xb})),n.d(t,"MaxPoolWithArgmax",(function(){return base.Zb})),n.d(t,"Mean",(function(){return base.bc})),n.d(t,"Min",(function(){return base.cc})),n.d(t,"Minimum",(function(){return base.dc})),n.d(t,"MirrorPad",(function(){return base.ec})),n.d(t,"Mod",(function(){return base.fc})),n.d(t,"Multinomial",(function(){return base.hc})),n.d(t,"Multiply",(function(){return base.ic})),n.d(t,"Neg",(function(){return base.jc})),n.d(t,"NotEqual",(function(){return base.nc})),n.d(t,"NonMaxSuppressionV3",(function(){return base.kc})),n.d(t,"NonMaxSuppressionV4",(function(){return base.lc})),n.d(t,"NonMaxSuppressionV5",(function(){return base.mc})),n.d(t,"OnesLike",(function(){return base.qc})),n.d(t,"OneHot",(function(){return base.pc})),n.d(t,"Pack",(function(){return base.tc})),n.d(t,"PadV2",(function(){return base.uc})),n.d(t,"Pool",(function(){return base.vc})),n.d(t,"Pow",(function(){return base.wc})),n.d(t,"Prelu",(function(){return base.xc})),n.d(t,"Prod",(function(){return base.yc})),n.d(t,"RaggedTensorToTensor",(function(){return base.Ac})),n.d(t,"Range",(function(){return base.Bc})),n.d(t,"Real",(function(){return base.Dc})),n.d(t,"Reciprocal",(function(){return base.Fc})),n.d(t,"Relu",(function(){return base.Hc})),n.d(t,"Reshape",(function(){return base.Jc})),n.d(t,"ResizeNearestNeighbor",(function(){return base.Mc})),n.d(t,"ResizeNearestNeighborGrad",(function(){return base.Nc})),n.d(t,"ResizeBilinear",(function(){return base.Kc})),n.d(t,"ResizeBilinearGrad",(function(){return base.Lc})),n.d(t,"Relu6",(function(){return base.Ic})),n.d(t,"Reverse",(function(){return base.Oc})),n.d(t,"Round",(function(){return base.Qc})),n.d(t,"Rsqrt",(function(){return base.Rc})),n.d(t,"ScatterNd",(function(){return base.Tc})),n.d(t,"SearchSorted",(function(){return base.Uc})),n.d(t,"Select",(function(){return base.Vc})),n.d(t,"Selu",(function(){return base.Wc})),n.d(t,"Slice",(function(){return base.bd})),n.d(t,"Sin",(function(){return base.Zc})),n.d(t,"Sinh",(function(){return base.ad})),n.d(t,"Sign",(function(){return base.Yc})),n.d(t,"Sigmoid",(function(){return base.Xc})),n.d(t,"Softplus",(function(){return base.dd})),n.d(t,"Sqrt",(function(){return base.ld})),n.d(t,"Sum",(function(){return base.ud})),n.d(t,"SpaceToBatchND",(function(){return base.ed})),n.d(t,"SplitV",(function(){return base.kd})),n.d(t,"Softmax",(function(){return base.cd})),n.d(t,"SparseFillEmptyRows",(function(){return base.fd})),n.d(t,"SparseReshape",(function(){return base.gd})),n.d(t,"SparseSegmentMean",(function(){return base.hd})),n.d(t,"SparseSegmentSum",(function(){return base.id})),n.d(t,"SparseToDense",(function(){return base.jd})),n.d(t,"SquaredDifference",(function(){return base.nd})),n.d(t,"Square",(function(){return base.md})),n.d(t,"StridedSlice",(function(){return base.pd})),n.d(t,"StringNGrams",(function(){return base.qd})),n.d(t,"StringSplit",(function(){return base.rd})),n.d(t,"StringToHashBucketFast",(function(){return base.sd})),n.d(t,"Sub",(function(){return base.td})),n.d(t,"Tan",(function(){return base.vd})),n.d(t,"Tanh",(function(){return base.wd})),n.d(t,"Tile",(function(){return base.zd})),n.d(t,"TopK",(function(){return base.Ad})),n.d(t,"Transform",(function(){return base.Bd})),n.d(t,"Transpose",(function(){return base.Cd})),n.d(t,"Unique",(function(){return base.Dd})),n.d(t,"Unpack",(function(){return base.Ed})),n.d(t,"UnsortedSegmentSum",(function(){return base.Fd})),n.d(t,"UpperBound",(function(){return base.Gd})),n.d(t,"ZerosLike",(function(){return base.Id})),n.d(t,"Step",(function(){return base.od})),n.d(t,"FromPixels",(function(){return base.rb})),n.d(t,"RotateWithOffset",(function(){return base.Pc})),n.d(t,"_FusedMatMul",(function(){return base.Jd})),n.d(t,"FusedConv2D",(function(){return base.tb})),n.d(t,"FusedDepthwiseConv2D",(function(){return base.ub}));var r=n(547),o=(n(641),n(567)),c=n(792),l=n(795),d=n(620);class h{fetch(path,e){return fetch(path,e)}now(){return performance.now()}encode(text,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(text)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Object(o.c)().get("IS_BROWSER")){Object(o.c)().setPlatform("browser",new h);try{d.a.registerManager(l.a.URL_SCHEME,new l.b)}catch(e){}try{d.a.registerManager(c.a.URL_SCHEME,new c.b)}catch(e){}}n(935);var f=n(589),m=n(554),y=n(621),x=n(713),O=n(548);Object(r.b)();const v={buffer:f.a,cast:m.a,clone:y.a,print:x.a};Object(O.f)(v);var base=n(780)},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return l})),n.d(t,"e",(function(){return d})),n.d(t,"f",(function(){return h})),n.d(t,"g",(function(){return f})),n.d(t,"h",(function(){return m})),n.d(t,"i",(function(){return y})),n.d(t,"j",(function(){return x})),n.d(t,"k",(function(){return O})),n.d(t,"l",(function(){return v})),n.d(t,"n",(function(){return k})),n.d(t,"m",(function(){return w})),n.d(t,"o",(function(){return S})),n.d(t,"r",(function(){return I})),n.d(t,"p",(function(){return N})),n.d(t,"q",(function(){return j})),n.d(t,"s",(function(){return T})),n.d(t,"t",(function(){return C})),n.d(t,"u",(function(){return $})),n.d(t,"w",(function(){return E})),n.d(t,"v",(function(){return A})),n.d(t,"x",(function(){return R})),n.d(t,"y",(function(){return _})),n.d(t,"z",(function(){return F})),n.d(t,"A",(function(){return D})),n.d(t,"B",(function(){return M})),n.d(t,"C",(function(){return z})),n.d(t,"D",(function(){return L})),n.d(t,"E",(function(){return P})),n.d(t,"F",(function(){return B})),n.d(t,"G",(function(){return W})),n.d(t,"H",(function(){return V})),n.d(t,"I",(function(){return U})),n.d(t,"J",(function(){return G})),n.d(t,"K",(function(){return H})),n.d(t,"M",(function(){return K})),n.d(t,"N",(function(){return X})),n.d(t,"L",(function(){return Y})),n.d(t,"O",(function(){return Z})),n.d(t,"P",(function(){return J})),n.d(t,"Q",(function(){return Q})),n.d(t,"R",(function(){return ee})),n.d(t,"S",(function(){return te})),n.d(t,"T",(function(){return ne})),n.d(t,"U",(function(){return re})),n.d(t,"W",(function(){return ae})),n.d(t,"V",(function(){return se})),n.d(t,"qc",(function(){return ie})),n.d(t,"X",(function(){return oe})),n.d(t,"Y",(function(){return ue})),n.d(t,"Z",(function(){return ce})),n.d(t,"bb",(function(){return le})),n.d(t,"ab",(function(){return de})),n.d(t,"cb",(function(){return he})),n.d(t,"db",(function(){return pe})),n.d(t,"eb",(function(){return fe})),n.d(t,"fb",(function(){return me})),n.d(t,"gb",(function(){return be})),n.d(t,"hb",(function(){return ge})),n.d(t,"ib",(function(){return ye})),n.d(t,"jb",(function(){return xe})),n.d(t,"lb",(function(){return Oe})),n.d(t,"pb",(function(){return ve})),n.d(t,"ob",(function(){return ke})),n.d(t,"qb",(function(){return we})),n.d(t,"rb",(function(){return Se})),n.d(t,"tb",(function(){return Ie})),n.d(t,"sb",(function(){return Ne})),n.d(t,"ub",(function(){return je})),n.d(t,"vb",(function(){return Te})),n.d(t,"wb",(function(){return Ce})),n.d(t,"xb",(function(){return $e})),n.d(t,"Ab",(function(){return Ee})),n.d(t,"Bb",(function(){return Ae})),n.d(t,"Cb",(function(){return Re})),n.d(t,"Db",(function(){return _e})),n.d(t,"Eb",(function(){return Fe})),n.d(t,"Fb",(function(){return De})),n.d(t,"Hb",(function(){return Me})),n.d(t,"Ib",(function(){return ze})),n.d(t,"Jb",(function(){return Le})),n.d(t,"Kb",(function(){return Pe})),n.d(t,"Gb",(function(){return Be})),n.d(t,"Lb",(function(){return We})),n.d(t,"yb",(function(){return Ve})),n.d(t,"zb",(function(){return Ue})),n.d(t,"Mb",(function(){return Ge})),n.d(t,"Sb",(function(){return He})),n.d(t,"Nb",(function(){return qe})),n.d(t,"Qb",(function(){return Ke})),n.d(t,"Ob",(function(){return Xe})),n.d(t,"Pb",(function(){return Ye})),n.d(t,"Rb",(function(){return Ze})),n.d(t,"Tb",(function(){return Je})),n.d(t,"Ub",(function(){return Qe})),n.d(t,"Vb",(function(){return et})),n.d(t,"Wb",(function(){return tt})),n.d(t,"Xb",(function(){return nt})),n.d(t,"Yb",(function(){return at})),n.d(t,"Zb",(function(){return st})),n.d(t,"ac",(function(){return it})),n.d(t,"ec",(function(){return ot})),n.d(t,"bc",(function(){return ut})),n.d(t,"cc",(function(){return ct})),n.d(t,"dc",(function(){return lt})),n.d(t,"gc",(function(){return ht})),n.d(t,"fc",(function(){return pt})),n.d(t,"hc",(function(){return ft})),n.d(t,"ic",(function(){return mt})),n.d(t,"jc",(function(){return bt})),n.d(t,"kc",(function(){return gt})),n.d(t,"lc",(function(){return yt})),n.d(t,"mc",(function(){return xt})),n.d(t,"nc",(function(){return Ot})),n.d(t,"oc",(function(){return vt})),n.d(t,"pc",(function(){return kt})),n.d(t,"rc",(function(){return wt})),n.d(t,"sc",(function(){return St})),n.d(t,"uc",(function(){return It})),n.d(t,"xc",(function(){return Nt})),n.d(t,"yc",(function(){return jt})),n.d(t,"vc",(function(){return Tt})),n.d(t,"wc",(function(){return Ct})),n.d(t,"tc",(function(){return $t})),n.d(t,"zc",(function(){return Et})),n.d(t,"Bc",(function(){return At})),n.d(t,"Cc",(function(){return Rt})),n.d(t,"Dc",(function(){return _t})),n.d(t,"Ec",(function(){return Ft})),n.d(t,"Fc",(function(){return Dt})),n.d(t,"Gc",(function(){return Mt})),n.d(t,"Lc",(function(){return zt})),n.d(t,"Jc",(function(){return Lt})),n.d(t,"Kc",(function(){return Pt})),n.d(t,"Ic",(function(){return Bt})),n.d(t,"Hc",(function(){return Wt})),n.d(t,"Nc",(function(){return Vt})),n.d(t,"Vc",(function(){return Ut})),n.d(t,"ed",(function(){return Gt})),n.d(t,"Oc",(function(){return Ht})),n.d(t,"Uc",(function(){return qt})),n.d(t,"Mc",(function(){return Kt})),n.d(t,"Pc",(function(){return Xt})),n.d(t,"Qc",(function(){return Yt})),n.d(t,"Rc",(function(){return Zt})),n.d(t,"Sc",(function(){return Jt})),n.d(t,"Tc",(function(){return Qt})),n.d(t,"Xc",(function(){return en})),n.d(t,"Wc",(function(){return tn})),n.d(t,"Zc",(function(){return nn})),n.d(t,"ad",(function(){return rn})),n.d(t,"bd",(function(){return an})),n.d(t,"cd",(function(){return sn})),n.d(t,"dd",(function(){return on})),n.d(t,"fd",(function(){return un})),n.d(t,"gd",(function(){return cn})),n.d(t,"hd",(function(){return ln})),n.d(t,"id",(function(){return dn})),n.d(t,"jd",(function(){return hn})),n.d(t,"kd",(function(){return pn})),n.d(t,"ld",(function(){return fn})),n.d(t,"md",(function(){return mn})),n.d(t,"nd",(function(){return bn})),n.d(t,"od",(function(){return gn})),n.d(t,"pd",(function(){return yn})),n.d(t,"Yc",(function(){return xn})),n.d(t,"kb",(function(){return On})),n.d(t,"Ac",(function(){return vn})),n.d(t,"qd",(function(){return kn})),n.d(t,"mb",(function(){return wn})),n.d(t,"nb",(function(){return Sn}));const r="Abs",o="Acos",c="Acosh",l="Add",d="AddN",h="All",f="Any",m="ArgMax",y="ArgMin",x="Asin",O="Asinh",v="Atan",k="Atanh",w="Atan2",S="AvgPool",I="AvgPoolGrad",N="AvgPool3D",j="AvgPool3DGrad",T="BatchMatMul",C="BatchToSpaceND",$="Bincount",E="BroadcastTo",A="BroadcastArgs",R="Cast",_="Ceil",F="ClipByValue",D="Complex",M="ComplexAbs",z="Concat",L="Conv2D",P="Conv2DBackpropFilter",B="Conv2DBackpropInput",W="Conv3D",V="Conv3DBackpropFilterV2",U="Conv3DBackpropInputV2",G="Cos",H="Cosh",K="Cumprod",X="Cumsum",Y="CropAndResize",Z="DenseBincount",J="DepthToSpace",Q="DepthwiseConv2dNative",ee="DepthwiseConv2dNativeBackpropFilter",te="DepthwiseConv2dNativeBackpropInput",ne="Diag",re="Dilation2D",ae="Dilation2DBackpropInput",se="Dilation2DBackpropFilter",ie="RealDiv",oe="Einsum",ue="Elu",ce="EluGrad",le="Erf",de="Equal",he="Exp",pe="ExpandDims",fe="Expm1",me="FFT",be="Fill",ge="FlipLeftRight",ye="Floor",xe="FloorDiv",Oe="FusedBatchNorm",ve="GatherV2",ke="GatherNd",we="Greater",Se="GreaterEqual",Ie="Identity",Ne="IFFT",je="Imag",Te="IsFinite",Ce="IsInf",$e="IsNan",Ee="LeakyRelu",Ae="Less",Re="LessEqual",_e="LinSpace",Fe="Log",De="Log1p",Me="LogicalAnd",ze="LogicalNot",Le="LogicalOr",Pe="LogicalXor",Be="LogSoftmax",We="LowerBound",Ve="LRN",Ue="LRNGrad",Ge="Max",He="Maximum",qe="MaxPool",Ke="MaxPoolGrad",Xe="MaxPool3D",Ye="MaxPool3DGrad",Ze="MaxPoolWithArgmax",Je="Mean",Qe="Min",et="Minimum",tt="MirrorPad",nt="Mod",at="Multinomial",st="Multiply",it="Neg",ot="NotEqual",ut="NonMaxSuppressionV3",ct="NonMaxSuppressionV4",lt="NonMaxSuppressionV5",ht="OnesLike",pt="OneHot",ft="Pack",mt="PadV2",bt="Pool",gt="Pow",yt="Prelu",xt="Prod",Ot="RaggedTensorToTensor",vt="Range",kt="Real",wt="Reciprocal",St="Relu",It="Reshape",Nt="ResizeNearestNeighbor",jt="ResizeNearestNeighborGrad",Tt="ResizeBilinear",Ct="ResizeBilinearGrad",$t="Relu6",Et="Reverse",At="Round",Rt="Rsqrt",_t="ScatterNd",Ft="SearchSorted",Dt="Select",Mt="Selu",zt="Slice",Lt="Sin",Pt="Sinh",Bt="Sign",Wt="Sigmoid",Vt="Softplus",Ut="Sqrt",Gt="Sum",Ht="SpaceToBatchND",qt="SplitV",Kt="Softmax",Xt="SparseFillEmptyRows",Yt="SparseReshape",Zt="SparseSegmentMean",Jt="SparseSegmentSum",Qt="SparseToDense",en="SquaredDifference",tn="Square",nn="StridedSlice",rn="StringNGrams",an="StringSplit",sn="StringToHashBucketFast",on="Sub",un="Tan",cn="Tanh",ln="Tile",dn="TopK",hn="Transform",pn="Transpose",fn="Unique",mn="Unpack",bn="UnsortedSegmentSum",gn="UpperBound",yn="ZerosLike",xn="Step",On="FromPixels",vn="RotateWithOffset",kn="_FusedMatMul",wn="FusedConv2D",Sn="FusedDepthwiseConv2D"},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return l}));var r=n(547),o=n(599);const c="__op";function l(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const l=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=c;const d=(...e)=>{r.a.startScope(n);try{const t=l(...e);return Object(o.x)(t)&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(t),t}catch(e){throw r.a.endScope(null),e}};return Object.defineProperty(d,"name",{value:n,configurable:!0}),d}},function(e,t,n){"use strict";n.d(t,"c",(function(){return h})),n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return x}));var r=n(547),o=n(567),c=n(548),l=n(599),d=n(549);function h(e,t){let n=e;if(Object(l.A)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Object(l.A)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Object(o.c)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&f(e,r,[]),r}function f(e,t,n){if(n=n||[],!Array.isArray(e)&&!Object(l.A)(e))return void Object(l.b)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Object(l.b)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Object(l.b)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let i=0;i<e.length;++i)f(e[i],r,n.concat(i))}function m(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function y(e,t,n,o="numeric"){if(e instanceof c.a)return m(o,e.dtype,t,n),e;let f=Object(l.r)(e);if("string"!==f&&["bool","int32","float32"].indexOf(o)>=0&&(f=o),m(o,f,t,n),null==e||!Object(l.A)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const y=h(e,f);Object(l.A)(e)||Array.isArray(e)||(e=[e]);const x="string"!==f?Object(d.toTypedArray)(e,f):Object(l.m)(e,[],!0);return r.a.makeTensor(x,y,f)}function x(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,i)=>y(e,`${t}[${i}]`,n,r)))}},function(e,t,n){"use strict";n.d(t,"b",(function(){return N})),n.d(t,"a",(function(){return j}));var r=n(671),o=n(567),c=n(711),l=n(544),d=n(640),h=n(670),f=n(549),m=n(599);class y{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new O)}profileKernel(e,t,n){let r;const c=()=>{r=n()};let l;const d=f.now();if(this.backendTimer.timerAvailable())l=this.backendTimer.time(c);else{c();for(const output of r)output.dataSync();l=Promise.resolve({kernelMs:f.now()-d})}if(Object(o.c)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let i=0;i<r.length;i++){const output=r[i];output.data().then((t=>{x(t,output.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:l.then((e=>e.kernelMs)),extraInfo:l.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:o,extraInfo:c}=e;n.forEach((e=>{Promise.all([e.data(),r,c]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],o,n[2])}))}))}}function x(e,t,n){if("float32"!==t)return!1;for(let i=0;i<e.length;i++){const t=e[i];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class O{logKernelProfile(e,t,n,r,o,c){const time="number"==typeof r?m.L(`${r}ms`,9):r.error,l=m.L(e,25),d=t.rank,h=t.size,f=m.L(t.shape.toString(),14);let y="";for(const e in o){const input=o[e];if(null!=input){const n=input.shape||t.shape,r=n.length;y+=`${e}: ${r}D ${r>0?n:""} `}}console.log(`%c${l}\t%c${time}\t%c${d}D ${f}\t%c${h}\t%c${y}\t%c${c}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var v=n(548),k=n(562);function w(e){return null!=e.kernelName}class S{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class I{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new S}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let i=0;i<e.length;i++){const t=e[i];if(await this.initializeBackend(t).success)return void await this.setBackend(t)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(h.b(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new y(this.backendInstance),!0}setupRegisteredKernels(){Object(d.d)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Object(d.d)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.b||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,h.b(`Initialization of backend ${e} failed`),h.b(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return h.b(`Initialization of backend ${e} failed`),h.b(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((a,b)=>this.registryFactory[b].priority-this.registryFactory[a].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let i=0;i<e.length;i++){const t=e[i],{success:n,asyncInit:r}=this.initializeBackend(t);if(r||n)return{name:t,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,o=this.readSync(t),c=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,o,n.shape,n.dtype,c),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return I.nextTensorId++}nextVariableId(){return I.nextVariableId++}clone(e){const t=j.runKernel(l.tb,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return j.runKernel(l.x,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Object(d.c)(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let o=0;n.forEach((e=>{o+="complex64"===e.dtype?3:1}));const c=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],l=r-t-o-c;if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),o=this.state.numBytes,c=this.state.numTensors;let l,h;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const f=w(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(w(e)){const{kernelName:t,inputs:o,attrs:c}=e;null==this.backendName&&this.backend;const f=Object(d.c)(t,this.backendName);m.b(null!=f,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),l=()=>{const e=this.backend.numDataIds();h=f.kernelFunc({inputs:o,attrs:c,backend:this.backend});const l=Array.isArray(h)?h:[h];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,l);const d=l.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,o,d);n=this.saveTensorsForBackwardMode(e)}return d}}else{const{forwardFunc:t}=e,o=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};l=()=>{const e=this.backend.numDataIds();h=this.tidy((()=>t(this.backend,o)));const n=Array.isArray(h)?h:[h];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(f,e,n),n}}const{inputs:y,attrs:x}=e,O=w(e)?null:e.backwardsFunc;let v;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(v=this.profiler.profileKernel(f,y,(()=>l())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(v),t=v.outputs):t=l()})),r&&this.addTapeNode(f,y,t,O,n,x),this.state.profiling&&this.state.activeProfile.kernels.push({name:f,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-c,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(y).map((e=>null!=y[e]?y[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:v.timeMs,extraInfo:v.extraInfo}),Array.isArray(h)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=Object(d.b)(e);if(null!=r){const e=r.inputsToSave||[],o=r.outputsToSave||[];let c;r.saveAllInputs?(m.b(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),c=Object.keys(t).map((e=>t[e]))):c=e.map((e=>t[e]));const l=n.filter(((e,i)=>o[i]));return c.concat(l)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let o=e;"string"===n&&m.z(e[0])&&(o=e.map((e=>f.encodeString(e))));const c=r.write(o,t,n),l=new v.a(t,n,c,this.nextTensorId());if(this.trackTensor(l,r),"string"===n){const e=this.state.tensorInfo.get(c),t=Object(m.f)(o);this.state.numBytes+=t-e.bytes,e.bytes=t}return l}makeTensorFromDataId(e,t,n,r){const o={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(o,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:o}=e,c=new v.a(r,o,n,this.nextTensorId());return this.trackTensor(c,t),c}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const o=new v.c(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}trackTensor(a,e){this.state.numTensors++,"string"===a.dtype&&this.state.numStringTensors++;let t=0;"complex64"!==a.dtype&&"string"!==a.dtype&&(t=a.size*m.g(a.dtype)),this.state.numBytes+=t,this.state.tensorInfo.has(a.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(a.dataId,{backend:e||this.backend,dtype:a.dtype,shape:a.shape,bytes:t})),a instanceof v.c||this.track(a)}incRef(a,e){this.trackTensor(a,e),this.backend.incRef(a.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(a){if(!this.state.tensorInfo.has(a.dataId))return;const e=this.state.tensorInfo.get(a.dataId);if(this.state.numTensors--,"string"===a.dtype&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),"complex64"!==a.dtype&&"string"!==a.dtype){const e=a.size*m.g(a.dtype);this.state.numBytes-=e}e.backend.disposeData(a.dataId)&&this.removeDataId(a.dataId,e.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,o,c){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:o},h=Object(d.b)(e);null!=h&&(r=h.gradFunc),null!=r&&(l.gradient=e=>(e=e.map(((e,i)=>{if(null==e){const output=n[i],e=m.F(output.size,output.dtype);return this.makeTensor(e,output.shape,output.dtype)}return e})),r(e.length>1?e:e[0],o,c))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Object(k.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let i=0;i<this.state.activeScope.track.length;i++){const e=this.state.activeScope.track[i];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(m.b(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));m.b(o instanceof v.a,(()=>"The result y returned by f() must be a tensor."));const c=function(e,t,n){const r={},o={};for(let i=0;i<t.length;i++)r[t[i].id]=!0;for(let i=0;i<e.length;i++){const n=e[i],c=n.inputs;for(const e in c){const input=c[e];let l=!1;for(let e=0;e<t.length;e++)if(r[input.id]){n.outputs.forEach((output=>r[output.id]=!0)),l=!0,o[n.id]=!0;break}if(l)break}}const c={};c[n.id]=!0;const l={};for(let i=e.length-1;i>=0;i--){const t=e[i],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(c[t.outputs[e].id]){for(const e in n)c[n[e].id]=!0,l[t.id]=!0;break}}const d=[];for(let i=0;i<e.length;i++){const t=e[i];if(o[t.id]&&l[t.id]){const e={};for(const n in t.inputs){const o=t.inputs[n];r[o.id]&&(e[n]=o)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,d.push(n)}}return d}(this.state.activeTape,t,o);if(!r&&0===c.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[o.id]=null==n?function(e){const t=Object(m.D)(Object(m.O)(e),"float32");return j.makeTensor(t,e,"float32")}(o.shape):n,function(e,t,n,r){for(let i=t.length-1;i>=0;i--){const o=t[i],c=[];if(o.outputs.forEach((t=>{const n=e[t.id];null!=n?c.push(n):c.push(null)})),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const l=o.gradient(c);for(const t in o.inputs){if(!(t in l))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(l)}.`);const c=n((()=>l[t]()));if("float32"!==c.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${c.dtype}'`);const d=o.inputs[t];if(!m.a(c.shape,d.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${t}' has shape '${c.shape}', which does not match the shape of the input '${d.shape}'`);if(null==e[d.id])e[d.id]=c;else{const t=e[d.id];e[d.id]=r(t,c),t.dispose()}}}}(e,c,(e=>this.tidy(e)),T);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:o,grads:r}}))}customGrad(e){return m.b(m.u(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;m.b(t.every((e=>e instanceof v.a)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((input,i)=>{r[i]=input}));return this.runKernelFunc({forwardFunc:(r,o)=>(n=e(...t,o),m.b(n.value instanceof v.a,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),m.b(m.u(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const o=n.gradFunc(e,r),c=Array.isArray(o)?o:[o];m.b(c.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),m.b(c.every((e=>e instanceof v.a)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const l={};return c.forEach(((e,i)=>{l[i]=()=>e})),l},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Object(f.now)(),n=await this.backend.time(e);return n.wallMs=Object(f.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new S;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function N(){const e=Object(c.b)();if(null==e._tfengine){const t=new o.b(e);e._tfengine=new I(t)}return Object(o.d)(e._tfengine.ENV),Object(v.g)((()=>e._tfengine)),e._tfengine}I.nextTensorId=0,I.nextVariableId=0;const j=N();function T(a,b){const e={a:a,b:b};return j.runKernel(l.d,e)}},function(e,t,n){"use strict";n.d(t,"b",(function(){return y})),n.d(t,"g",(function(){return k})),n.d(t,"f",(function(){return w})),n.d(t,"e",(function(){return S})),n.d(t,"a",(function(){return I})),n.d(t,"d",(function(){return N})),n.d(t,"c",(function(){return j}));var r=n(711),o=n(599);function c(e,t,n,r){const c=Object(o.j)(t),d=function(e,t,n,r){const c=Object(o.O)(t),d=r[r.length-1],h=new Array(d).fill(0),m=t.length,y="complex64"===n?f(e):e;if(m>1)for(let e=0;e<c/d;e++){const t=e*d;for(let e=0;e<d;e++)h[e]=Math.max(h[e],l(y[t+e],0,n).length)}return h}(e,t,n,c),m=t.length,y=h(e,t,n,c,d),x=["Tensor"];return r&&(x.push(`  dtype: ${n}`),x.push(`  rank: ${m}`),x.push(`  shape: [${t}]`),x.push("  values:")),x.push(y.map((e=>"    "+e)).join("\n")),x.join("\n")}function l(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Object(o.z)(e)?`'${e}'`:"bool"===n?d(e):parseFloat(e.toFixed(7)).toString(),Object(o.L)(r,t)}function d(e){return 0===e?"false":"true"}function h(e,t,n,r,o,c=!0){const m="complex64"===n?2:1,y=t[0],x=t.length;if(0===x){if("complex64"===n){return[l(f(e)[0],0,n)]}return"bool"===n?[d(e[0])]:[e[0].toString()]}if(1===x){if(y>20){const t=3*m;let r=Array.from(e.slice(0,t)),c=Array.from(e.slice((y-3)*m,y*m));return"complex64"===n&&(r=f(r),c=f(c)),["["+r.map(((e,i)=>l(e,o[i],n))).join(", ")+", ..., "+c.map(((e,i)=>l(e,o[y-3+i],n))).join(", ")+"]"]}return["["+("complex64"===n?f(e):Array.from(e)).map(((e,i)=>l(e,o[i],n))).join(", ")+"]"]}const O=t.slice(1),v=r.slice(1),k=r[0]*m,w=[];if(y>20){for(let i=0;i<3;i++){const t=i*k,r=t+k;w.push(...h(e.slice(t,r),O,n,v,o,!1))}w.push("...");for(let i=y-3;i<y;i++){const t=i*k,r=t+k;w.push(...h(e.slice(t,r),O,n,v,o,i===y-1))}}else for(let i=0;i<y;i++){const t=i*k,r=t+k;w.push(...h(e.slice(t,r),O,n,v,o,i===y-1))}const S=2===x?",":"";w[0]="["+w[0]+S;for(let i=1;i<w.length-1;i++)w[i]=" "+w[i]+S;let I=",\n";for(let i=2;i<x;i++)I+="\n";return w[w.length-1]=" "+w[w.length-1]+"]"+(c?"":I),w}function f(e){const t=[];for(let i=0;i<e.length;i+=2)t.push([e[i],e[i+1]]);return t}var m=n(549);class y{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=o.O(e),null!=n){const e=n.length;o.b(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||o.n(t,this.size),this.strides=Object(o.j)(e)}set(e,...t){0===t.length&&(t=[0]),o.b(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let i=0;for(const t of e){if(t<0||t>=this.shape[i]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}i++}let t=e[e.length-1];for(let i=0;i<e.length-1;++i)t+=this.strides[i]*e[i];return this.values[t]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let i=0;i<e.length-1;++i)t+=this.strides[i]*e[i];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let i=0;i<t.length-1;++i)t[i]=Math.floor(e/this.strides[i]),e-=t[i]*this.strides[i];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return x().makeTensor(this.values,this.shape,this.dtype)}}let x=null,O=null,v=null;function k(e){x=e}function w(e){O=e}function S(e){v=e}class I{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=o.O(e),this.strides=Object(o.j)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return O.buffer(this.shape,this.dtype,e)}bufferSync(){return O.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Object(o.U)(this.shape,e,"complex64"===this.dtype)}arraySync(){return Object(o.U)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const data=x().read(this.dataId);if("string"===this.dtype){const e=await data;try{return e.map((b=>m.decodeString(b)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return data}dataToGPU(e){return this.throwIfDisposed(),x().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const data=x().readSync(this.dataId);if("string"===this.dtype)try{return data.map((b=>m.decodeString(b)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return data}async bytes(){this.throwIfDisposed();const data=await x().read(this.dataId);return"string"===this.dtype?data:new Uint8Array(data.buffer)}dispose(){this.isDisposed||(x().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return O.print(this,e)}clone(){return this.throwIfDisposed(),O.clone(this)}toString(e=!1){return c(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),O.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),x().makeVariable(this,e,t,n)}}function N(){return Object(r.a)("Tensor",(()=>I))}Object.defineProperty(I,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),N();class j extends I{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!o.a(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);x().disposeTensor(this),this.dataId=e.dataId,x().incRef(this,null)}dispose(){x().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(j,Symbol.hasInstance,{value:e=>e instanceof I&&null!=e.assign&&e.assign instanceof Function})},function(e,t,n){"use strict";n.r(t),n.d(t,"shuffle",(function(){return o.M})),n.d(t,"shuffleCombo",(function(){return o.N})),n.d(t,"clamp",(function(){return o.i})),n.d(t,"nearestLargerEven",(function(){return o.H})),n.d(t,"swap",(function(){return o.S})),n.d(t,"sum",(function(){return o.R})),n.d(t,"randUniform",(function(){return o.J})),n.d(t,"distSquared",(function(){return o.l})),n.d(t,"assert",(function(){return o.b})),n.d(t,"assertShapesMatch",(function(){return o.e})),n.d(t,"assertNonNull",(function(){return o.d})),n.d(t,"flatten",(function(){return o.m})),n.d(t,"sizeFromShape",(function(){return o.O})),n.d(t,"isScalarShape",(function(){return o.y})),n.d(t,"arraysEqual",(function(){return o.a})),n.d(t,"isInt",(function(){return o.v})),n.d(t,"tanh",(function(){return o.T})),n.d(t,"sizeToSquarishShape",(function(){return o.P})),n.d(t,"createShuffledIndices",(function(){return o.k})),n.d(t,"rightPad",(function(){return o.L})),n.d(t,"repeatedTry",(function(){return o.K})),n.d(t,"inferFromImplicitShape",(function(){return o.s})),n.d(t,"parseAxisParam",(function(){return o.I})),n.d(t,"squeezeShape",(function(){return o.Q})),n.d(t,"getTypedArrayFromDType",(function(){return o.o})),n.d(t,"getArrayFromDType",(function(){return o.n})),n.d(t,"checkConversionForErrors",(function(){return o.h})),n.d(t,"isValidDtype",(function(){return o.B})),n.d(t,"hasEncodingLoss",(function(){return o.p})),n.d(t,"isTypedArray",(function(){return o.A})),n.d(t,"bytesPerElement",(function(){return o.g})),n.d(t,"bytesFromStringArray",(function(){return o.f})),n.d(t,"isString",(function(){return o.z})),n.d(t,"isBoolean",(function(){return o.t})),n.d(t,"isNumber",(function(){return o.w})),n.d(t,"inferDtype",(function(){return o.r})),n.d(t,"isFunction",(function(){return o.u})),n.d(t,"nearestDivisor",(function(){return o.G})),n.d(t,"computeStrides",(function(){return o.j})),n.d(t,"toNestedArray",(function(){return o.U})),n.d(t,"makeOnesTypedArray",(function(){return o.D})),n.d(t,"makeZerosTypedArray",(function(){return o.F})),n.d(t,"makeZerosNestedTypedArray",(function(){return o.E})),n.d(t,"assertNonNegativeIntegerDimensions",(function(){return o.c})),n.d(t,"locToIndex",(function(){return o.C})),n.d(t,"indexToLoc",(function(){return o.q})),n.d(t,"isPromise",(function(){return o.x})),n.d(t,"hexToLong",(function(){return d})),n.d(t,"fingerPrint64",(function(){return I})),n.d(t,"createScalarValue",(function(){return N})),n.d(t,"toTypedArray",(function(){return j})),n.d(t,"now",(function(){return T})),n.d(t,"fetch",(function(){return C})),n.d(t,"encodeString",(function(){return $})),n.d(t,"decodeString",(function(){return E}));var r=n(567),o=n(599),c=n(932);const l=n.n(c).a||c;function d(e){return l.fromString(e,!0,16)}const h=d("c3a5c85c97cb3127"),f=d("b492b66fbe98f273"),m=d("9ae16a3b2f90404f");function y(e){return e.xor(e.shru(47))}function x(s,e,t){const n=s.slice(e,e+t);return l.fromBytes(Array.from(n),!0,!0)}function O(s,e){return x(s,e,8)}function v(s,e){return x(s,e,4)}function k(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function w(u,e,t=d("9ddfea08eb382d69")){let a=u.xor(e).mul(t);a=a.xor(a.shru(47));let b=e.xor(a).mul(t);return b=b.xor(b.shru(47)),b=b.mul(t),b}function S(s,e,a,b){return function(e,t,n,r,a,b){a=a.add(e),b=k(b.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),b=b.add(k(a,44)),[a.add(r),b.add(o)]}(O(s,e),O(s,e+8),O(s,e+16),O(s,e+24),a,b)}function I(s,e=s.length){const t=l.fromNumber(81,!0);if(e<=32)return e<=16?function(s,e=s.length){if(e>=8){const t=m.add(2*e),a=O(s,0).add(m),b=O(s,e-8);return w(k(b,37).mul(t).add(a),k(a,25).add(b).mul(t),t)}if(e>=4){const t=m.add(2*e);return w(v(s,0).shl(3).add(e),v(s,e-4),t)}if(e>0){const t=s[0]+(s[e>>1]<<8),n=e+(s[e-1]<<2);return y(m.mul(t).xor(h.mul(n))).mul(m)}return m}(s,e):function(s,e=s.length){const t=m.add(2*e),a=O(s,0).mul(f),b=O(s,8),n=O(s,e-8).mul(t),r=O(s,e-16).mul(m);return w(k(a.add(b),43).add(k(n,30)).add(r),a.add(k(b.add(m),18)).add(n),t)}(s,e);if(e<=64)return function(s,e=s.length){const t=m.add(2*e),a=O(s,0).mul(m),b=O(s,8),n=O(s,e-8).mul(t),r=O(s,e-16).mul(m),o=k(a.add(b),43).add(k(n,30)).add(r),c=w(o,a.add(k(b.add(m),18)).add(n),t),l=O(s,16).mul(t),d=O(s,24),g=o.add(O(s,e-32)).mul(t),h=c.add(O(s,e-24)).mul(t);return w(k(l.add(d),43).add(k(g,30)).add(h),l.add(k(d.add(a),18)).add(g),t)}(s,e);let n=t,r=t.mul(f).add(113),o=y(r.mul(m).add(113)).mul(m),c=[l.UZERO,l.UZERO],d=[l.UZERO,l.UZERO];n=n.mul(m).add(O(s,0));let x=0;const I=64*(e-1>>6),N=I+(e-1&63)-63;do{n=k(n.add(r).add(c[0]).add(O(s,x+8)),37).mul(f),r=k(r.add(c[1]).add(O(s,x+48)),42).mul(f),n=n.xor(d[1]),r=r.add(c[0]).add(O(s,x+40)),o=k(o.add(d[0]),33).mul(f),c=S(s,x,c[1].mul(f),n.add(d[0])),d=S(s,x+32,o.add(d[1]),r.add(O(s,x+16))),[o,n]=[n,o],x+=64}while(x!==I);const j=f.add(o.and(255).shl(1));return x=N,d[0]=d[0].add(e-1&63),c[0]=c[0].add(d[0]),d[0]=d[0].add(c[0]),n=k(n.add(r).add(c[0]).add(O(s,x+8)),37).mul(j),r=k(r.add(c[1]).add(O(s,x+48)),42).mul(j),n=n.xor(d[1].mul(9)),r=r.add(c[0].mul(9).add(O(s,x+40))),o=k(o.add(d[0]),33).mul(j),c=S(s,x,c[1].mul(j),n.add(d[0])),d=S(s,x+32,o.add(d[1]),r.add(O(s,x+16))),[o,n]=[n,o],w(w(c[0],d[0],j).add(y(r).mul(h)).add(o),w(c[1],d[1],j).add(n),j)}function N(e,t){return"string"===t?$(e):j([e],t)}function j(a,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(a)&&(a=o.m(a)),Object(r.c)().getBool("DEBUG")&&o.h(a,e),function(a,e){return a instanceof Float32Array&&"float32"===e||a instanceof Int32Array&&"int32"===e||a instanceof Uint8Array&&"bool"===e}(a,e))return a;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(a);if("int32"===e)return new Int32Array(a);if("bool"===e){const e=new Uint8Array(a.length);for(let i=0;i<e.length;++i)0!==Math.round(a[i])&&(e[i]=1);return e}throw new Error(`Unknown data type ${e}`)}function T(){return Object(r.c)().platform.now()}function C(path,e){return Object(r.c)().platform.fetch(path,e)}function $(s,e="utf-8"){return e=e||"utf-8",Object(r.c)().platform.encode(s,e)}function E(e,t="utf-8"){return t=t||"utf-8",Object(r.c)().platform.decode(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({reshape_:function(e,t){const n={x:Object(c.a)(e,"x","reshape","string_or_numeric")},l={shape:t};return r.a.runKernel(o.uc,n,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({mul_:function(a,b){let e=Object(l.a)(a,"a","mul"),t=Object(l.a)(b,"b","mul");[e,t]=Object(c.makeTypesMatch)(e,t);const n={a:e,b:t};return r.a.runKernel(o.Zb,n)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return o.a})),n.d(t,"c",(function(){return c.a})),n.d(t,"d",(function(){return l.a})),n.d(t,"e",(function(){return d.a})),n.d(t,"f",(function(){return O})),n.d(t,"g",(function(){return v.a})),n.d(t,"h",(function(){return k.a})),n.d(t,"i",(function(){return w.a})),n.d(t,"j",(function(){return S.a})),n.d(t,"k",(function(){return I.a})),n.d(t,"l",(function(){return N.a})),n.d(t,"m",(function(){return j.a})),n.d(t,"n",(function(){return T.a})),n.d(t,"o",(function(){return C.a})),n.d(t,"p",(function(){return $.a})),n.d(t,"q",(function(){return _})),n.d(t,"r",(function(){return B})),n.d(t,"w",(function(){return W.a})),n.d(t,"s",(function(){return V.a})),n.d(t,"t",(function(){return U})),n.d(t,"u",(function(){return G})),n.d(t,"v",(function(){return H})),n.d(t,"x",(function(){return K})),n.d(t,"z",(function(){return X})),n.d(t,"A",(function(){return Y.a})),n.d(t,"B",(function(){return Z.a})),n.d(t,"C",(function(){return A.a})),n.d(t,"D",(function(){return J.a})),n.d(t,"E",(function(){return Q.a})),n.d(t,"F",(function(){return ee.a})),n.d(t,"G",(function(){return te.a})),n.d(t,"H",(function(){return F.a})),n.d(t,"I",(function(){return ne})),n.d(t,"J",(function(){return re})),n.d(t,"K",(function(){return ae})),n.d(t,"L",(function(){return se})),n.d(t,"M",(function(){return ie.a})),n.d(t,"N",(function(){return oe.a})),n.d(t,"O",(function(){return ue.a})),n.d(t,"P",(function(){return ce})),n.d(t,"Q",(function(){return de})),n.d(t,"R",(function(){return he.a})),n.d(t,"S",(function(){return pe.a})),n.d(t,"U",(function(){return fe.a})),n.d(t,"V",(function(){return me.a})),n.d(t,"W",(function(){return be})),n.d(t,"X",(function(){return ge.a})),n.d(t,"Y",(function(){return ye.a})),n.d(t,"Z",(function(){return xe})),n.d(t,"ab",(function(){return Oe.a})),n.d(t,"bb",(function(){return div.a})),n.d(t,"cb",(function(){return ve.a})),n.d(t,"db",(function(){return ke.a})),n.d(t,"fb",(function(){return we})),n.d(t,"gb",(function(){return Se.a})),n.d(t,"ib",(function(){return Ie.a})),n.d(t,"jb",(function(){return Ne.a})),n.d(t,"kb",(function(){return je.a})),n.d(t,"lb",(function(){return Te.a})),n.d(t,"mb",(function(){return Ce.a})),n.d(t,"nb",(function(){return $e.a})),n.d(t,"ob",(function(){return Ae})),n.d(t,"qb",(function(){return Re.a})),n.d(t,"rb",(function(){return _e.a})),n.d(t,"sb",(function(){return Fe.a})),n.d(t,"ub",(function(){return De.a})),n.d(t,"wb",(function(){return Me.a})),n.d(t,"xb",(function(){return ze.a})),n.d(t,"zb",(function(){return Le.a})),n.d(t,"Db",(function(){return Pe.a})),n.d(t,"Eb",(function(){return Be.a})),n.d(t,"Fb",(function(){return We.a})),n.d(t,"Gb",(function(){return Ve.a})),n.d(t,"Hb",(function(){return Ue.a})),n.d(t,"Ib",(function(){return Ge.a})),n.d(t,"Kb",(function(){return He})),n.d(t,"Lb",(function(){return qe.a})),n.d(t,"Mb",(function(){return Ke.a})),n.d(t,"Nb",(function(){return Xe.a})),n.d(t,"Ob",(function(){return Ye.a})),n.d(t,"Pb",(function(){return Ze.a})),n.d(t,"Qb",(function(){return Je.a})),n.d(t,"Rb",(function(){return Qe.a})),n.d(t,"Sb",(function(){return et.a})),n.d(t,"Tb",(function(){return tt.a})),n.d(t,"Ub",(function(){return nt.a})),n.d(t,"Wb",(function(){return it})),n.d(t,"Xb",(function(){return D.a})),n.d(t,"Yb",(function(){return ot.a})),n.d(t,"Zb",(function(){return ut.a})),n.d(t,"ac",(function(){return ct})),n.d(t,"bc",(function(){return lt})),n.d(t,"cc",(function(){return ht.a})),n.d(t,"dc",(function(){return pt.a})),n.d(t,"ec",(function(){return bt})),n.d(t,"fc",(function(){return gt.a})),n.d(t,"gc",(function(){return yt.a})),n.d(t,"hc",(function(){return xt.a})),n.d(t,"ic",(function(){return Ot.a})),n.d(t,"jc",(function(){return wt})),n.d(t,"lc",(function(){return M.a})),n.d(t,"mc",(function(){return St})),n.d(t,"nc",(function(){return It})),n.d(t,"oc",(function(){return Nt.a})),n.d(t,"qc",(function(){return jt.a})),n.d(t,"rc",(function(){return Tt.a})),n.d(t,"sc",(function(){return ft.a})),n.d(t,"tc",(function(){return Ct.a})),n.d(t,"vc",(function(){return $t})),n.d(t,"wc",(function(){return Et.a})),n.d(t,"xc",(function(){return At})),n.d(t,"yc",(function(){return Rt})),n.d(t,"zc",(function(){return _t})),n.d(t,"Ac",(function(){return Ft})),n.d(t,"Bc",(function(){return Dt.a})),n.d(t,"Cc",(function(){return Mt.a})),n.d(t,"Dc",(function(){return zt.a})),n.d(t,"Ec",(function(){return Lt.a})),n.d(t,"Fc",(function(){return Pt.a})),n.d(t,"Gc",(function(){return Bt})),n.d(t,"Hc",(function(){return Wt})),n.d(t,"Ic",(function(){return qt})),n.d(t,"Jc",(function(){return Kt})),n.d(t,"Kc",(function(){return Xt})),n.d(t,"Lc",(function(){return Yt})),n.d(t,"Mc",(function(){return Zt})),n.d(t,"Nc",(function(){return Jt.a})),n.d(t,"Oc",(function(){return Qt.a})),n.d(t,"Pc",(function(){return en.a})),n.d(t,"Qc",(function(){return tn.a})),n.d(t,"Rc",(function(){return R.a})),n.d(t,"Sc",(function(){return nn.a})),n.d(t,"Tc",(function(){return rn})),n.d(t,"Uc",(function(){return an})),n.d(t,"Vc",(function(){return sn})),n.d(t,"Wc",(function(){return on})),n.d(t,"Yc",(function(){return un.a})),n.d(t,"Zc",(function(){return cn.a})),n.d(t,"ad",(function(){return ln.a})),n.d(t,"dd",(function(){return dn.a})),n.d(t,"ed",(function(){return hn.a})),n.d(t,"fd",(function(){return pn})),n.d(t,"gd",(function(){return z.a})),n.d(t,"hd",(function(){return fn.a})),n.d(t,"jd",(function(){return mn.a})),n.d(t,"kd",(function(){return bn.a})),n.d(t,"ld",(function(){return L.a})),n.d(t,"md",(function(){return gn})),n.d(t,"nd",(function(){return yn})),n.d(t,"od",(function(){return xn})),n.d(t,"pd",(function(){return On})),n.d(t,"qd",(function(){return vn.a})),n.d(t,"rd",(function(){return kn.a})),n.d(t,"sd",(function(){return wn.a})),n.d(t,"pb",(function(){return Sn.a})),n.d(t,"yb",(function(){return In.a})),n.d(t,"Cb",(function(){return Nn.a})),n.d(t,"Xc",(function(){return jn.a})),n.d(t,"wd",(function(){return Tn.a})),n.d(t,"xd",(function(){return Cn.a})),n.d(t,"yd",(function(){return kt.a})),n.d(t,"zd",(function(){return $n.a})),n.d(t,"Ad",(function(){return En.a})),n.d(t,"Bd",(function(){return An.a})),n.d(t,"Cd",(function(){return Rn.a})),n.d(t,"Dd",(function(){return _n.a})),n.d(t,"Fd",(function(){return sub.a})),n.d(t,"Gd",(function(){return Fn.a})),n.d(t,"Hd",(function(){return Dn.a})),n.d(t,"Id",(function(){return P.a})),n.d(t,"Jd",(function(){return Mn.a})),n.d(t,"Kd",(function(){return Ln})),n.d(t,"Ld",(function(){return Pn})),n.d(t,"Md",(function(){return Bn.a})),n.d(t,"Nd",(function(){return Wn})),n.d(t,"Od",(function(){return Vn})),n.d(t,"Pd",(function(){return Un})),n.d(t,"Qd",(function(){return Ee.a})),n.d(t,"Rd",(function(){return Gn.a})),n.d(t,"Td",(function(){return Hn})),n.d(t,"Ud",(function(){return qn.a})),n.d(t,"Vd",(function(){return Kn.a})),n.d(t,"Wd",(function(){return Xn.a})),n.d(t,"Xd",(function(){return Yn})),n.d(t,"Yd",(function(){return Zn})),n.d(t,"Zd",(function(){return Jn.a})),n.d(t,"ae",(function(){return er})),n.d(t,"be",(function(){return nr.a})),n.d(t,"ce",(function(){return rr.a})),n.d(t,"y",(function(){return ar})),n.d(t,"Sd",(function(){return sr.a})),n.d(t,"pc",(function(){return ir.a})),n.d(t,"kc",(function(){return ur})),n.d(t,"bd",(function(){return lr})),n.d(t,"cd",(function(){return st})),n.d(t,"ud",(function(){return dr})),n.d(t,"vb",(function(){return pr})),n.d(t,"eb",(function(){return fr})),n.d(t,"hb",(function(){return mr})),n.d(t,"T",(function(){return gr})),n.d(t,"Bb",(function(){return yr})),n.d(t,"uc",(function(){return x.b})),n.d(t,"a",(function(){return x.a})),n.d(t,"Ab",(function(){return xa})),n.d(t,"Jb",(function(){return Oa})),n.d(t,"Vb",(function(){return va})),n.d(t,"vd",(function(){return ga})),n.d(t,"tb",(function(){return r})),n.d(t,"id",(function(){return ya})),n.d(t,"td",(function(){return ka})),n.d(t,"Ed",(function(){return wa}));var r={};n.r(r),n.d(r,"conv2d",(function(){return Sr})),n.d(r,"depthwiseConv2d",(function(){return jr})),n.d(r,"matMul",(function(){return Tr}));var o=n(601),c=n(796),l=n(797),d=n(561),h=n(547),f=n(544),m=n(546),y=n(599),x=n(545);const O=Object(x.b)({addN_:function(e){y.b(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),y.b(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,i)=>Object(m.a)(e,`tensors${i}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!y.a(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return h.a.runKernel(f.e,r)}});var v=n(714),k=n(715),w=n(716),S=n(717),I=n(798),N=n(799),j=n(800),T=n(718),C=n(801),$=n(673),E=n(566),A=n(554),R=n(550);const _=Object(x.b)({avgPool3d_:function(e,t,n,r,o,c="NDHWC"){const l=Object(m.a)(e,"x","avgPool3d","float32");let d=l,x=!1;4===l.rank&&(x=!0,d=Object(R.a)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),y.b(5===d.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${d.rank}.`)),y.b("NDHWC"===c,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${c}`)),Object(E.a)("avgPool3d",r,o);const O={x:d},v={filterSize:t,strides:n,pad:r,dimRoundingMode:o,dataFormat:c};let k=h.a.runKernel(f.p,O,v);return k=Object(A.a)(k,d.dtype),x?Object(R.a)(k,[k.shape[1],k.shape[2],k.shape[3],k.shape[4]]):k}});var F=n(573),D=n(580),M=n(551),z=n(622),L=n(571),P=n(719);const B=Object(x.b)({basicLSTMCell_:function(e,t,n,data,r,o){const c=Object(m.a)(e,"forgetBias","basicLSTMCell"),l=Object(m.a)(t,"lstmKernel","basicLSTMCell"),h=Object(m.a)(n,"lstmBias","basicLSTMCell"),f=Object(m.a)(data,"data","basicLSTMCell"),y=Object(m.a)(r,"c","basicLSTMCell"),x=Object(m.a)(o,"h","basicLSTMCell"),O=Object(F.a)([f,x],1),v=Object(D.a)(O,l),k=Object(d.a)(v,h),w=k.shape[0],S=k.shape[1]/4,I=[w,S],i=Object(L.a)(k,[0,0],I),N=Object(L.a)(k,[0,S],I),j=Object(L.a)(k,[0,2*S],I),T=Object(L.a)(k,[0,3*S],I),C=Object(d.a)(Object(M.a)(Object(z.a)(i),Object(P.a)(N)),Object(M.a)(y,Object(z.a)(Object(d.a)(c,j))));return[C,Object(M.a)(Object(P.a)(C),Object(z.a)(T))]}});var W=n(645),V=n(639);const U=Object(x.b)({batchNorm2d_:function(e,t,n,r,o,c){const l=Object(m.a)(e,"x","batchNorm"),d=Object(m.a)(t,"mean","batchNorm"),h=Object(m.a)(n,"variance","batchNorm");let f,x;return null!=o&&(f=Object(m.a)(o,"scale","batchNorm")),null!=r&&(x=Object(m.a)(r,"offset","batchNorm")),y.b(2===l.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${l.rank}.`)),y.b(2===d.rank||1===d.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${d.rank}.`)),y.b(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${h.rank}.`)),null!=f&&y.b(2===f.rank||1===f.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${f.rank}.`)),null!=x&&y.b(2===x.rank||1===x.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${x.rank}.`)),Object(V.a)(l,d,h,x,f,c)}});const G=Object(x.b)({batchNorm3d_:function(e,t,n,r,o,c){const l=Object(m.a)(e,"x","batchNorm"),d=Object(m.a)(t,"mean","batchNorm"),h=Object(m.a)(n,"variance","batchNorm");let f,x;return null!=o&&(f=Object(m.a)(o,"scale","batchNorm")),null!=r&&(x=Object(m.a)(r,"offset","batchNorm")),y.b(3===l.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${l.rank}.`)),y.b(3===d.rank||1===d.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${d.rank}.`)),y.b(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${h.rank}.`)),null!=f&&y.b(3===f.rank||1===f.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${f.rank}.`)),null!=x&&y.b(3===x.rank||1===x.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${x.rank}.`)),Object(V.a)(l,d,h,x,f,c)}});const H=Object(x.b)({batchNorm4d_:function(e,t,n,r,o,c){const l=Object(m.a)(e,"x","batchNorm"),d=Object(m.a)(t,"mean","batchNorm"),h=Object(m.a)(n,"variance","batchNorm");let f,x;return null!=o&&(f=Object(m.a)(o,"scale","batchNorm")),null!=r&&(x=Object(m.a)(r,"offset","batchNorm")),y.b(4===l.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${l.rank}.`)),y.b(4===d.rank||1===d.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${d.rank}.`)),y.b(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${h.rank}.`)),null!=f&&y.b(4===f.rank||1===f.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${f.rank}.`)),null!=x&&y.b(4===x.rank||1===x.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${x.rank}.`)),Object(V.a)(l,d,h,x,f,c)}});const K=Object(x.b)({bincount_:function(e,t,n){const r=Object(m.a)(e,"x","bincount"),o=Object(m.a)(t,"weights","bincount");y.b("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),y.b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),y.b(o.size===r.size||0===o.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${o.shape}.`));const c={x:r,weights:o},l={size:n};return h.a.runKernel(f.u,c,l)}});const X=Object(x.b)({broadcastArgs_:function(e,t){const n=Object(m.a)(e,"s0","broadcastArgs","int32"),r=Object(m.a)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const o={s0:n,s1:r};return h.a.runKernel(f.v,o)}});var Y=n(674),Z=n(589),J=n(802),Q=n(803),ee=n(621),te=n(594);const ne=Object(x.b)({concat1d_:function(e){return Object(F.a)(e,0)}});const re=Object(x.b)({concat2d_:function(e,t){return Object(F.a)(e,t)}});const ae=Object(x.b)({concat3d_:function(e,t){return Object(F.a)(e,t)}});const se=Object(x.b)({concat4d_:function(e,t){return Object(F.a)(e,t)}});var ie=n(720),oe=n(602),ue=n(721);const ce=Object(x.b)({conv3d_:function(e,filter,t,n,r="NDHWC",o=[1,1,1]){const c=Object(m.a)(e,"x","conv3d"),l=Object(m.a)(filter,"filter","conv3d");let d=c,x=!1;4===c.rank&&(x=!0,d=Object(R.a)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),y.b(5===d.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${d.rank}.`)),y.b(5===l.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${l.rank}.`)),y.b(d.shape[4]===l.shape[3],(()=>`Error in conv3d: depth of input (${d.shape[4]}) must match input depth for filter ${l.shape[3]}.`)),y.b(Object(E.i)(t,o),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`)),y.b("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const O={x:d,filter:l},v={strides:t,pad:n,dataFormat:r,dilations:o},k=h.a.runKernel(f.G,O,v);return x?Object(R.a)(k,[k.shape[1],k.shape[2],k.shape[3],k.shape[4]]):k}});var le=n(804);const de=Object(x.b)({conv3dTranspose_:function(e,filter,t,n,r){const o=Object(m.a)(e,"x","conv3dTranspose"),c=Object(m.a)(filter,"filter","conv3dTranspose");return Object(le.a)(t,o,c,n,r)}});var he=n(675),pe=n(723),fe=n(676),me=n(677);const be=Object(x.b)({denseBincount_:function(e,t,n,r=!1){const o=Object(m.a)(e,"x","denseBincount"),c=Object(m.a)(t,"weights","denseBincount");y.b("int32"===o.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${o.dtype}`)),y.b(o.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${o.rank}.`)),y.b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),y.b(c.size===o.size||0===c.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${o.shape}, weights shape: ${c.shape}.`));const l={x:o,weights:c},d={size:n,binaryOutput:r};return h.a.runKernel(f.O,l,d)}});var ge=n(724),ye=n(646);const xe=Object(x.b)({diag_:function(e){const t={x:Object(m.a)(e,"x","diag")};return h.a.runKernel(f.T,t)}});var Oe=n(725),div=n(555),ve=n(726),ke=n(727);const we=Object(x.b)({einsum_:function(e,...t){const n=t.map(((e,i)=>Object(m.a)(e,`tensors${i}`,"einsum"))),r={equation:e};return h.a.runKernel(f.X,n,r)}});var Se=n(678),Ie=n(647),Ne=n(805),je=n(728),Te=n(585),Ce=n(649),$e=n(806),Ee=n(624);const Ae=Object(x.b)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const o=Object(Z.a)([e,t],r),c=e<=t?e:t;for(let i=0;i<c;++i)o.set(1,i,i);const l=Object(R.a)(o.toTensor(),[e,t]);if(null==n)return l;if(1===n.length)return Object(Ee.a)(Object(Ce.a)(l,0),[n[0],1,1]);if(2===n.length)return Object(Ee.a)(Object(Ce.a)(Object(Ce.a)(l,0),0),[n[0],n[1],1,1]);if(3===n.length)return Object(Ee.a)(Object(Ce.a)(Object(Ce.a)(Object(Ce.a)(l,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Re=n(643),_e=n(680),Fe=n(672),De=n(650),Me=n(586),ze=n(603),Le=n(651),Pe=n(807),Be=n(808),We=n(809),Ve=n(681),Ue=n(682),Ge=n(596);function He(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return h.a.runKernel(f.Db,{},r)}var qe=n(729),Ke=n(625),Xe=n(730),Ye=n(810),Ze=n(811),Je=n(683),Qe=n(604),et=n(652),tt=n(684),nt=n(732);const at=2147483648;const st=Object(x.b)({searchSorted_:function(e,t,n="left"){const r=Object(m.a)(e,"sortedSequence","searchSorted"),o=Object(m.a)(t,"values","searchSorted"),c=r.shape[r.shape.length-1],l=o.shape[o.shape.length-1],d=Object(R.a)(r,[-1,c]),x=Object(R.a)(o,[-1,l]);if(d.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(d.shape[0]!==x.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Object(y.O)(x.shape)>=at)throw new Error("values tensor size must less than 2147483648");if(d.shape[1]>=at)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${d.shape[1]}`);const O={sortedSequence:d,values:x},v={side:n};return h.a.runKernel(f.Ec,O,v)}});function it(e,t){return st(e,t,"left")}var ot=n(623),ut=n(685);const ct=Object(x.b)({maxPool3d_:function(e,t=[1,1,1],n,r,o,c="NDHWC"){const l=Object(m.a)(e,"x","maxPool3d");let d=l,x=!1;4===l.rank&&(x=!0,d=Object(R.a)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),y.b(5===d.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${d.rank}.`)),y.b("NDHWC"===c,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${c}`)),Object(E.a)("maxPool3d",r,o);const O={x:d},v={filterSize:t,strides:n,pad:r,dimRoundingMode:o,dataFormat:c},k=h.a.runKernel(f.Ob,O,v);return x?Object(R.a)(k,[k.shape[1],k.shape[2],k.shape[3],k.shape[4]]):k}});const lt=Object(x.b)({maxPoolWithArgmax_:function(e,t,n,r,o=!1){const c={x:Object(m.a)(e,"x","maxPoolWithArgmax")},l={filterSize:t,strides:n,pad:r,includeBatchInIndex:o},d=h.a.runKernel(f.Rb,c,l);return{result:d[0],indexes:d[1]}}});var ht=n(644),pt=n(653),ft=n(605),mt=n(548);function bt(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=Object(m.a)(e,"x","meshgrid",e instanceof mt.a?e.dtype:"float32");if(void 0===t)return[r];let o=Object(m.a)(t,"y","meshgrid",t instanceof mt.a?t.dtype:"float32");const c=Object(y.O)(r.shape),l=Object(y.O)(o.shape);return"xy"===n?(r=Object(R.a)(r,[1,-1]),o=Object(R.a)(o,[-1,1]),[Object(D.a)(Object(ft.a)([l,1],r.dtype),r),Object(D.a)(o,Object(ft.a)([1,c],o.dtype))]):(r=Object(R.a)(r,[-1,1]),o=Object(R.a)(o,[1,-1]),[Object(D.a)(r,Object(ft.a)([1,l],r.dtype)),Object(D.a)(Object(ft.a)([c,1],o.dtype),o)])}var gt=n(679),yt=n(686),xt=n(733),Ot=n(734),vt=n(581),kt=n(565),sub=n(557);const wt=Object(x.b)({moments_:function(e,t=null,n=!1){e=Object(m.a)(e,"x","moments");const r=Object(y.I)(t,e.shape),o=Object(pt.a)(e,r,n);let c=o.shape;n||(c=Object(vt.e)(o.shape,r));const l=Object(kt.a)(Object(sub.a)(Object(A.a)(e,"float32"),Object(R.a)(o,c)));return{mean:o,variance:Object(pt.a)(l,r,n)}}});const St=Object(x.b)({multiRNNCell_:function(e,data,t,n){const r=Object(m.a)(data,"data","multiRNNCell"),o=Object(m.b)(t,"c","multiRNNCell"),c=Object(m.b)(n,"h","multiRNNCell");let input=r;const l=[];for(let i=0;i<e.length;i++){const output=e[i](input,o[i],c[i]);l.push(output[0]),l.push(output[1]),input=output[1]}const d=[],h=[];for(let i=0;i<l.length;i+=2)d.push(l[i]),h.push(l[i+1]);return[d,h]}});const It=Object(x.b)({multinomial_:function(e,t,n,r=!1){const o=Object(m.a)(e,"logits","multinomial"),c=o.size,l=o.rank;if(c<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${c}.`);if(l>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${l}`);n=n||Math.random();const d={logits:1===l?Object(R.a)(o,[1,-1]):o},y={numSamples:t,seed:n,normalized:r},x=h.a.runKernel(f.Yb,d,y);return 1===l?Object(R.a)(x,[x.size]):x}});var Nt=n(568),jt=n(687),Tt=n(688),Ct=n(812);const $t=Object(x.b)({outerProduct_:function(e,t){const n=Object(m.a)(e,"v1","outerProduct"),r=Object(m.a)(t,"v2","outerProduct");y.b(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const o=Object(R.a)(n,[-1,1]),c=Object(R.a)(r,[1,-1]);return Object(D.a)(o,c)}});var Et=n(597);const At=Object(x.b)({pad1d_:function(e,t,n=0){return Object(y.b)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Object(Et.a)(e,[t],n)}});const Rt=Object(x.b)({pad2d_:function(e,t,n=0){return Object(y.b)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Object(Et.a)(e,t,n)}});const _t=Object(x.b)({pad3d_:function(e,t,n=0){return Object(y.b)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Object(Et.a)(e,t,n)}});const Ft=Object(x.b)({pad4d_:function(e,t,n=0){return Object(y.b)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Object(Et.a)(e,t,n)}});var Dt=n(735),Mt=n(595),zt=n(689),Lt=n(713),Pt=n(736);const Bt=Object(x.b)({raggedTensorToTensor_:function(e,t,n,r,o){const c=Object(m.a)(e,"shape","raggedTensorToTensor","int32"),l=Object(m.a)(t,"values","raggedTensorToTensor"),d={shape:c,values:l,defaultValue:Object(m.a)(n,"defaultValue","raggedTensorToTensor",l.dtype),rowPartitionTensors:r.map(((e,i)=>Object(m.a)(e,`tensors${i}`,"raggedTensorToTensor","int32")))},y={rowPartitionTypes:o};return h.a.runKernel(f.nc,d,y)}});const Wt=Object(x.b)({rand_:function(e,t,n){const r=Object(y.O)(e);let o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);o=new Uint8Array(r)}for(let i=0;i<r;i++)o[i]=t();return h.a.makeTensor(o,e,n)}});var Vt=n(690);n(737);class Ut{constructor(e,t,n,r,o){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const c=o||Math.random();this.random=Vt.alea(c.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,o,s;do{r=2*this.random()-1,o=2*this.random()-1,s=r*r+o*o}while(s>=1||0===s);const c=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*c,t=this.mean+this.stdDev*o*c,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Gt{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const o=r||Math.random();this.randu=Vt.alea(o.toString()),this.randn=new Ut(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,u,o;for(;;){do{r=this.randn.nextValue(),o=1+this.c*r}while(o<=0);if(o*=o*o,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-o+Math.log(o)),u=this.randu(),u<t||Math.log(u)<n)break}return o=1/this.beta*this.d*o,this.alpha<1&&(o*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(o)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Ht{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Vt.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const qt=Object(x.b)({randomGamma_:function(e,t,n=1,r="float32",o){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const c=new Gt(t,n,r,o),l=Object(Z.a)(e,r);for(let i=0;i<l.values.length;i++)l.values[i]=c.nextValue();return l.toTensor()}});const Kt=Object(x.b)({randomNormal_:function(e,t=0,n=1,r,o){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const c=new Ut(t,n,r,!1,o),l=Object(Z.a)(e,r);for(let i=0;i<l.values.length;i++)l.values[i]=c.nextValue();return l.toTensor()}});const Xt=Object(x.b)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Kt(e,0,1,t,n)}});const Yt=Object(x.b)({randomUniform_:function(e,t=0,n=1,r="float32",o){const c=Object(Z.a)(e,r),l=new Ht(t,n,null,o);for(let i=0;i<c.values.length;i++)c.values[i]=l.nextValue();return c.toTensor()}});function Zt(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:r};return h.a.runKernel(f.oc,{},o)}var Jt=n(655),Qt=n(813),en=n(627),tn=n(691),nn=n(590);const rn=Object(x.b)({reverse1d_:function(e){const t=Object(m.a)(e,"x","reverse");return y.b(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Object(nn.a)(t,0)}});const an=Object(x.b)({reverse2d_:function(e,t){const n=Object(m.a)(e,"x","reverse");return y.b(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Object(nn.a)(n,t)}});const sn=Object(x.b)({reverse3d_:function(e,t){const n=Object(m.a)(e,"x","reverse");return y.b(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Object(nn.a)(n,t)}});const on=Object(x.b)({reverse4d_:function(e,t){const n=Object(m.a)(e,"x","reverse");return y.b(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Object(nn.a)(n,t)}});var un=n(738),cn=n(739),ln=n(559),dn=n(740),hn=n(741);const pn=async function(e,t){const n=Object(m.a)(e,"x","setdiff1d"),r=Object(m.a)(t,"y","setdiff1d");y.b(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),y.b(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),y.b(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const o=await n.data(),c=await r.data(),l=new Set(c);let d=0;for(let i=0;i<o.length;i++)l.has(o[i])||d++;const h=new mt.b([d],n.dtype),f=new mt.b([d],"int32");for(let i=0,p=0;i<o.length;i++)l.has(o[i])||(h.values[p]=o[i],f.values[p]=i,p++);return[h.toTensor(),f.toTensor()]};var fn=n(814),mn=n(742),bn=n(743);const gn=Object(x.b)({slice1d_:function(e,t,n){const r=Object(m.a)(e,"x","slice1d");return y.b(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Object(L.a)(r,[t],[n])}});const yn=Object(x.b)({slice2d_:function(e,t,n){const r=Object(m.a)(e,"x","slice2d");return y.b(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Object(L.a)(r,t,n)}});const xn=Object(x.b)({slice3d_:function(e,t,n){const r=Object(m.a)(e,"x","slice3d");return y.b(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Object(L.a)(r,t,n)}});const On=Object(x.b)({slice4d_:function(e,t,n){const r=Object(m.a)(e,"x","slice4d");return y.b(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Object(L.a)(r,t,n)}});var vn=n(815),kn=n(731),wn=n(654),Sn=n(692),In=n(693),Nn=n(744),jn=n(694),Tn=n(606),Cn=n(579),$n=n(695),En=n(656),An=n(607),Rn=n(628),_n=n(816),Fn=n(563),Dn=n(817),Mn=n(642),zn=n(593);function Ln(e,t){Object(y.d)(e);const n=Object(m.c)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Object(zn.a)(e,null,n,t)}function Pn(e,t,n){if(Object(y.d)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object(m.c)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Object(zn.a)(e,t,r,n)}var Bn=n(745);function Wn(e,t,n){if(Object(y.d)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Object(m.c)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Object(zn.a)(e,t,r,n)}function Vn(e,t,n){if(Object(y.d)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Object(m.c)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Object(zn.a)(e,t,r,n)}function Un(e,t,n){if(Object(y.d)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Object(m.c)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,Object(zn.a)(e,t,r,n)}var Gn=n(746);const Hn=Object(x.b)({truncatedNormal_:function(e,t=0,n=1,r,o){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const c=new Ut(t,n,r,!0,o),l=Object(Z.a)(e,r);for(let i=0;i<l.values.length;i++)l.values[i]=c.nextValue();return l.toTensor()}});var qn=n(747),Kn=n(696),Xn=n(629);function Yn(e,t){return st(e,t,"right")}function Zn(e,t=!0,n,r){return h.a.makeVariable(e,t,n,r)}var Jn=n(574),Qn=n(748);const er=async function(e){const t=Object(m.a)(e,"condition","whereAsync","bool"),n=await t.data(),r=Object(Qn.a)(t.shape,n);return e!==t&&t.dispose(),r};var nr=n(626),rr=n(560);const ar=async function(e,mask,t){const n=Object(m.a)(e,"tensor","boolMask"),r=Object(m.a)(mask,"mask","boolMask","bool"),o=null==t?0:t,c=r.rank,l=n.shape;y.b(c>0,(()=>"mask cannot be scalar")),y.e(l.slice(o,o+c),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let d=1;for(let i=o;i<o+c;i++)d*=l[i];const h=l.slice(0,o).concat([d],l.slice(o+c)),f=Object(R.a)(n,h),x=Object(R.a)(r,[-1]),O=await er(x),v=Object(En.a)(O,[1]),k=Object(De.a)(f,v,o);return e!==n&&n.dispose(),mask!==r&&r.dispose(),v.dispose(),f.dispose(),x.dispose(),O.dispose(),k};var sr=n(591),ir=n(648),or=n(562);const ur=Object(x.b)({movingAverage_:function(e,t,n,r,o=!0){const c=Object(m.a)(e,"v","movingAverage"),l=Object(m.a)(t,"x","movingAverage"),h=Object(m.a)(n,"decay","movingAverage");Object(or.assertTypesMatch)(c,l),y.b(y.a(c.shape,l.shape),(()=>"Shape mismatch in v and x"));const f=Object(ln.a)(1),x=Object(sub.a)(f,h);let O=Object(M.a)(Object(sub.a)(l,c),x);if(o){y.b(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=Object(m.a)(r,"step","movingAverage");O=Object(div.a)(O,Object(sub.a)(f,Object(Mt.a)(h,e)))}return Object(d.a)(c,O)}});var cr=n(657);const lr=Object(x.b)({scatterND_:function(e,t,n){const r=Object(m.a)(e,"indices","scatterND","int32"),o=Object(m.a)(t,"updates","scatterND");cr.validateInput(o,r,n);const c={indices:r,updates:o},l={shape:n};return h.a.runKernel(f.Dc,c,l)}});const dr=Object(x.b)({sparseToDense_:function(e,t,n,r=0){const o=Object(m.a)(e,"sparseIndices","sparseToDense","int32"),c=Object(m.a)(t,"sparseValues","sparseToDense","string_or_numeric"),l=Object(m.a)(r,"defaultValue","sparseToDense",c.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const o=e.rank>0?e.shape[0]:1,c=e.rank>1?e.shape[1]:1;if(n.length!==c)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${c}.`);const l=t.size;if(0!==t.rank&&(1!==t.rank||l!==o))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${o}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,c,n,l);const d={sparseIndices:o,sparseValues:c,defaultValue:l},y={outputShape:n};return h.a.runKernel(f.Tc,d,y)}});const pr=Object(x.b)({gatherND_:function(e,t){const n=Object(m.a)(t,"indices","gatherND","int32"),r={params:Object(m.a)(e,"x","gatherND","string_or_numeric"),indices:n};return h.a.runKernel(f.ob,r)}});const fr=Object(x.b)({dropout_:function(e,t,n,r){const o=Object(m.a)(e,"x","dropout");if(y.b("float32"===o.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`)),y.b(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof mt.a?o.clone():o;const c=function(e,t){if(null==t)return e.shape.slice();if(y.a(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let i=0;i<e.shape.length;i++)null==t[i]&&null!=e.shape[i]?n.push(e.shape[i]):n.push(t[i]);return n}return t}(o,n),l=1-t,h=Object(div.a)(Object(_e.a)(Object(d.a)(Yt(c,0,1,"float32",r),l)),l);return Object(M.a)(o,h)}});function mr(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function gr(e,a,b){const t=1-e%2,n=new Float32Array(e);for(let i=0;i<e;++i){const r=2*Math.PI*i/(e+t-1);n[i]=a-b*Math.cos(r)}return Ln(n,"float32")}const yr=async function(e,t,n=1){const r=Object(m.a)(e,"predictions","inTopK"),o=Object(m.a)(t,"targets","inTopK");Object(y.b)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),Object(y.b)(r.rank-1===o.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${o.rank}`)),Object(y.e)(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const c=r.shape[r.shape.length-1];Object(y.b)(n>0&&n<=c,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${c}), but got ${n}`));const l=await r.data(),d=await o.data(),[h,f]=[l.length/c,c],x=Object(y.o)("bool",h);for(let b=0;b<h;b++){const e=b*f,t=l.subarray(e,e+f),r=[];for(let i=0;i<t.length;i++)r.push({value:t[i],index:i});r.sort(((a,b)=>b.value-a.value)),x[b]=0;for(let i=0;i<n;i++)if(r[i].index===d[b]){x[b]=1;break}}return e!==r&&r.dispose(),t!==o&&o.dispose(),Object(Mn.a)(x,o.shape,"bool")};var xr=n(572),Or=n(558),vr=n(749),kr=n(722),wr=n(608);const Sr=Object(x.b)({fusedConv2d_:function({x:e,filter:filter,strides:t,pad:n,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:c,bias:l,activation:x="linear",preluActivationWeights:O,leakyreluAlpha:v}){if(x=x||"linear",!1===Object(wr.d)(h.a.state.gradientDepth,x)){y.b("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=Object(oe.a)(e,filter,t,n,r,o,c);return null!=l&&(h=Object(d.a)(h,l)),Object(wr.a)(h,x,O,v)}const k=Object(m.a)(e,"x","conv2d","float32"),w=Object(m.a)(filter,"filter","conv2d","float32");let S=k,I=!1;3===k.rank&&(I=!0,S=Object(R.a)(k,[1,k.shape[0],k.shape[1],k.shape[2]])),y.b(4===S.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${S.rank}.`)),y.b(4===w.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${w.rank}.`)),E.a("fused conv2d",n,c);const N="NHWC"===r?S.shape[3]:S.shape[1];y.b(w.shape[2]===N,(()=>`Error in conv2d: depth of input (${N}) must match input depth for filter ${w.shape[2]}.`)),y.b(E.i(t,o),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`));const j=E.b(S.shape,w.shape,t,o,n,c);let T,C;if(null!=l&&(T=Object(m.a)(l,"bias","fused conv2d"),[T]=Object(or.makeTypesMatch)(T,k),"NHWC"===r?Or.assertAndGetBroadcastShape(j.outShape,T.shape):(y.b(T.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${T.shape.length}.`)),y.b(0===T.shape.length||T.shape[0]===j.outChannels||1===T.shape[0],(()=>`Error in fused conv2d: bias shape (${T.shape}) is not compatible with the number of output channels (${j.outChannels})`)))),null!=O){const e=O.shape;if(y.b(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)y.b(1===e[0]||e[0]===j.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${j.outChannels}).`));else if(3===e.length)try{Or.assertAndGetBroadcastShape(e,j.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${j.outShape}).`;throw Error(n)}C=Object(m.a)(O,"prelu weights","fused conv2d")}const $=(e,c)=>{y.b("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[l,d,h,f]=c,m=Object(wr.c)(e,h,x);y.b(E.j(o),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`));const O=[Object(kr.a)(d.shape,m,l,t,n),Object(vr.a)(d,m,l.shape,t,n)];if(null!=f){const e=Object(wr.b)(f,m);O.push(e)}return O},A={x:S,filter:w,bias:T,preluActivationWeights:C},_={strides:t,pad:n,dataFormat:r,dilations:o,dimRoundingMode:c,activation:x,leakyreluAlpha:v};if(null==l){const e=Object(xr.a)(((e,filter,t)=>{let n=h.a.runKernel(f.mb,A,_);return t([filter,e,n]),I&&(n=Object(R.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:$}}));return e(S,w)}{const e=Object(xr.a)(((e,filter,t,n)=>{let r=h.a.runKernel(f.mb,A,_);return n([filter,e,r,t]),I&&(r=Object(R.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:$}}));return e(S,w,T)}}});var Ir=n(821),Nr=n(820);const jr=Object(x.b)({fusedDepthwiseConv2d_:function({x:e,filter:filter,strides:t,pad:n,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:c,bias:l,activation:x="linear",preluActivationWeights:O,leakyreluAlpha:v}){if(!1===Object(wr.d)(h.a.state.gradientDepth,x)){let h=Object(ye.a)(e,filter,t,n,r,o,c);return null!=l&&(h=Object(d.a)(h,l)),Object(wr.a)(h,x,O,v)}const k=Object(m.a)(e,"x","depthwiseConv2d","float32"),w=Object(m.a)(filter,"filter","depthwiseConv2d","float32");let S=k,I=!1;3===k.rank&&(I=!0,S=Object(R.a)(k,[1,k.shape[0],k.shape[1],k.shape[2]])),y.b(4===S.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${S.rank}.`)),y.b(4===w.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${w.rank}.`)),y.b(S.shape[3]===w.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${S.shape[3]}) must match the inChannels dimension in filter ${w.shape[2]}.`)),null==o&&(o=[1,1]),y.b(E.i(t,o),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`)),E.a("fused depthwiseConv2d",n,c);const N=E.b(S.shape,w.shape,t,o,n,c,!0);let j,T;null!=l&&(j=Object(m.a)(l,"bias","fused conv2d"),[j]=Object(or.makeTypesMatch)(j,k),Or.assertAndGetBroadcastShape(N.outShape,j.shape)),null!=O&&(T=Object(m.a)(O,"prelu weights","fused depthwiseConv2d"));const C=(e,r)=>{y.b(E.j(o),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,d,h,f]=r,m=Object(wr.c)(e,h,x),O=Object(Nr.a)(d.shape,m,l,t,n,o,c),v=Object(Ir.a)(d,m,l.shape,t,n,o,c);if(null!=f){return[O,v,Object(wr.b)(j,m)]}return[O,v]},$={x:S,filter:w,bias:j,preluActivationWeights:T},A={strides:t,pad:n,dataFormat:r,dilations:o,dimRoundingMode:c,activation:x,leakyreluAlpha:v};if(null==l){const e=Object(xr.a)(((e,filter,t)=>{let n=h.a.runKernel(f.nb,$,A);return t([filter,e,n]),I&&(n=Object(R.a)(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:C}}));return e(S,w)}{const e=Object(xr.a)(((e,filter,t,n)=>{let r=h.a.runKernel(f.nb,$,A);return n([filter,e,r,t]),I&&(r=Object(R.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:C}}));return e(S,w,j)}}});const Tr=Object(x.b)({fusedMatMul_:function({a:a,b:b,transposeA:e=!1,transposeB:t=!1,bias:n,activation:r="linear",preluActivationWeights:o,leakyreluAlpha:c=.2}){if(!1===Object(wr.d)(h.a.state.gradientDepth,r)){let l=Object(D.a)(a,b,e,t);return null!=n&&(l=Object(d.a)(l,n)),Object(wr.a)(l,r,o,c)}let l=Object(m.a)(a,"a","fused matMul"),x=Object(m.a)(b,"b","fused matMul");[l,x]=Object(or.makeTypesMatch)(l,x);const O=e?l.shape[l.rank-2]:l.shape[l.rank-1],v=t?x.shape[x.rank-1]:x.shape[x.rank-2],k=e?l.shape[l.rank-1]:l.shape[l.rank-2],w=t?x.shape[x.rank-2]:x.shape[x.rank-1],S=l.shape.slice(0,-2),I=x.shape.slice(0,-2),N=y.O(S),j=y.O(I);y.b(O===v,(()=>`Error in fused matMul: inner shapes (${O}) and (${v}) of Tensors with shapes ${l.shape} and ${x.shape} and transposeA=${e} and transposeB=${t} must match.`));const T=Or.assertAndGetBroadcastShape(l.shape.slice(0,-2),x.shape.slice(0,-2)).concat([k,w]),C=e?Object(R.a)(l,[N,O,k]):Object(R.a)(l,[N,k,O]),$=t?Object(R.a)(x,[j,w,v]):Object(R.a)(x,[j,v,w]);let E,A;null!=n&&(E=Object(m.a)(n,"bias","fused matMul"),[E]=Object(or.makeTypesMatch)(E,l),Or.assertAndGetBroadcastShape(T,E.shape)),null!=o&&(A=Object(m.a)(o,"prelu weights","fused matMul"));const _=(o,c)=>{const[l,d,h,f]=c,m=Object(wr.c)(Object(R.a)(o,h.shape),h,r);let y,x;if(e||t?!e&&t?(y=Object(D.a)(m,d,!1,!1),x=Object(D.a)(m,l,!0,!1)):e&&!t?(y=Object(D.a)(d,m,!1,!0),x=Object(D.a)(l,m,!1,!1)):(y=Object(D.a)(d,m,!0,!0),x=Object(D.a)(m,l,!0,!0)):(y=Object(D.a)(m,d,!1,!0),x=Object(D.a)(l,m,!0,!1)),null!=n){return[y,x,Object(wr.b)(f,m)]}return[y,x]},F={a:C,b:$,bias:E,preluActivationWeights:A},M={transposeA:e,transposeB:t,activation:r,leakyreluAlpha:c};if(null==n){const e=Object(xr.a)(((e,t,n)=>{const r=h.a.runKernel(f.qd,F,M);return n([e,t,r]),{value:Object(R.a)(r,T),gradFunc:_}}));return e(C,$)}{const e=Object(xr.a)(((e,t,n,r)=>{const o=h.a.runKernel(f.qd,F,M);return r([e,t,o,n]),{value:Object(R.a)(o,T),gradFunc:_}}));return e(C,$,E)}}});const Cr=Object(x.b)({hammingWindow_:function(e){return gr(e,.54,.46)}});const $r=Object(x.b)({hannWindow_:function(e){return gr(e,.5,.5)}});const Er=Object(x.b)({frame_:function(e,t,n,r=!1,o=0){let c=0;const output=[];for(;c+t<=e.size;)output.push(Object(L.a)(e,c,t)),c+=n;if(r)for(;c<e.size;){const r=c+t-e.size,l=Object(F.a)([Object(L.a)(e,c,t-r),Object(Re.a)([r],o)]);output.push(l),c+=n}return 0===output.length?Pn([],[0,t]):Object(R.a)(Object(F.a)(output),[output.length,t])}});const Ar=Object(x.b)({stft_:function(e,t,n,r,o=$r){null==r&&(r=mr(t));const c=Er(e,t,n),l=Object(M.a)(c,o(t));return Object(jn.a)(l,r)}});const Rr=Object(x.b)({cropAndResize_:function(image,e,t,n,r="bilinear",o=0){const c=Object(m.a)(image,"image","cropAndResize"),l=Object(m.a)(e,"boxes","cropAndResize","float32"),d=Object(m.a)(t,"boxInd","cropAndResize","int32"),x=l.shape[0];y.b(4===c.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${c.rank}.`)),y.b(2===l.rank&&4===l.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${x},4] but had shape ${l.shape}.`)),y.b(1===d.rank&&d.shape[0]===x,(()=>`Error in cropAndResize: boxInd must be have size [${x}] but had shape ${l.shape}.`)),y.b(2===n.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`)),y.b(n[0]>=1&&n[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${n}`)),y.b("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const O={image:c,boxes:l,boxInd:d},v={method:r,extrapolationValue:o,cropSize:n};return h.a.runKernel(f.L,O,v)}});const _r=Object(x.b)({flipLeftRight_:function(image){const e=Object(m.a)(image,"image","flipLeftRight","float32");y.b(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const t={image:e};return h.a.runKernel(f.hb,t,{})}});const Fr=Object(x.b)({grayscaleToRGB_:function(image){const e=Object(m.a)(image,"image","grayscaleToRGB"),t=e.rank-1,n=e.shape[t];y.b(e.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`)),y.b(1===n,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`));const r=new Array(e.rank);return r.fill(1,0,t),r[t]=3,Object(Ee.a)(e,r)}});const Dr=Object(x.b)({rotateWithOffset_:function(image,e,t=0,n=.5){const r=Object(m.a)(image,"image","rotateWithOffset","float32");y.b(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const o={image:r},c={radians:e,fillValue:t,center:n};return h.a.runKernel(f.Ac,o,c)}});function Mr(e,t,n,r,o,c){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==c&&(c=0);const l=e.shape[0];return n=Math.min(n,l),y.b(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),y.b(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),y.b(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),y.b(1===t.rank,(()=>"scores must be a 1D tensor")),y.b(t.shape[0]===l,(()=>`scores has incompatible shape with boxes. Expected ${l}, but was ${t.shape[0]}`)),y.b(0<=c&&c<=1,(()=>`softNmsSigma must be in [0, 1], but was '${c}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:c}}const zr=Object(x.b)({nonMaxSuppression_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object(m.a)(e,"boxes","nonMaxSuppression","float32"),l=Object(m.a)(t,"scores","nonMaxSuppression","float32"),d=Mr(c,l,n,r,o),y={maxOutputSize:n=d.maxOutputSize,iouThreshold:r=d.iouThreshold,scoreThreshold:o=d.scoreThreshold};return h.a.runKernel(f.bc,{boxes:c,scores:l},y)}});var Lr=n(619);const Pr=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY){const c=Object(m.a)(e,"boxes","nonMaxSuppressionAsync"),l=Object(m.a)(t,"scores","nonMaxSuppressionAsync"),d=Mr(c,l,n,r,o);n=d.maxOutputSize,r=d.iouThreshold,o=d.scoreThreshold;const h=await Promise.all([c.data(),l.data()]),f=h[0],y=h[1],{selectedIndices:x}=Object(Lr.a)(f,y,n,r,o);return c!==e&&c.dispose(),l!==t&&l.dispose(),Ln(x,"int32")};const Br=Object(x.b)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const l=Object(m.a)(e,"boxes","nonMaxSuppression"),d=Object(m.a)(t,"scores","nonMaxSuppression"),y=Mr(l,d,n,r,o,c),x={boxes:l,scores:d},O={maxOutputSize:n=y.maxOutputSize,iouThreshold:r=y.iouThreshold,scoreThreshold:o=y.scoreThreshold,softNmsSigma:c=y.softNmsSigma},v=h.a.runKernel(f.dc,x,O);return{selectedIndices:v[0],selectedScores:v[1]}}});const Wr=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=0){const l=Object(m.a)(e,"boxes","nonMaxSuppressionAsync"),d=Object(m.a)(t,"scores","nonMaxSuppressionAsync"),h=Mr(l,d,n,r,o,c);n=h.maxOutputSize,r=h.iouThreshold,o=h.scoreThreshold,c=h.softNmsSigma;const f=await Promise.all([l.data(),d.data()]),y=f[0],x=f[1],{selectedIndices:O,selectedScores:v}=Object(Lr.c)(y,x,n,r,o,c);return l!==e&&l.dispose(),d!==t&&d.dispose(),{selectedIndices:Ln(O,"int32"),selectedScores:Ln(v)}};const Vr=Object(x.b)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const l=Object(m.a)(e,"boxes","nonMaxSuppression"),d=Object(m.a)(t,"scores","nonMaxSuppression"),y=Mr(l,d,n,r,o,null),x={boxes:l,scores:d},O={maxOutputSize:y.maxOutputSize,iouThreshold:y.iouThreshold,scoreThreshold:y.scoreThreshold,padToMaxOutputSize:c},v=h.a.runKernel(f.cc,x,O);return{selectedIndices:v[0],validOutputs:v[1]}}});const Ur=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,c=!1){const l=Object(m.a)(e,"boxes","nonMaxSuppressionAsync"),d=Object(m.a)(t,"scores","nonMaxSuppressionAsync"),h=Mr(l,d,n,r,o,null),f=h.maxOutputSize,y=h.iouThreshold,x=h.scoreThreshold,[O,v]=await Promise.all([l.data(),d.data()]),{selectedIndices:k,validOutputs:w}=Object(Lr.b)(O,v,f,y,x,c);return l!==e&&l.dispose(),d!==t&&d.dispose(),{selectedIndices:Ln(k,"int32"),validOutputs:Object(ln.a)(w,"int32")}};var Gr=n(819),Hr=n(818);const qr=Object(x.b)({threshold_:function(image,e="binary",t=!1,n=.5){const r=Object(m.a)(image,"image","threshold"),o=r.shape[0]*r.shape[1];let c,g,b,l,h=Object(M.a)(Ln([n]),255);if(y.b(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),y.b(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),y.b("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),y.b("otsu"===e||"binary"===e,(()=>`Method must be binary or otsu, but was ${e}`)),3===r.shape[2]){[c,g,b]=Object(Tn.a)(r,[1,1,1],-1);const e=Object(M.a)(c,.2989),t=Object(M.a)(g,.587),n=Object(M.a)(b,.114);l=Object(d.a)(Object(d.a)(e,t),n)}else l=image;if("otsu"===e){h=function(e,t){let n,r,o,c,l,h,f=Ln([-1]),m=Ln([0]),y=Ln([0]);for(let x=0;x<e.size-1;x++){n=Object(L.a)(e,0,x+1),r=Object(L.a)(e,x+1),l=Object(div.a)(Object(Fn.a)(n),t),h=Object(div.a)(Object(Fn.a)(r),t);const O=Object(Fn.a)(Object(M.a)(n,Zt(0,n.size)));o=Object(div.a)(O,Object(Fn.a)(n));const v=Object(Re.a)(r.shape,n.size),k=Object(d.a)(Zt(0,r.size),v),w=Object(M.a)(r,k);c=Object(div.a)(Object(Fn.a)(w),Object(Fn.a)(r));const S=Object(sub.a)(o,c),I=Object(sub.a)(o,c),N=Object(M.a)(l,h);y=Object(M.a)(Object(M.a)(N,S),I);const j=Object(Me.a)(y,m);m=Object(Jn.a)(j,y,m),f=Object(Jn.a)(j,Ln([x]),f)}return f}(K(Object(A.a)(Object(un.a)(l),"int32"),Object(Mn.a)([]),256),o)}const f=t?Object(Ge.a)(l,h):Object(Me.a)(l,h);return Object(A.a)(Object(M.a)(f,255),"int32")}});const Kr=Object(x.b)({transform_:function(image,e,t="nearest",n="constant",r=0,o){const c=Object(m.a)(image,"image","transform","float32"),l=Object(m.a)(e,"transforms","transform","float32");y.b(4===c.rank,(()=>`Error in transform: image must be rank 4,but got rank ${c.rank}.`)),y.b(2===l.rank&&(l.shape[0]===c.shape[0]||1===l.shape[0])&&8===l.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),y.b(null==o||2===o.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`));const d={image:c,transforms:l},x={interpolation:t,fillMode:n,fillValue:r,outputShape:o};return h.a.runKernel(f.jd,d,x)}});const Xr=Object(x.b)({bandPart_:function(a,e,t){Object(y.b)(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),Object(y.b)(t%1==0,(()=>`bandPart(): numUpper must be an integer, got ${t}.`));const n=Object(m.a)(a,"a","bandPart");Object(y.b)(n.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${n.rank}.`));const r=n.shape,[o,c]=n.shape.slice(-2);if(!(e<=o))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${o}).`);if(!(t<=c))throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${c}).`);e<0&&(e=o),t<0&&(t=c);const i=Object(R.a)(Zt(0,o,1,"int32"),[-1,1]),l=Zt(0,c,1,"int32"),d=Object(sub.a)(i,l),h=Object(Qe.a)(Object(Ge.a)(d,Object(ln.a)(+e,"int32")),Object(ze.a)(d,Object(ln.a)(-t,"int32"))),f=Object(nr.a)([o,c],n.dtype);return Object(R.a)(Object(An.a)(Object(Xn.a)(Object(R.a)(n,[-1,o,c])).map((e=>Object(Jn.a)(h,e,f)))),r)}});const Yr=Object(x.b)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Object(y.b)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let i=1;i<e.length;++i)Object(y.b)(e[i].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[i].shape[0]} vs. ${n})`))}else t=!0,e=Object(Tn.a)(e,e.shape[0],0).map((e=>Object(En.a)(e,[0])));Object(y.b)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let i=0;i<e.length;++i)n.push(h.a.tidy((()=>{let e=r[i];if(i>0)for(let t=0;t<i;++t){const r=Object(M.a)(Object(Fn.a)(Object(M.a)(n[t],e)),n[t]);e=Object(sub.a)(e,r)}return Object(div.a)(e,Object(ir.a)(e,"euclidean"))})));return t?Object(An.a)(n,0):n}});var Zr=n(575);function Jr(e,t=!1){return h.a.tidy((()=>{Object(y.b)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let q=Ae(n),o=Object(ee.a)(e);const c=Pn([[1]],[1,1]);let l=Object(ee.a)(c);const d=n>=r?r:n;for(let e=0;e<d;++e){const t=o,d=l,f=q;[l,o,q]=h.a.tidy((()=>{const t=Object(L.a)(o,[e,e],[n-e,1]),d=Object(ir.a)(t),h=Object(L.a)(o,[e,e],[1,1]),s=Object(Jn.a)(Object(Me.a)(h,0),Pn([[-1]]),Pn([[1]])),f=Object(sub.a)(h,Object(M.a)(s,d)),m=Object(div.a)(t,f);l=1===m.shape[0]?Object(ee.a)(c):Object(F.a)([c,Object(L.a)(m,[1,0],[m.shape[0]-1,m.shape[1]])],0);const y=Object(Nt.a)(Object(div.a)(Object(D.a)(s,f),d)),x=Object(L.a)(o,[e,0],[n-e,r]),O=Object(M.a)(y,l),v=Object(sr.a)(l);if(0===e)o=Object(sub.a)(x,Object(D.a)(O,Object(D.a)(v,x)));else{const t=Object(sub.a)(x,Object(D.a)(O,Object(D.a)(v,x)));o=Object(F.a)([Object(L.a)(o,[0,0],[e,r]),t],0)}const k=Object(sr.a)(O),w=Object(L.a)(q,[0,e],[n,q.shape[1]-e]);if(0===e)q=Object(sub.a)(w,Object(D.a)(Object(D.a)(w,l),k));else{const t=Object(sub.a)(w,Object(D.a)(Object(D.a)(w,l),k));q=Object(F.a)([Object(L.a)(q,[0,0],[n,e]),t],1)}return[l,o,q]})),Object(Zr.d)([t,d,f])}return!t&&n>r&&(q=Object(L.a)(q,[0,0],[n,r]),o=Object(L.a)(o,[0,0],[r,r])),[q,o]}))}const Qr=Object(x.b)({qr_:function(e,t=!1){if(Object(y.b)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Jr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Object(Xn.a)(Object(R.a)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),o=[],c=[];r.forEach((e=>{const[n,r]=Jr(e,t);o.push(n),c.push(r)}));return[Object(R.a)(Object(An.a)(o,0),e.shape),Object(R.a)(Object(An.a)(c,0),e.shape)]}}});var ea=n(582);const ta=Object(x.b)({computeWeightedLoss_:function(e,t,n=ea.a.SUM_BY_NONZERO_WEIGHTS){const r=Object(m.a)(e,"losses","computeWeightedLoss");let o=null;null!=t&&(o=Object(m.a)(t,"weights","computeWeightedLoss"));const c=null==o?r:Object(M.a)(r,o);if(n===ea.a.NONE)return c;if(n===ea.a.SUM)return Object(Fn.a)(c);if(n===ea.a.MEAN){if(null==o)return Object(pt.a)(c);{const e=r.size/o.size,t=Object(div.a)(Object(Fn.a)(c),Object(Fn.a)(o));return e>1?Object(div.a)(t,Object(ln.a)(e)):t}}if(n===ea.a.SUM_BY_NONZERO_WEIGHTS){if(null==o)return Object(div.a)(Object(Fn.a)(c),Object(ln.a)(r.size));{const e=Object(M.a)(o,Object(ft.a)(r.shape)),t=Object(A.a)(Object(Fn.a)(Object(jt.a)(e,Object(ln.a)(0))),"float32");return Object(div.a)(Object(Fn.a)(c),t)}}throw Error(`Unknown reduction: ${n}`)}});const na=Object(x.b)({absoluteDifference_:function(e,t,n,r=ea.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(m.a)(e,"labels","absoluteDifference"),l=Object(m.a)(t,"predictions","absoluteDifference");let d=null;null!=n&&(d=Object(m.a)(n,"weights","absoluteDifference")),Object(y.e)(c.shape,l.shape,"Error in absoluteDifference: ");const h=Object(o.a)(Object(sub.a)(c,l));return ta(h,d,r)}});const ra=Object(x.b)({cosineDistance_:function(e,t,n,r,o=ea.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(m.a)(e,"labels","cosineDistance"),l=Object(m.a)(t,"predictions","cosineDistance");let d=null;null!=r&&(d=Object(m.a)(r,"weights","cosineDistance")),Object(y.e)(c.shape,l.shape,"Error in cosineDistance: ");const h=Object(ln.a)(1),f=Object(sub.a)(h,Object(Fn.a)(Object(M.a)(c,l),n,!0));return ta(f,d,o)}});const aa=Object(x.b)({hingeLoss_:function(e,t,n,r=ea.a.SUM_BY_NONZERO_WEIGHTS){let o=Object(m.a)(e,"labels","hingeLoss");const c=Object(m.a)(t,"predictions","hingeLoss");let l=null;null!=n&&(l=Object(m.a)(n,"weights","hingeLoss")),Object(y.e)(o.shape,c.shape,"Error in hingeLoss: ");const d=Object(ln.a)(1);o=Object(sub.a)(Object(M.a)(Object(ln.a)(2),o),d);const h=Object(en.a)(Object(sub.a)(d,Object(M.a)(o,c)));return ta(h,l,r)}});const sa=Object(x.b)({huberLoss_:function(e,t,n,r=1,c=ea.a.SUM_BY_NONZERO_WEIGHTS){const l=Object(m.a)(e,"labels","huberLoss"),h=Object(m.a)(t,"predictions","huberLoss");let f=null;null!=n&&(f=Object(m.a)(n,"weights","huberLoss")),Object(y.e)(l.shape,h.shape,"Error in huberLoss: ");const x=Object(ln.a)(r),O=Object(o.a)(Object(sub.a)(h,l)),v=Object(yt.a)(O,x),k=Object(sub.a)(O,v),w=Object(d.a)(Object(M.a)(Object(ln.a)(.5),Object(kt.a)(v)),Object(M.a)(x,k));return ta(w,f,c)}});const ia=Object(x.b)({logLoss_:function(e,t,n,r=1e-7,o=ea.a.SUM_BY_NONZERO_WEIGHTS){const c=Object(m.a)(e,"labels","logLoss"),l=Object(m.a)(t,"predictions","logLoss");let h=null;null!=n&&(h=Object(m.a)(n,"weights","logLoss")),Object(y.e)(c.shape,l.shape,"Error in logLoss: ");const f=Object(ln.a)(1),x=Object(ln.a)(r),O=Object(Nt.a)(Object(M.a)(c,Object(Ke.a)(Object(d.a)(l,x)))),v=Object(M.a)(Object(sub.a)(f,c),Object(Ke.a)(Object(d.a)(Object(sub.a)(f,l),x))),k=Object(sub.a)(O,v);return ta(k,h,o)}});const oa=Object(x.b)({meanSquaredError_:function(e,t,n,r=ea.a.SUM_BY_NONZERO_WEIGHTS){const o=Object(m.a)(e,"labels","meanSquaredError"),c=Object(m.a)(t,"predictions","meanSquaredError");let l=null;null!=n&&(l=Object(m.a)(n,"weights","meanSquaredError")),Object(y.e)(o.shape,c.shape,"Error in meanSquaredError: ");const d=Object($n.a)(o,c);return ta(d,l,r)}});const ua=Object(x.b)({sigmoidCrossEntropy_:function(e,t,n,r=0,c=ea.a.SUM_BY_NONZERO_WEIGHTS){let l=Object(m.a)(e,"multiClassLabels","sigmoidCrossEntropy");const h=Object(m.a)(t,"logits","sigmoidCrossEntropy");let f=null;if(null!=n&&(f=Object(m.a)(n,"weights","sigmoidCrossEntropy")),Object(y.e)(l.shape,h.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Object(ln.a)(r),t=Object(ln.a)(1),n=Object(ln.a)(.5);l=Object(d.a)(Object(M.a)(l,Object(sub.a)(t,e)),Object(M.a)(n,e))}const x=function(e,t){const n=Object(m.a)(e,"labels","sigmoidCrossEntropyWithLogits"),r=Object(m.a)(t,"logits","sigmoidCrossEntropyWithLogits");Object(y.e)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const c=Object(en.a)(r),l=Object(M.a)(r,n),h=Object(Xe.a)(Object(Te.a)(Object(Nt.a)(Object(o.a)(r))));return Object(d.a)(Object(sub.a)(c,l),h)}(l,h);return ta(x,f,c)}});const ca=Object(x.b)({softmaxCrossEntropy_:function(e,t,n,r=0,o=ea.a.SUM_BY_NONZERO_WEIGHTS){let c=Object(m.a)(e,"onehotLabels","softmaxCrossEntropy");const l=Object(m.a)(t,"logits","softmaxCrossEntropy");let h=null;if(null!=n&&(h=Object(m.a)(n,"weights","softmaxCrossEntropy")),Object(y.e)(c.shape,l.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Object(ln.a)(r),t=Object(ln.a)(1),n=Object(ln.a)(c.shape[1]);c=Object(d.a)(Object(M.a)(c,Object(sub.a)(t,e)),Object(div.a)(e,n))}const f=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Object(xr.a)(((e,t,r)=>{const o=Object(Je.a)(t,[n],!0),c=Object(sub.a)(Object(A.a)(t,"float32"),o);r([e,c]);const l=Object(Nt.a)(Object(M.a)(c,e));return{value:Object(Fn.a)(l,[n]),gradFunc:(e,t)=>{const[r,o]=t,c=Object(vt.e)(e.shape,[n]);return[Object(M.a)(Object(R.a)(e,c),Object(sub.a)(Object(A.a)(r,"float32"),Object(Te.a)(o))),Object(M.a)(Object(R.a)(e,c),Object(sub.a)(Object(Te.a)(o),Object(A.a)(r,"float32")))]}}}));return r(e,t)}(c,l);return ta(f,h,o)}});const la=Object(x.b)({sparseFillEmptyRows_:function(e,t,n,r){const o=Object(m.a)(e,"indices","sparseFillEmptyRows","int32"),c=Object(m.a)(t,"values","sparseFillEmptyRows"),l=Object(m.a)(n,"denseShape","sparseFillEmptyRows","int32"),d=Object(m.a)(r,"defaultValue","sparseFillEmptyRows",c.dtype);if(2!==o.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${o.shape}`);if(1!==c.rank)throw new Error(`Values should be Tensor1D but received shape ${c.shape}`);if(1!==l.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${l.shape}`);if(0!==d.rank)throw new Error(`Default value should be a scalar but received shape ${d.shape}`);const y={indices:o,values:c,denseShape:l,defaultValue:d},x=h.a.runKernel(f.Pc,y);return{outputIndices:x[0],outputValues:x[1],emptyRowIndicator:x[2],reverseIndexMap:x[3]}}});const da=Object(x.b)({sparseReshape_:function(e,t,n){const r=Object(m.a)(e,"inputIndices","sparseReshape","int32"),o=Object(m.a)(t,"inputShape","sparseReshape","int32"),c=Object(m.a)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Input shape should be Tensor1D but received shape ${o.shape}`);if(1!==c.rank)throw new Error(`New shape should be Tensor1D but received shape ${c.shape}`);const l={inputIndices:r,inputShape:o,newShape:c},d=h.a.runKernel(f.Qc,l);return{outputIndices:d[0],outputShape:d[1]}}});const ha=Object(x.b)({sparseSegmentMean_:function(data,e,t){const n=Object(m.a)(data,"data","sparseSegmentMean"),r=Object(m.a)(e,"indices","sparseSegmentMean","int32"),o=Object(m.a)(t,"segmentIds","sparseSegmentMean","int32");if(n.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);const c={data:n,indices:r,segmentIds:o};return h.a.runKernel(f.Rc,c)}});const pa=Object(x.b)({sparseSegmentSum_:function(data,e,t){const n=Object(m.a)(data,"data","sparseSegmentSum"),r=Object(m.a)(e,"indices","sparseSegmentSum","int32"),o=Object(m.a)(t,"segmentIds","sparseSegmentSum","int32");if(n.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);const c={data:n,indices:r,segmentIds:o};return h.a.runKernel(f.Sc,c)}});const fa=Object(x.b)({stringNGrams_:function(data,e,t,n,r,o,c,l){const d=Object(m.a)(data,"data","stringNGrams","string");if("string"!==d.dtype)throw new Error("Data must be of datatype string");if(1!==d.shape.length)throw new Error(`Data must be a vector, saw: ${d.shape}`);const y=Object(m.a)(e,"dataSplits","stringNGrams");if("int32"!==y.dtype)throw new Error("Data splits must be of datatype int32");const x={separator:t,nGramWidths:n,leftPad:r,rightPad:o,padWidth:c,preserveShortSequences:l},O={data:d,dataSplits:y},v=h.a.runKernel(f.ad,O,x);return{nGrams:v[0],nGramsSplits:v[1]}}});const ma=Object(x.b)({stringSplit_:function(input,e,t=!0){const n=Object(m.a)(input,"input","stringSplit","string"),r=Object(m.a)(e,"delimiter","stringSplit","string");if(1!==n.rank)throw new Error(`Input should be Tensor1D but received shape ${n.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const o={skipEmpty:t},c={input:n,delimiter:r},l=h.a.runKernel(f.bd,c,o);return{indices:l[0],values:l[1],shape:l[2]}}});const ba=Object(x.b)({stringToHashBucketFast_:function(input,e){const t=Object(m.a)(input,"input","stringToHashBucketFast","string"),n={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const r={input:t};return h.a.runKernel(f.cd,r,n)}}),ga={fft:Sn.a,ifft:In.a,rfft:jn.a,irfft:Nn.a},ya={hammingWindow:Cr,hannWindow:$r,frame:Er,stft:Ar},xa={flipLeftRight:_r,grayscaleToRGB:Fr,resizeNearestNeighbor:Hr.a,resizeBilinear:Gr.a,rotateWithOffset:Dr,cropAndResize:Rr,nonMaxSuppression:zr,nonMaxSuppressionAsync:Pr,nonMaxSuppressionWithScore:Br,nonMaxSuppressionWithScoreAsync:Wr,nonMaxSuppressionPadded:Vr,nonMaxSuppressionPaddedAsync:Ur,threshold:qr,transform:Kr},Oa={bandPart:Xr,gramSchmidt:Yr,qr:Qr},va={absoluteDifference:na,computeWeightedLoss:ta,cosineDistance:ra,hingeLoss:aa,huberLoss:sa,logLoss:ia,meanSquaredError:oa,sigmoidCrossEntropy:ua,softmaxCrossEntropy:ca},ka={sparseFillEmptyRows:la,sparseReshape:da,sparseSegmentMean:ha,sparseSegmentSum:pa},wa={stringNGrams:fa,stringSplit:ma,stringToHashBucketFast:ba}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({cast_:function(e,t){const n=Object(c.a)(e,"x","cast");if(!l.B(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const d={x:n},h={dtype:t};return r.a.runKernel(o.x,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return div}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(672),h=n(545);const div=Object(h.b)({div_:function(a,b){let e=Object(l.a)(a,"a","div"),t=Object(l.a)(b,"b","div");if([e,t]=Object(c.makeTypesMatch)(e,t),"int32"===e.dtype&&"int32"===t.dtype)return Object(d.a)(e,t);const n={a:e,b:t};return r.a.runKernel(o.qc,n,{})}})},,function(e,t,n){"use strict";n.d(t,"a",(function(){return sub}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const sub=Object(d.b)({sub_:function(a,b){let e=Object(l.a)(a,"a","sub"),t=Object(l.a)(b,"b","sub");[e,t]=Object(c.makeTypesMatch)(e,t);const n={a:e,b:t};return r.a.runKernel(o.dd,n)}})},function(e,t,n){"use strict";function r(e,t){const n=e.length,r=[];for(let i=0;i<n;i++){const o=n-1-i,a=e[o]||1;(t[t.length-1-i]||1)>1&&1===a&&r.unshift(o)}return r}function o(e,t){const n=[];for(let i=0;i<t.length;i++){const r=e[e.length-i-1],o=t.length-i-1,c=t[o];(null==r||1===r&&c>1)&&n.unshift(o)}return n}function c(e,t){const n=[],r=Math.max(e.length,t.length);for(let i=0;i<r;i++){let a=e[e.length-i-1];null==a&&(a=1);let b=t[t.length-i-1];if(null==b&&(b=1),1===a)n.unshift(b);else if(1===b)n.unshift(a);else{if(a!==b){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(a)}}return n}n.r(t),n.d(t,"getBroadcastDims",(function(){return r})),n.d(t,"getReductionAxes",(function(){return o})),n.d(t,"assertAndGetBroadcastShape",(function(){return c}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(599),o=n(593);function c(e,t){if((Object(r.A)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Object(r.A)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Object(o.a)(e,[],[],t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({zerosLike_:function(e){const t={x:Object(c.a)(e,"x","zerosLike")};return r.a.runKernel(o.pd,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({add_:function(a,b){let e=Object(l.a)(a,"a","add"),t=Object(l.a)(b,"b","add");[e,t]=Object(c.makeTypesMatch)(e,t);const n={a:e,b:t};return r.a.runKernel(o.d,n)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"makeTypesMatch",(function(){return l})),n.d(t,"assertTypesMatch",(function(){return d})),n.d(t,"isTensorInList",(function(){return h})),n.d(t,"getTensorsInContainer",(function(){return f}));var r=n(548),o=n(600),c=n(599);function l(a,b){if(a.dtype===b.dtype)return[a,b];const e=Object(o.c)(a.dtype,b.dtype);return[a.cast(e),b.cast(e)]}function d(a,b){Object(c.b)(a.dtype===b.dtype,(()=>`The dtypes of the first(${a.dtype}) and second(${b.dtype}) input must match`))}function h(e,t){return t.some((t=>t.id===e.id))}function f(e){const t=[];return m(e,t,new Set),t}function m(e,t,n){if(null==e)return;if(e instanceof r.a)return void t.push(e);if(o=e,!Array.isArray(o)&&"object"!=typeof o)return;var o;const c=e;for(const e in c){const r=c[e];n.has(r)||(n.add(r),m(r,t,n))}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(554),d=n(545);const h=Object(d.b)({sum_:function(e,t=null,n=!1){let d=Object(c.a)(e,"x","sum");"bool"===d.dtype&&(d=Object(l.a)(d,"int32"));const h={x:d},f={axis:t,keepDims:n};return r.a.runKernel(o.ed,h,f)}})},function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return c})),n.d(t,"f",(function(){return l})),n.d(t,"b",(function(){return d})),n.d(t,"g",(function(){return f})),n.d(t,"c",(function(){return m})),n.d(t,"a",(function(){return y}));var r=n(543);function o(e,t,n,o,l){const d=t.inputParams[e];if(d&&void 0!==d.inputIndexStart){const e=d.inputIndexStart,h=0===d.inputIndexEnd?void 0:void 0===d.inputIndexEnd?e+1:d.inputIndexEnd;if("tensor"===d.type)return c(t.inputNames[d.inputIndexStart],n,o,l);if("tensors"===d.type){return t.inputNames.slice(e,h).map((e=>c(e,n,o,l)))}const f=c(t.inputNames.slice(e)[0],n,o,l),data=f.dataSync();return"number"===d.type?data[0]:r.util.toNestedArray(f.shape,data)}const h=t.attrParams[e];return h&&h.value}function c(e,t,n,r){const[o,c]=f(e);if(null!=r){const e=r.getHashTableHandleByName(o);if(null!=e)return e}const l=n.currentContextIds.find((e=>!!t[h(o,e)]));return void 0!==l?t[h(o,l)][c]:void 0}function l(e,t,n){return t[h(e,n.currentContextId)]}function d(e,t){const[n,r,o]=f(e);return[h(n,t&&t.currentContextId),r,o]}function h(e,t){return t?`${e}-${t}`:e}function f(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function m(e,t,n){let r=o("pad",e,t,n);if("explicit"===r){r=o("explicitPaddings",e,t,n);const c=[[0,0],[0,0],[0,0],[0,0]];for(let i=0;i<4;i++)c[i][0]=r[2*i],c[i][1]=r[2*i+1];return c}return r}function y(e){return e.kept?e:Object(r.clone)(e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(547),o=n(546),c=n(545);const l=Object(c.b)({square_:function(e){const t=Object(o.a)(e,"x","square");return r.a.runKernel("Square",{x:t},{})}})},function(e,t,n){"use strict";n.d(t,"e",(function(){return o})),n.d(t,"f",(function(){return c})),n.d(t,"g",(function(){return l})),n.d(t,"b",(function(){return d})),n.d(t,"c",(function(){return h})),n.d(t,"d",(function(){return f})),n.d(t,"j",(function(){return v})),n.d(t,"i",(function(){return k})),n.d(t,"h",(function(){return w})),n.d(t,"a",(function(){return S}));var r=n(599);function o(e,t,n,r,o="NHWC",c){return d(e,[...t,e[3]],n,c,r,null,null,w(o))}function c(e,t,n,r,o,c,l="channelsLast"){const[h,f]=m(t);let y;if("channelsLast"===l)y=[h,f,e[3],e[3]];else{if("channelsFirst"!==l)throw new Error(`Unknown dataFormat ${l}`);y=[h,f,e[1],e[1]]}return d(e,y,n,r,o,c,!1,l)}function l(e,t,n,r,o,c,l="NDHWC"){const[d,f,m]=y(t);let x,O;if("NDHWC"===l)O="channelsLast",x=[d,f,m,e[4],e[4]];else{if("NCDHW"!==l)throw new Error(`Unknown dataFormat ${l}`);O="channelsFirst",x=[d,f,m,e[1],e[1]]}return h(e,x,n,r,o,!1,O,c)}function d(e,t,n,r,o,c,l=!1,d="channelsLast"){let[h,y,v,k]=[-1,-1,-1,-1];if("channelsLast"===d)[h,y,v,k]=e;else{if("channelsFirst"!==d)throw new Error(`Unknown dataFormat ${d}`);[h,k,y,v]=e}const[w,S,,I]=t,[N,j]=m(n),[T,C]=m(r),$=x(w,T),E=x(S,C),{padInfo:A,outHeight:R,outWidth:_}=function(e,t,n,r,o,c,l,d,h){let m,y,x;if("number"==typeof e){m={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const o=function(e,t,n,r,o){null==r&&(r=f(e,t,n));const c=e[0],l=e[1],d=O((c-t+2*r)/n+1,o),h=O((l-t+2*r)/n+1,o);return[d,h]}([t,n],c,r,e,d);y=o[0],x=o[1]}else if("same"===e){y=Math.ceil(t/r),x=Math.ceil(n/o);const e=Math.max(0,(y-1)*r+c-t),d=Math.max(0,(x-1)*o+l-n),h=Math.floor(e/2),f=e-h,O=Math.floor(d/2);m={top:h,bottom:f,left:O,right:d-O,type:"SAME"}}else if("valid"===e)m={top:0,bottom:0,left:0,right:0,type:"VALID"},y=Math.ceil((t-c+1)/r),x=Math.ceil((n-l+1)/o);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const f="channelsLast"===h?e[1][0]:e[2][0],v="channelsLast"===h?e[1][1]:e[2][1],k="channelsLast"===h?e[2][0]:e[3][0],w="channelsLast"===h?e[2][1]:e[3][1];m={top:f,bottom:v,left:k,right:w,type:0===f&&0===v&&0===k&&0===w?"VALID":"EXPLICIT"},y=O((t-c+f+v)/r+1,d),x=O((n-l+k+w)/o+1,d)}}return{padInfo:m,outHeight:y,outWidth:x}}(o,y,v,N,j,$,E,c,d),F=l?I*k:I;let D;return"channelsFirst"===d?D=[h,F,R,_]:"channelsLast"===d&&(D=[h,R,_,F]),{batchSize:h,dataFormat:d,inHeight:y,inWidth:v,inChannels:k,outHeight:R,outWidth:_,outChannels:F,padInfo:A,strideHeight:N,strideWidth:j,filterHeight:w,filterWidth:S,effectiveFilterHeight:$,effectiveFilterWidth:E,dilationHeight:T,dilationWidth:C,inShape:e,outShape:D,filterShape:t}}function h(e,t,n,r,o,c=!1,l="channelsLast",d){let[h,m,v,k,w]=[-1,-1,-1,-1,-1];if("channelsLast"===l)[h,m,v,k,w]=e;else{if("channelsFirst"!==l)throw new Error(`Unknown dataFormat ${l}`);[h,w,m,v,k]=e}const[S,I,N,,j]=t,[T,C,$]=y(n),[E,A,R]=y(r),_=x(S,E),F=x(I,A),D=x(N,R),{padInfo:M,outDepth:z,outHeight:L,outWidth:P}=function(e,t,n,r,o,c,l,d,h,m,y){let x,v,k,w;if("number"==typeof e){x={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const c=function(e,t,n,r,o,c){null==o&&(o=f(e,t,r));const l=e[0],d=e[1],h=e[2],m=O((l-t+2*o)/r+1,c),y=O((d-t+2*o)/r+1,c),x=O((h-t+2*o)/r+1,c);return[m,y,x,n]}([t,n,r,1],d,1,o,e,y);v=c[0],k=c[1],w=c[2]}else if("same"===e){v=Math.ceil(t/o),k=Math.ceil(n/c),w=Math.ceil(r/l);const e=(v-1)*o+d-t,f=(k-1)*c+h-n,y=(w-1)*l+m-r,O=Math.floor(e/2),S=e-O,I=Math.floor(f/2),N=f-I,j=Math.floor(y/2);x={top:I,bottom:N,left:j,right:y-j,front:O,back:S,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);x={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},v=Math.ceil((t-d+1)/o),k=Math.ceil((n-h+1)/c),w=Math.ceil((r-m+1)/l)}return{padInfo:x,outDepth:v,outHeight:k,outWidth:w}}(o,m,v,k,T,C,$,_,F,D,d),B=c?j*w:j;let W;return"channelsFirst"===l?W=[h,B,z,L,P]:"channelsLast"===l&&(W=[h,z,L,P,B]),{batchSize:h,dataFormat:l,inDepth:m,inHeight:v,inWidth:k,inChannels:w,outDepth:z,outHeight:L,outWidth:P,outChannels:B,padInfo:M,strideDepth:T,strideHeight:C,strideWidth:$,filterDepth:S,filterHeight:I,filterWidth:N,effectiveFilterDepth:_,effectiveFilterHeight:F,effectiveFilterWidth:D,dilationDepth:E,dilationHeight:A,dilationWidth:R,inShape:e,outShape:W,filterShape:t}}function f(e,t,n,r=1){const o=x(t,r);return Math.floor((e[0]*(n-1)-n+o)/2)}function m(param){return"number"==typeof param?[param,param,param]:2===param.length?[param[0],param[1],1]:param}function y(param){return"number"==typeof param?[param,param,param]:param}function x(e,t){return t<=1?e:e+(e-1)*(t-1)}function O(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function v(param){const[e,t,n]=m(param);return 1===e&&1===t&&1===n}function k(e,t){return v(e)||v(t)}function w(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function S(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)r.b(r.v(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((p=>{p.forEach((t=>{r.b(r.v(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return d})),n.d(t,"a",(function(){return h})),n.d(t,"d",(function(){return f}));var r=n(599);const o="tfjsflags";class c{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=l,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(d().getBool("IS_TEST")||d().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];d().getBool("IS_TEST")||d().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Object(r.x)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(o in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function l(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((s,...e)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,e[0],e[1]),e.join("=")))),t}function d(){return h}let h=null;function f(e){h=e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({neg_:function(e){const t={x:Object(c.a)(e,"x","neg")};return r.a.runKernel(o.ac,t)}})},,,function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({slice_:function(e,t,n){const l=Object(c.a)(e,"x","slice","string_or_numeric");if(0===l.rank)throw new Error("Slicing scalar is not possible");const d={x:l},h={begin:t,size:n};return r.a.runKernel(o.Lc,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return x})),n.d(t,"f",(function(){return y})),n.d(t,"d",(function(){return f})),n.d(t,"e",(function(){return m})),n.d(t,"b",(function(){return d})),n.d(t,"c",(function(){return h}));var r=n(547),o=n(548),c=n(546),l=n(599);function d(e){return l.b(l.u(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const o=Object(c.a)(t,"x","tf.grad","string_or_numeric"),d=null!=n?Object(c.a)(n,"dy","tf.grad"):null;return r.a.tidy((()=>{const{value:t,grads:n}=r.a.gradients((()=>e(o)),[o],d);return null!=d&&l.e(t.shape,d.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),O(n),n[0]}))}}function h(e){return l.b(l.u(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{l.b(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const o=Object(c.b)(t,"args","tf.grads","string_or_numeric"),d=null!=n?Object(c.a)(n,"dy","tf.grads"):null;return r.a.tidy((()=>{const{value:t,grads:n}=r.a.gradients((()=>e(...o)),o,d);return null!=d&&l.e(t.shape,d.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),O(n),n}))}}function f(e){return l.b(l.u(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{l.b(t instanceof o.a,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),l.b(null==n||n instanceof o.a,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:c,value:d}=r.a.gradients((()=>e(t)),[t],n);return O(c),{grad:c[0],value:d}}}function m(e){return l.b(l.u(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{l.b(Array.isArray(t)&&t.every((e=>e instanceof o.a)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),l.b(null==n||n instanceof o.a,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const c=r.a.gradients((()=>e(...t)),t,n);return null!=n&&l.e(c.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),O(c.grads),c}}function y(e,t){l.b(l.u(e),(()=>"The f passed in variableGrads(f) must be a function")),l.b(null==t||Array.isArray(t)&&t.every((e=>e instanceof o.c)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in r.a.registeredVariables)t.push(r.a.registeredVariables[e])}const c=n?t.filter((e=>!e.trainable)):null,d=t.length;t=t.filter((e=>e.trainable)),l.b(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${d} variables is trainable.`));const{value:h,grads:f}=r.a.gradients(e,t,null,!0);l.b(f.some((g=>null!=g)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),l.b(0===h.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${h.rank} tensor`));const m={};return t.forEach(((e,i)=>{null!=f[i]&&(m[e.name]=f[i])})),null!=c&&c.forEach((e=>m[e.name]=null)),{value:h,grads:m}}function x(e){return r.a.customGrad(e)}function O(e){if(e.filter((g=>null==g)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(621),h=n(545);const f=Object(h.b)({concat_:function(e,t=0){Object(l.b)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Object(c.b)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Object(d.a)(n[0]);const h=n,f={axis:t};return r.a.runKernel(o.C,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(674),d=n(558),h=n(545);const f=Object(h.b)({where_:function(e,a,b){const t=Object(c.a)(a,"a","where"),n=Object(c.a)(b,"b","where"),h=Object(c.a)(e,"condition","where","bool"),f=Object(d.assertAndGetBroadcastShape)(Object(d.assertAndGetBroadcastShape)(h.shape,t.shape),n.shape),m={condition:Object(l.a)(h,f),t:Object(l.a)(t,f),e:Object(l.a)(n,f)};return r.a.runKernel(o.Fc,m)}})},function(e,t,n){"use strict";n.d(t,"g",(function(){return d})),n.d(t,"f",(function(){return h})),n.d(t,"c",(function(){return f})),n.d(t,"b",(function(){return m})),n.d(t,"e",(function(){return y})),n.d(t,"h",(function(){return x})),n.d(t,"m",(function(){return O})),n.d(t,"n",(function(){return v})),n.d(t,"t",(function(){return k})),n.d(t,"d",(function(){return w})),n.d(t,"l",(function(){return S})),n.d(t,"u",(function(){return time})),n.d(t,"r",(function(){return I})),n.d(t,"o",(function(){return N})),n.d(t,"k",(function(){return j})),n.d(t,"q",(function(){return T})),n.d(t,"i",(function(){return C})),n.d(t,"j",(function(){return $})),n.d(t,"p",(function(){return E})),n.d(t,"a",(function(){return A})),n.d(t,"s",(function(){return R}));var r=n(547),o=n(567),c=n(548),l=n(562);function d(){Object(o.c)().set("PROD",!0)}function h(){Object(o.c)().set("DEBUG",!0)}function f(){Object(o.c)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function m(e){Object(o.c)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function y(){r.a.disposeVariables()}function x(){return r.a}function O(){return r.a.memory()}function v(e){return r.a.profile(e)}function k(e,t){return r.a.tidy(e,t)}function w(e){Object(l.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function S(e){return r.a.keep(e)}function time(e){return r.a.time(e)}function I(e){return r.a.setBackend(e)}function N(){return r.a.ready()}function j(){return r.a.backendName}function T(e){r.a.removeBackend(e)}function C(e){return r.a.findBackend(e)}function $(e){return r.a.findBackendFactory(e)}function E(e,t,n=1){return r.a.registerBackend(e,t,n)}function A(){return r.a.backend}function R(e,t){Object(o.c)().setPlatform(e,t)}Object(c.e)(m)},,,function(e,t,n){"use strict";(function(e){n.d(t,"f",(function(){return d})),n.d(t,"e",(function(){return h})),n.d(t,"a",(function(){return x})),n.d(t,"b",(function(){return O})),n.d(t,"d",(function(){return v})),n.d(t,"c",(function(){return k})),n.d(t,"i",(function(){return w})),n.d(t,"g",(function(){return S})),n.d(t,"h",(function(){return I}));var r=n(594),o=n(642),c=n(599),l=n(794);async function d(e,t){const n=[],r=[],o=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let i=0;i<o.length;++i){const c=o[i],l=Array.isArray(e)?e[i].tensor:e[c];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${c}': ${l.dtype}`);const d={name:c,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const e=new Promise((async e=>{const t=await l.bytes(),n=t.reduce(((p,e)=>p+e.length),0)+4*t.length,r=new Uint8Array(n);let o=0;for(let i=0;i<t.length;i++){const e=t[i],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,o),o+=4,r.set(e,o),o+=e.length}e(r)}));r.push(e)}else r.push(l.data());null!=t&&(d.group=t),n.push(d)}return{data:f(await Promise.all(r)),specs:n}}function h(e,t){const n={};let d,h=0;for(const f of t){const t=f.name,m=f.dtype,y=f.shape,x=Object(c.O)(y);let O;if("quantization"in f){const n=f.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${f.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${f.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==m)throw new Error(`Weight ${f.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${m}.`)}const r=l.a[n.dtype],o=e.slice(h,h+x*r),c="uint8"===n.dtype?new Uint8Array(o):new Uint16Array(o);if("float32"===m)if("uint8"===n.dtype||"uint16"===n.dtype){O=new Float32Array(c.length);for(let i=0;i<c.length;i++){const e=c[i];O[i]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===d&&(d=N()),O=d(c)}else{if("int32"!==m)throw new Error(`Unsupported dtype in weight '${t}': ${m}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);O=new Int32Array(c.length);for(let i=0;i<c.length;i++){const e=c[i];O[i]=Math.round(e*n.scale+n.min)}}h+=x*r}else if("string"===m){const t=Object(c.O)(f.shape);O=[];for(let i=0;i<t;i++){const t=new Uint32Array(e.slice(h,h+4))[0];h+=4;const n=new Uint8Array(e.slice(h,h+t));O.push(n),h+=t}}else{const c=l.a[m],d=e.slice(h,h+x*c);if("float32"===m)O=new Float32Array(d);else if("int32"===m)O=new Int32Array(d);else if("bool"===m)O=new Uint8Array(d);else{if("complex64"!==m)throw new Error(`Unsupported dtype in weight '${t}': ${m}`);{O=new Float32Array(d);const e=new Float32Array(O.length/2),image=new Float32Array(O.length/2);for(let i=0;i<e.length;i++)e[i]=O[2*i],image[i]=O[2*i+1];const c=Object(o.a)(e,y,"float32"),l=Object(o.a)(image,y,"float32");n[t]=Object(r.a)(c,l),c.dispose(),l.dispose()}}h+=x*c}"complex64"!==m&&(n[t]=Object(o.a)(O,y,m))}return n}function f(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let o=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),o),o+=e.byteLength})),r.buffer}const m=void 0!==e&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function y(t){return m?e.byteLength(t):new Blob([t]).size}function x(t){if(m)return e.from(t).toString("base64");const n=new Uint8Array(t);let s="";for(let i=0,e=n.length;i<e;i++)s+=String.fromCharCode(n[i]);return btoa(s)}function O(t){if(m){const n=e.from(t,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const s=atob(t),n=new Uint8Array(s.length);for(let i=0;i<s.length;++i)n.set([s.charCodeAt(i)],i);return n.buffer}function v(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function k(path){for(path=path.trim();path.endsWith("/");)path=path.slice(0,path.length-1);const e=path.split("/");return e[e.length-1]}function w(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function S(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,o]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=o}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function I(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:y(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:y(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function N(){const e=function(){const e=i=>{let e=i<<13,t=0;for(;0==(8388608&e);)t-=8388608,e<<=1;return e&=-8388609,t+=947912704,e|t},t=new Uint32Array(2048);t[0]=0;for(let i=1;i<1024;i++)t[i]=e(i);for(let i=1024;i<2048;i++)t[i]=939524096+(i-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let i=1;i<31;i++)e[i]=i<<23;for(let i=33;i<63;i++)e[i]=2147483648+(i-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let i=0;i<64;i++)e[i]=1024;return e[0]=e[32]=0,e}();return r=>{const o=new ArrayBuffer(4*r.length),c=new Uint32Array(o);for(let o=0;o<r.length;o++){const l=r[o],d=e[n[l>>10]+(1023&l)]+t[l>>10];c[o]=d}return new Float32Array(o)}}}).call(this,n(553).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({sqrt_:function(e){const t={x:Object(c.a)(e,"x","sqrt","float32")};return r.a.runKernel(o.Vc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({matMul_:function(a,b,e=!1,t=!1){let n=Object(l.a)(a,"a","matMul"),d=Object(l.a)(b,"b","matMul");[n,d]=Object(c.makeTypesMatch)(n,d);const h={a:n,b:d},f={transposeA:e,transposeB:t};return r.a.runKernel(o.s,h,f)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return c})),n.d(t,"d",(function(){return l})),n.d(t,"e",(function(){return d})),n.d(t,"a",(function(){return h})),n.d(t,"f",(function(){return f})),n.d(t,"h",(function(){return m})),n.d(t,"g",(function(){return y}));var r=n(599);function o(e,t){for(let i=0;i<e.length;++i)if(e[e.length-i-1]!==t-1-i)return!1;return!0}function c(e,t,n){const r=e.length+t.length,o=[];let c=0,l=0;for(let d=0;d<r;d++)-1===n.indexOf(d)?o.push(e[c++]):o.push(t[l++]);return o}function l(e,t){const n=[],r=e.length;for(let o=0;o<r;o++)-1===t.indexOf(o)&&n.push(e[o]);return[n,t.map((t=>e[t]))]}function d(e,t){return c(e,t.map((e=>1)),t)}function h(e,t,n){r.b(o(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function f(e,t){if(o(e,t))return null;const n=[];for(let i=0;i<t;++i)-1===e.indexOf(i)&&n.push(i);return e.forEach((e=>n.push(e))),n}function m(e){return e.map(((e,i)=>[i,e])).sort(((a,b)=>a[1]-b[1])).map((e=>e[0]))}function y(e,t){const n=[];for(let i=t-e;i<t;++i)n.push(i);return n}},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},,function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"e",(function(){return o})),n.d(t,"d",(function(){return c})),n.d(t,"c",(function(){return l})),n.d(t,"b",(function(){return d}));class r{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==r.instance&&(r.instance=new r),r.instance}static registerSaveRouter(e){r.getInstance().saveRouters.push(e)}static registerLoadRouter(e){r.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return r.getHandlers(e,"save")}static getLoadHandlers(e,t){return r.getHandlers(e,"load",t)}static getHandlers(e,t,n){const o=[];return("load"===t?r.getInstance().loadRouters:r.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&o.push(r)})),o}}const o=e=>r.registerSaveRouter(e),c=e=>r.registerLoadRouter(e),l=e=>r.getSaveHandlers(e),d=(e,t)=>r.getLoadHandlers(e,t)},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({exp_:function(e){const t={x:Object(c.a)(e,"x","exp")};return r.a.runKernel(o.cb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({greater_:function(a,b){let e=Object(l.a)(a,"a","greater","string_or_numeric"),t=Object(l.a)(b,"b","greater","string_or_numeric");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.qb,n)}})},,,function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(548),o=n(599);function c(e,t="float32",n){return t=t||"float32",o.c(e),new r.b(e,t,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({reverse_:function(e,t){const n={x:Object(c.a)(e,"x","reverse")},l={dims:t};return r.a.runKernel(o.zc,n,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var r=n(547),o=n(575),c=n(544),l=n(546),d=n(599),h=n(594),f=n(651),m=n(568),y=n(545),x=n(655);const O=Object(y.b)({transpose_:function(e,t,n){const y=Object(l.a)(e,"x","transpose");if(null==t&&(t=y.shape.map(((s,i)=>i)).reverse()),d.b(y.rank===t.length,(()=>`Error in transpose: rank of input ${y.rank} must match length of perm ${t}.`)),t.forEach((e=>{d.b(e>=0&&e<y.rank,(()=>"All entries in 'perm' must be between 0 and "+(y.rank-1)+` but got ${t}`))})),y.rank<=1)return y.clone();const O={x:y},v={perm:t};return"complex64"===y.dtype?Object(o.t)((()=>{let e=Object(x.a)(y),t=Object(f.a)(y);return e=r.a.runKernel(c.kd,{x:e},v),t=r.a.runKernel(c.kd,{x:t},v),n&&(t=Object(m.a)(t)),Object(h.a)(e,t)})):r.a.runKernel(c.kd,O,v)}})},,function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(547),o=n(599),c=n(549);function l(e,t,n,l){if(null==l&&(l=Object(o.r)(e)),"complex64"===l)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Object(o.A)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Object(o.c)(t);const e=Object(o.O)(t),r=Object(o.O)(n);Object(o.b)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let i=0;i<n.length;++i){const e=n[i],r=i!==n.length-1||e!==Object(o.O)(t.slice(i));Object(o.b)(n[i]===t[i]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Object(o.A)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==l?Object(c.toTypedArray)(e,l):Object(o.m)(e,[],!0),r.a.makeTensor(e,t,l)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({complex_:function(e,t){const n=Object(c.a)(e,"real","complex"),d=Object(c.a)(t,"imag","complex");l.e(n.shape,d.shape,`real and imag shapes, ${n.shape} and ${d.shape}, must match in call to tf.complex().`);const h={real:n,imag:d};return r.a.runKernel(o.A,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({pow_:function(base,e){let t=Object(l.a)(base,"base","pow"),n=Object(l.a)(e,"exp","pow");[t,n]=Object(c.makeTypesMatch)(t,n);const d={a:t,b:n};return r.a.runKernel(o.kc,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({lessEqual_:function(a,b){let e=Object(l.a)(a,"a","lessEqual","string_or_numeric"),t=Object(l.a)(b,"b","lessEqual","string_or_numeric");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Cb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({pad_:function(e,t,n=0){const l=Object(c.a)(e,"x","pad");if(0===l.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const d={paddings:t,constantValue:n},h={x:l};return r.a.runKernel(o.ic,h,d)}})},,function(e,t,n){"use strict";function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,d(e,t,n)}function o(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,d(e,n,r),d(t,n,r)}function c(e,t,n){return Math.max(e,Math.min(t,n))}function l(e){return e%2==0?e:e+1}function d(object,e,t){const n=object[e];object[e]=object[t],object[t]=n}function h(e){let t=0;for(let i=0;i<e.length;i++)t+=e[i];return t}function f(a,b){const e=Math.random();return b*e+(1-e)*a}function m(a,b){let e=0;for(let i=0;i<a.length;i++){const t=Number(a[i])-Number(b[i]);e+=t*t}return e}function y(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function x(e,t,n=""){y(S(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function O(a){y(null!=a,(()=>"The input to the tensor constructor must be a non-null value."))}function v(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||L(e)&&!n)for(let i=0;i<e.length;++i)v(e[i],t,n);else t.push(e);return t}function k(e){if(0===e.length)return 1;let t=e[0];for(let i=1;i<e.length;i++)t*=e[i];return t}function w(e){return 0===e.length}function S(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0}function I(a){return a%1==0}function N(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function j(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function T(e){const t=new Uint32Array(e);for(let i=0;i<e;++i)t[i]=i;return r(t),t}function C(a,e){return e<=a.length?a:a+" ".repeat(e-a.length)}function $(e,t=(e=>0),n){return new Promise(((r,o)=>{let c=0;const l=()=>{if(e())return void r();c++;const d=t(c);null!=n&&c>=n?o():setTimeout(l,d)};l()}))}function E(e,t){let n=1,r=-1;for(let i=0;i<e.length;++i)if(e[i]>=0)n*=e[i];else if(-1===e[i]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${i}`);r=i}else if(e[i]<0)throw Error(`Shapes can not be < 0. Found ${e[i]} at dim ${i}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const o=e.slice();return o[r]=t/n,o}function A(e,t){const n=t.length;return y((e=null==e?t.map(((s,i)=>i)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),y(e.every((e=>I(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((a=>a<0?n+a:a))}function R(e,t){const n=[],r=[],o=null!=t&&Array.isArray(t)&&0===t.length,c=null==t||o?null:A(t,e).sort();let l=0;for(let i=0;i<e.length;++i){if(null!=c){if(c[l]===i&&1!==e[i])throw new Error(`Can't squeeze axis ${i} since its dim '${e[i]}' is not 1`);(null==c[l]||c[l]>i)&&1===e[i]&&(n.push(e[i]),r.push(i)),c[l]<=i&&l++}1!==e[i]&&(n.push(e[i]),r.push(i))}return{newShape:n,keptDims:r}}function _(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function F(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function D(e,t){for(let i=0;i<e.length;i++){const n=e[i];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${t} being uploaded contains ${n}.`)}}function M(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function z(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function L(a){return a instanceof Float32Array||a instanceof Int32Array||a instanceof Uint8Array||a instanceof Uint8ClampedArray}function P(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function B(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function W(e){return"string"==typeof e||e instanceof String}function V(e){return"boolean"==typeof e}function U(e){return"number"==typeof e}function G(e){return Array.isArray(e)?G(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":U(e)?"float32":W(e)?"string":V(e)?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function K(e,t){for(let i=t;i<e;++i)if(e%i==0)return i;return e}function X(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let i=t-3;i>=0;--i)n[i]=n[i+1]*e[i+1];return n}function Y(e,t,a,n=!1){const r=new Array;if(1===t.length){const o=t[0]*(n?2:1);for(let i=0;i<o;i++)r[i]=a[e+i]}else{const o=t[0],c=t.slice(1),l=c.reduce(((e,t)=>e*t))*(n?2:1);for(let i=0;i<o;i++)r[i]=Y(e+i*l,c,a,n)}return r}function Z(e,a,t=!1){if(0===e.length)return a[0];const n=e.reduce(((e,t)=>e*t))*(t?2:1);if(0===n)return[];if(n!==a.length)throw new Error(`[${e}] does not match the input size ${a.length}${t?" for a complex tensor":""}.`);return Y(0,e,a,t)}function J(e,t){const n=Q(e,t);for(let i=0;i<n.length;i++)n[i]=1;return n}function Q(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Z(e,new Float32Array(n));if("int32"===t)return Z(e,new Int32Array(n));if("bool"===t)return Z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{y(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let i=0;i<e.length-1;++i)r+=n[i]*e[i];return r}function re(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let i=0;i<r.length-1;++i)r[i]=Math.floor(e/n[i]),e-=r[i]*n[i];return r[r.length-1]=e,r}function ae(object){return object&&object.then&&"function"==typeof object.then}n.d(t,"M",(function(){return r})),n.d(t,"N",(function(){return o})),n.d(t,"i",(function(){return c})),n.d(t,"H",(function(){return l})),n.d(t,"S",(function(){return d})),n.d(t,"R",(function(){return h})),n.d(t,"J",(function(){return f})),n.d(t,"l",(function(){return m})),n.d(t,"b",(function(){return y})),n.d(t,"e",(function(){return x})),n.d(t,"d",(function(){return O})),n.d(t,"m",(function(){return v})),n.d(t,"O",(function(){return k})),n.d(t,"y",(function(){return w})),n.d(t,"a",(function(){return S})),n.d(t,"v",(function(){return I})),n.d(t,"T",(function(){return N})),n.d(t,"P",(function(){return j})),n.d(t,"k",(function(){return T})),n.d(t,"L",(function(){return C})),n.d(t,"K",(function(){return $})),n.d(t,"s",(function(){return E})),n.d(t,"I",(function(){return A})),n.d(t,"Q",(function(){return R})),n.d(t,"o",(function(){return _})),n.d(t,"n",(function(){return F})),n.d(t,"h",(function(){return D})),n.d(t,"B",(function(){return M})),n.d(t,"p",(function(){return z})),n.d(t,"A",(function(){return L})),n.d(t,"g",(function(){return P})),n.d(t,"f",(function(){return B})),n.d(t,"z",(function(){return W})),n.d(t,"t",(function(){return V})),n.d(t,"w",(function(){return U})),n.d(t,"r",(function(){return G})),n.d(t,"u",(function(){return H})),n.d(t,"G",(function(){return K})),n.d(t,"j",(function(){return X})),n.d(t,"U",(function(){return Z})),n.d(t,"D",(function(){return J})),n.d(t,"F",(function(){return Q})),n.d(t,"E",(function(){return ee})),n.d(t,"c",(function(){return te})),n.d(t,"C",(function(){return ne})),n.d(t,"q",(function(){return re})),n.d(t,"x",(function(){return ae}))},function(e,t,n){"use strict";var r,o,c,l,d;n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return f})),n.d(t,"b",(function(){return m})),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(c||(c={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(l||(l={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(d||(d={}));const h={float32:l,int32:o,bool:c,complex64:d};function f(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return h[e][t]}function m(e){return f(e,"int32")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({abs_:function(e){const t=Object(c.a)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.a.runKernel(o.B,e)}{const e={x:t};return r.a.runKernel(o.a,e)}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(566),h=n(545),f=n(550);const m=Object(h.b)({conv2d_:function(e,filter,t,n,h="NHWC",m=[1,1],y){const x=Object(c.a)(e,"x","conv2d","float32"),O=Object(c.a)(filter,"filter","conv2d","float32");let v=x,k=!1;3===x.rank&&(k=!0,v=Object(f.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),l.b(4===v.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${v.rank}.`)),l.b(4===O.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${O.rank}.`)),d.a("conv2d",n,y);const w="NHWC"===h?v.shape[3]:v.shape[1];l.b(w===O.shape[2],(()=>`Error in conv2d: depth of input (${w}) must match input depth for filter ${O.shape[2]}.`)),l.b(d.i(t,m),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${m}'`));const S={x:v,filter:O},I={strides:t,pad:n,dataFormat:h,dilations:m,dimRoundingMode:y},N=r.a.runKernel(o.D,S,I);return k?Object(f.a)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({greaterEqual_:function(a,b){let e=Object(l.a)(a,"a","greaterEqual","string_or_numeric"),t=Object(l.a)(b,"b","greaterEqual","string_or_numeric");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.rb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(558),d=n(545);const h=Object(d.b)({logicalAnd_:function(a,b){const e=Object(c.a)(a,"a","logicalAnd","bool"),t=Object(c.a)(b,"b","logicalAnd","bool");Object(l.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Hb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(599),c=n(594),l=n(626);function d(e,t="float32"){if("complex64"===t){const t=d(e,"float32"),n=Object(l.a)(e,"float32");return Object(c.a)(t,n)}const n=Object(o.D)(Object(o.O)(e),t);return r.a.makeTensor(n,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({split_:function(e,t,n=0){const l={x:Object(c.a)(e,"x","split")},d={numOrSizeSplits:t,axis:n};return r.a.runKernel(o.Uc,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({stack_:function(e,t=0){const n=Object(c.b)(e,"tensors","stack","string_or_numeric");l.b(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&l.b(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const d=n,h={axis:t};return r.a.runKernel(o.hc,d,h)}})},function(e,t,n){"use strict";n.d(t,"c",(function(){return v})),n.d(t,"b",(function(){return k})),n.d(t,"a",(function(){return w})),n.d(t,"d",(function(){return S}));var r=n(558),o=n(678),c=n(681),l=n(551),d=n(689),h=n(627),f=n(691),m=n(550),y=n(622),x=n(628),O=n(563);function v(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Object(l.a)(e,Object(x.a)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function k(e,t){let n=t;const o=r.getReductionAxes(e.shape,t.shape);return o.length>0&&(n=Object(O.a)(n,o)),Object(m.a)(n,e.shape)}function w(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Object(h.a)(e);if("elu"===t)return Object(o.a)(e);if("relu6"===t)return Object(f.a)(e);if("prelu"===t)return Object(d.a)(e,n);if("leakyrelu"===t)return Object(c.a)(e,r);if("sigmoid"===t)return Object(y.a)(e);throw new Error(`Unknown fused activation ${t}.`)}const S=(e,t)=>!(e>0)||"linear"===t},,,,,,,,,,,function(e,t,n){"use strict";function r(e,element,t){const n=function(e,t,n){return function(e,t,n){let r=0,o=e.length,c=0,l=!1;for(;r<o;){c=r+(o-r>>>1);const d=n(t,e[c]);d>0?r=c+1:(o=c,l=!d)}return l?r:-r-1}(e,t,n||o)}(e,element,t),r=n<0?-(n+1):n;e.splice(r,0,element)}function o(a,b){return a>b?1:a<b?-1:0}function c(e,t,n,r,o){return h(e,t,n,r,o,0)}function l(e,t,n,r,o,c){return h(e,t,n,r,o,0,!1,c,!0)}function d(e,t,n,r,o,c){return h(e,t,n,r,o,c,!0)}function h(e,t,n,o,c,l,d=!1,h=!1,x=!1){const O=[];for(let i=0;i<t.length;i++)t[i]>c&&O.push({score:t[i],boxIndex:i,suppressBeginIndex:0});O.sort(y);const v=l>0?-.5/l:0,k=[],w=[];for(;k.length<n&&O.length>0;){const t=O.pop(),{score:n,boxIndex:l,suppressBeginIndex:d}=t;if(n<c)break;let h=!1;for(let n=k.length-1;n>=d;--n){const r=f(e,l,k[n]);if(r>=o){h=!0;break}if(t.score=t.score*m(o,v,r),t.score<=c)break}t.suppressBeginIndex=k.length,h||(t.score===n?(k.push(l),w.push(t.score)):t.score>c&&r(O,t,y))}const S=k.length,I=n-S;h&&I>0&&(k.push(...new Array(I).fill(0)),w.push(...new Array(I).fill(0)));const N={selectedIndices:k};return d&&(N.selectedScores=w),x&&(N.validOutputs=S),N}function f(e,i,t){const n=e.subarray(4*i,4*i+4),r=e.subarray(4*t,4*t+4),o=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),l=Math.max(n[0],n[2]),d=Math.max(n[1],n[3]),h=Math.min(r[0],r[2]),f=Math.min(r[1],r[3]),m=Math.max(r[0],r[2]),y=Math.max(r[1],r[3]),x=(l-o)*(d-c),O=(m-h)*(y-f);if(x<=0||O<=0)return 0;const v=Math.max(o,h),k=Math.max(c,f),w=Math.min(l,m),S=Math.min(d,y),I=Math.max(w-v,0)*Math.max(S-k,0);return I/(x+O-I)}function m(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function y(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return d}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"d",(function(){return x})),n.d(t,"b",(function(){return y})),n.d(t,"e",(function(){return m})),n.d(t,"c",(function(){return f}));var r=n(599),o=n(584);const c="://";class l{constructor(){this.managers={}}static getInstance(){return null==l.instance&&(l.instance=new l),l.instance}static registerManager(e,t){Object(r.b)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(c)&&(e=e.slice(0,e.indexOf(c))),Object(r.b)(e.length>0,(()=>"scheme must not be an empty string."));const n=l.getInstance();Object(r.b)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=l.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(l.getInstance().managers)}}function d(e){if(-1===e.indexOf(c))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${l.getSchemes().join(",")}`);return{scheme:e.split(c)[0],path:e.split(c)[1]}}async function h(e,t,n=!1){Object(r.b)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const c=o.a.getLoadHandlers(e);Object(r.b)(c.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Object(r.b)(c.length<2,(()=>`Copying failed because more than one (${c.length}) load handlers for source URL ${e}.`));const h=c[0],f=o.a.getSaveHandlers(t);Object(r.b)(f.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Object(r.b)(f.length<2,(()=>`Copying failed because more than one (${c.length}) save handlers for destination URL ${t}.`));const m=f[0],y=d(e).scheme,x=d(e).path,O=y===d(e).scheme,v=await h.load();n&&O&&await l.getManager(y).removeModel(x);const k=await m.save(v);return n&&!O&&await l.getManager(y).removeModel(x),k.modelArtifactsInfo}async function f(){const e=l.getSchemes(),t={};for(const n of e){const e=await l.getManager(n).listModels();for(const path in e){t[n+c+path]=e[path]}}return t}async function m(e){const t=d(e);return l.getManager(t.scheme).removeModel(t.path)}async function y(e,t){return h(e,t,!1)}async function x(e,t){return h(e,t,!0)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({clone_:function(e){const t={x:Object(c.a)(e,"x","clone","string_or_numeric")};return r.a.runKernel(o.tb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({sigmoid_:function(e){const t={x:Object(c.a)(e,"x","sigmoid","float32")};return r.a.runKernel(o.Hc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({max_:function(e,t=null,n=!1){const l={x:Object(c.a)(e,"x","max")},d={reductionIndices:t,keepDims:n};return r.a.runKernel(o.Mb,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({tile_:function(e,t){const n=Object(c.a)(e,"x","tile","string_or_numeric");l.b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const d={x:n},h={reps:t};return r.a.runKernel(o.hd,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({log_:function(e){const t={x:Object(c.a)(e,"x","log","float32")};return r.a.runKernel(o.Eb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(547),o=n(599),c=n(594);function l(e,t="float32"){if("complex64"===t){const t=l(e,"float32"),n=l(e,"float32");return Object(c.a)(t,n)}const n=Object(o.F)(Object(o.O)(e),t);return r.a.makeTensor(n,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({relu_:function(e){const t={x:Object(c.a)(e,"x","relu")};return r.a.runKernel(o.sc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({step_:function(e,t=0){const n={x:Object(c.a)(e,"x","step")},l={alpha:t};return r.a.runKernel(o.Yc,n,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({unstack_:function(e,t=0){const n=Object(c.a)(e,"x","unstack","string_or_numeric");l.b(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const d={value:n},h={axis:t};return r.a.runKernel(o.md,d,h)}})},,,,,,,,,function(e,t,n){"use strict";n.d(t,"f",(function(){return m})),n.d(t,"e",(function(){return y})),n.d(t,"d",(function(){return x})),n.d(t,"g",(function(){return O})),n.d(t,"a",(function(){return v})),n.d(t,"b",(function(){return A})),n.d(t,"c",(function(){return r}));var r,o=n(543),c=n(690),l=n(751);function d(e){return e instanceof o.Tensor?{value:e.clone(),recurse:!1}:Object(l.e)(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class h{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class f extends h{constructor(){super(f.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let i=0;i<n;i++)t[i]=this.get(this.wrap(this.begin+i));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function m(e){return new k(e)}function y(e){return new w(e)}function x(e,t){return new _(e,t)}function O(e,t=r.FAIL){return new F(e,t)}f.INITIAL_CAPACITY=32;class v{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new $(this,e)}filter(e){return new T(this,e)}map(e){return new C(this,e)}mapAsync(e){return new E(this,e)}serialMapAsync(e){return new E(this,e).serial()}flatmap(e){return new R(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new j(this,e,t)}columnMajorBatch(e,t=!0,n=l.f){return this.rowMajorBatch(e,t).map((e=>Object(l.d)(e,n)))}concatenate(e,t){return new _(m([this,e]),t)}take(e){return e<0||null==e?this:new N(this,e)}skip(e){return e<0||null==e?this:new I(this,e)}prefetch(e){return new D(this,e)}shuffle(e,t){return new M(this,e,t)}serial(){return new S(this)}}class k extends v{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,Object(l.b)(t,d)),done:!1};var t}}class w extends v{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class S extends v{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class I extends v{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;o.dispose(e.value)}return this.upstream.next()}}class N extends v{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class j extends v{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class T extends v{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;o.dispose(e.value)}}}class C extends v{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=o.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),r=o.tensor_util.getTensorsInContainer(n);for(const e of t)o.tensor_util.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class $ extends v{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class E extends v{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=o.tensor_util.getTensorsInContainer(e.value),n=await this.transform(e.value),r=o.tensor_util.getTensorsInContainer(n);for(const e of t)o.tensor_util.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class A extends v{constructor(){super(),this.outputQueue=new f,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class R extends A{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=o.tensor_util.getTensorsInContainer(e.value),n=this.transform(e.value),r=o.tensor_util.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)o.tensor_util.isTensorInList(e,r)||e.dispose();return!0}}class _ extends v{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(r||(r={}));class F extends v{constructor(e,t=r.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const o=await Object(l.c)(this.iterators,(function(e){if(e instanceof v){return{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}}return{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case r.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case r.SHORTEST:return{value:null,done:!0};case r.LONGEST:}return this.count++,{value:o,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class D extends v{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new h(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class M extends D{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=c.alea(n||o.util.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(550);var h=n(545);const f=Object(h.b)({batchNorm_:function(e,t,n,h,f,m){null==m&&(m=.001);const y=Object(c.a)(e,"x","batchNorm"),x=Object(c.a)(t,"mean","batchNorm"),O=Object(c.a)(n,"variance","batchNorm");let v,k;null!=f&&(v=Object(c.a)(f,"scale","batchNorm")),null!=h&&(k=Object(c.a)(h,"offset","batchNorm")),l.b(x.rank===O.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l.b(null==k||x.rank===k.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l.b(null==v||x.rank===v.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const w=function(e){let t;return t=0===e.rank||1===e.rank?Object(d.a)(e,[1,1,1,e.size]):2===e.rank?Object(d.a)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Object(d.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(y),S={x:w,scale:v,offset:k,mean:x,variance:O},I={varianceEpsilon:m},N=r.a.runKernel(o.lb,S,I);return Object(d.a)(N,y.shape)}})},function(e,t,n){"use strict";n.d(t,"c",(function(){return h})),n.d(t,"b",(function(){return f})),n.d(t,"d",(function(){return m})),n.d(t,"f",(function(){return y})),n.d(t,"e",(function(){return x})),n.d(t,"h",(function(){return O})),n.d(t,"g",(function(){return v})),n.d(t,"a",(function(){return k}));var r=n(567),o=n(711),c=n(670);const l=Object(o.a)("kernelRegistry",(()=>new Map)),d=Object(o.a)("gradRegistry",(()=>new Map));function h(e,t){const n=w(e,t);return l.get(n)}function f(e){return d.get(e)}function m(e){const t=l.entries(),n=[];for(;;){const{done:r,value:o}=t.next();if(r)break;const[c,l]=o,[d]=c.split("_");d===e&&n.push(l)}return n}function y(e){const{kernelName:t,backendName:n}=e,r=w(t,n);l.has(r)&&c.b(`The kernel '${t}' for backend '${n}' is already registered`),l.set(r,e)}function x(e){const{kernelName:t}=e;d.has(t)&&Object(r.c)().getBool("DEBUG")&&c.b(`Overriding the gradient for '${t}'`),d.set(t,e)}function O(e,t){const n=w(e,t);if(!l.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);l.delete(n)}function v(e){if(!d.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);d.delete(e)}function k(e,t){m(e).forEach((e=>{y(Object.assign({},e,{backendName:t}))}))}function w(e,t){return`${t}_${e}`}},function(e,t,n){"use strict";(function(e){n(547);var t=n(712),r=n(567);const o=Object(r.c)();o.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),o.registerFlag("IS_BROWSER",(()=>t.isBrowser())),o.registerFlag("IS_NODE",(()=>void 0!==e&&void 0!==e.versions&&void 0!==e.versions.node)),o.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),o.registerFlag("PROD",(()=>!1)),o.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>o.getBool("DEBUG"))),o.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),o.registerFlag("IS_TEST",(()=>!1)),o.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),o.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),o.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),o.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1))}).call(this,n(217))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(546),o=n(593);function c(e,t,n){const c=Object(r.c)(e,n);return Object(o.a)(e,t,c,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(547),o=n(544);function c(e,t,n){const c={shape:e,value:t,dtype:n};return r.a.runKernel(o.gb,{},c)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(554),f=n(545);const m=Object(f.b)({maximum_:function(a,b){let e=Object(l.a)(a,"a","maximum"),t=Object(l.a)(b,"b","maximum");[e,t]=Object(c.makeTypesMatch)(e,t),"bool"===e.dtype&&(e=Object(h.a)(e,"int32"),t=Object(h.a)(t,"int32")),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Sb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({batchToSpaceND_:function(e,t,n){const d=Object(c.a)(e,"x","batchToSpaceND"),h=t.reduce(((a,b)=>a*b));l.b(d.rank>=1+t.length,(()=>`input rank is ${d.rank} but should be > than blockShape.length ${t.length}`)),l.b(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),l.b(d.shape[0]%h==0,(()=>`input tensor batch is ${d.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${h}`));const f={x:d},m={blockShape:t,crops:n};return r.a.runKernel(o.t,f,m)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(566),h=n(545),f=n(550);const m=Object(h.b)({depthwiseConv2d_:function(e,filter,t,n,h="NHWC",m=[1,1],y){const x=Object(c.a)(e,"x","depthwiseConv2d","float32"),O=Object(c.a)(filter,"filter","depthwiseConv2d","float32");let v=x,k=!1;3===x.rank&&(k=!0,v=Object(f.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),l.b(4===v.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${v.rank}.`)),l.b(4===O.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${O.rank}.`));const w="NHWC"===h?v.shape[3]:v.shape[1];l.b(w===O.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${w}) must match the inChannels dimension in filter ${O.shape[2]}.`)),d.a("depthwiseConv2d",n,y);const S={x:v,filter:O},I={strides:t,pad:n,dataFormat:h,dilations:m,dimRoundingMode:y},N=r.a.runKernel(o.Q,S,I);return k?Object(f.a)(N,[N.shape[1],N.shape[2],N.shape[3]]):N}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({equal_:function(a,b){let e=Object(l.a)(a,"a","equal","string_or_numeric"),t=Object(l.a)(b,"b","equal","string_or_numeric");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.ab,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return S}));var r=n(546),o=n(599),c=n(601),l=n(581),d=n(623),h=n(679),f=n(545),m=n(595),y=n(550),x=n(559),O=n(579),v=n(565),k=n(563);function w(e,p,t=null){if(0===e.rank)return Object(c.a)(e);if(1!==e.rank&&null===t)return w(Object(y.a)(e,[-1]),p,t);if(1===e.rank||"number"==typeof t||Array.isArray(t)&&1===t.length){if(1===p)return Object(k.a)(Object(c.a)(e),t);if(p===1/0)return Object(d.a)(Object(c.a)(e),t);if(p===-1/0)return Object(h.a)(Object(c.a)(e),t);if("euclidean"===p||2===p)return Object(O.a)(Object(k.a)(Object(m.a)(Object(c.a)(e),Object(x.a)(2,"int32")),t));throw new Error(`Error in norm: invalid ord value: ${p}`)}if(Array.isArray(t)&&2===t.length){if(1===p)return Object(d.a)(Object(k.a)(Object(c.a)(e),t[0]),t[1]-1);if(p===1/0)return Object(d.a)(Object(k.a)(Object(c.a)(e),t[1]),t[0]);if(p===-1/0)return Object(h.a)(Object(k.a)(Object(c.a)(e),t[1]),t[0]);if("fro"===p||"euclidean"===p)return Object(O.a)(Object(k.a)(Object(v.a)(e),t));throw new Error(`Error in norm: invalid ord value: ${p}`)}throw new Error(`Error in norm: invalid axis: ${t}`)}const S=Object(f.b)({norm_:function(e,t="euclidean",n=null,c=!1){const d=w(e=Object(r.a)(e,"x","norm"),t,n);let h=d.shape;if(c){const t=Object(o.I)(n,e.shape);h=l.e(d.shape,t)}return Object(y.a)(d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({expandDims_:function(e,t=0){const n=Object(c.a)(e,"x","expandDims","string_or_numeric");l.b(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const d={input:n},h={dim:t};return r.a.runKernel(o.db,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({gather_:function(e,t,n=0,l=0){const d={x:Object(c.a)(e,"x","gather"),indices:Object(c.a)(t,"indices","gather","int32")},h={axis:n,batchDims:l};return r.a.runKernel(o.pb,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({imag_:function(input){const e={input:Object(c.a)(input,"input","imag")};return r.a.runKernel(o.ub,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({logicalNot_:function(e){const t={x:Object(c.a)(e,"x","logicalNot","bool")};return r.a.runKernel(o.Ib,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({mean_:function(e,t=null,n=!1){const l={x:Object(c.a)(e,"x","mean")},d={axis:t,keepDims:n};return r.a.runKernel(o.Tb,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({spaceToBatchND_:function(e,t,n){const d=Object(c.a)(e,"x","spaceToBatchND");l.b(d.rank>=1+t.length,(()=>`input rank ${d.rank} should be > than [blockShape] ${t.length}`)),l.b(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),l.b(d.shape.reduce(((a,b,i)=>i>0&&i<=t.length?a&&(b+n[i-1][0]+n[i-1][1])%t[i-1]==0:a),!0),(()=>`input spatial dimensions ${d.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const h={x:d},f={blockShape:t,paddings:n};return r.a.runKernel(o.Oc,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({real_:function(input){const e={input:Object(c.a)(input,"input","real")};return r.a.runKernel(o.pc,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(546),o=n(599),c=n(545),l=n(550);const d=Object(c.b)({squeeze_:function(e,t){const n=Object(r.a)(e,"x","squeeze","string_or_numeric");return Object(l.a)(n,Object(o.Q)(n.shape,t).newShape)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"validateUpdateShape",(function(){return o})),n.d(t,"validateInput",(function(){return c})),n.d(t,"calculateShapes",(function(){return l}));var r=n(599);function o(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,o=t.rank>1?t.rank-1:1,c=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(c+` update.rank < ${o}. `);if(e.length<r+(n.rank-o))throw new Error(c+` Output shape length < ${r+(n.rank-o)}`);if(n.rank!==o+e.length-r)throw new Error(c+" update.rank != "+(o+e.length-r));for(let e=0;e<o;++e)if(n.shape[e]!==t.shape[e])throw new Error(c+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-o;++t)if(n.shape[t+o]!==e[t+r])throw new Error(c+` updates.shape[${t+o}] (${n.shape[t+o]}) != shape[${t+o}] (${e[t+o]})`)}function c(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}o(n,t,e)}function l(e,t,n){const o=t.shape.length,c=o>1?t.shape[o-1]:1,l=n.length;let d=1;for(let i=c;i<l;++i)d*=n[i];const h=c<1?1:c;return{sliceRank:c,numUpdates:Object(r.O)(t.shape)/h,sliceSize:d,strides:[...Object(r.j)(n.slice(0,c)),1],outputSize:Object(r.O)(n)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"assertParamsValid",(function(){return o})),n.d(t,"maskToAxes",(function(){return c})),n.d(t,"computeOutShape",(function(){return l})),n.d(t,"stridesWithElidedDims",(function(){return d})),n.d(t,"getNormalizedAxes",(function(){return m})),n.d(t,"startIndicesWithElidedDims",(function(){return y})),n.d(t,"stopIndicesWithElidedDims",(function(){return x})),n.d(t,"stridesForAxis",(function(){return O})),n.d(t,"startForAxis",(function(){return v})),n.d(t,"stopForAxis",(function(){return k})),n.d(t,"isSliceContinous",(function(){return w})),n.d(t,"computeFlatOffset",(function(){return S})),n.d(t,"parseSliceParams",(function(){return I})),n.d(t,"sliceInfo",(function(){return N}));var r=n(599);function o(input,e,t){const n=input.shape.length;r.b(n===e.length,(()=>`Error in slice${n}D: Length of begin ${e} must match the rank of the array (${n}).`)),r.b(n===t.length,(()=>`Error in slice${n}D: Length of size ${t} must match the rank of the array (${n}).`));for(let i=0;i<n;++i)r.b(e[i]+t[i]<=input.shape[i],(()=>`Error in slice${n}D: begin[${i}] + size[${i}] (${e[i]+t[i]}) would overflow input.shape[${i}] (${input.shape[i]})`))}function c(mask){const e=[];let t=0;for(;mask>0;)1&mask&&e.push(t),mask/=2,t++;return e}function l(e,t,n){const r=[];for(let o=0;o<e.length;o++)r[o]=Math.ceil((t[o]-e[o])/n[o]);return r}function d(e,t,n,r){const o=[...e];for(let i=o.length;i<r.length;i++)o.push(1);for(let i=0;i<n;i++)0===i?o[t]=1:(o.splice(t,0,1),o.pop());return o}function h(e,t,n){return n<=e?n:n-(t-1)}function f(e,t){const n=[];for(let i=0;i<e;i++)n.push(t+i);return n}function m(e,t,n,r,o,c,l,h,f){const m=e.length;let w=new Array(m),S=new Array(m),I=new Array(m);if(t.length&&n>0){const f=t[0],m=n+1;w=y(l,f,m,r,e),S=x(h,f,m,o,e),I=d(c,f,m,e)}else for(let t=0;t<m;t++)w[t]=v(l,r,c,e,t,f),S[t]=k(h,o,c,e,t,f),I[t]=O(c,t,f);return{begin:w,end:S,strides:I}}function y(e,t,n,r,o){const c=[...o],l=f(n,t);for(let o=0;o<c.length;o++)if(l.indexOf(o)>-1)c[o]=0;else{const l=h(t,n,o);let d=r[l];e&1<<l&&(d=0),c[o]=d}return c}function x(e,t,n,o,c){const l=[...c],d=f(n,t);for(let r=0;r<l.length;r++)if(d.indexOf(r)>-1)l[r]=Number.MAX_SAFE_INTEGER;else{const c=h(t,n,r);let d=o[c];e&1<<c&&(d=Number.MAX_SAFE_INTEGER),l[r]=d}for(let i=0;i<l.length;i++){const e=c[i];l[i]<0&&(l[i]+=e),l[i]=r.i(0,l[i],c[i])}return l}function O(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function v(e,t,n,o,c,l){let d=t[c];const h=n[c]||1;(e&1<<c||l&1<<c||null==d)&&(d=h>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const f=o[c];return d<0&&(d+=f),d=r.i(0,d,f-1),d}function k(e,t,n,o,c,l){let d=t[c];const h=n[c]||1;(e&1<<c||l&1<<c||null==d)&&(d=h>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const f=o[c];return d<0&&(d+=f),d=h>0?r.i(0,d,f):r.i(-1,d,f-1),d}function w(e,t,n){let r=n.length;for(let i=0;i<n.length;i++)if(n[i]>1){r=i;break}for(let i=r+1;i<n.length;i++)if(t[i]>0||n[i]!==e[i])return!1;return!0}function S(e,t){let n=e.length>0?e[e.length-1]:1;for(let i=0;i<e.length-1;i++)n+=e[i]*t[i];return n}function I(e,t,n){let o;const c=e.shape.length;let l;return o="number"==typeof t?[t,...new Array(c-1).fill(0)]:t.length<c?t.concat(new Array(c-t.length).fill(0)):t.slice(),o.forEach((e=>{r.b(-1!==e,(()=>"slice() does not support negative begin indexing."))})),l=null==n?new Array(c).fill(-1):"number"==typeof n?[n,...new Array(c-1).fill(-1)]:n.length<c?n.concat(new Array(c-n.length).fill(-1)):n,l=l.map(((t,i)=>t>=0?t:(r.b(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${i}.`)),e.shape[i]-o[i]))),[o,l]}function N(e,t,n,r,o,c,l,d,h){let f;if(null==r?(f=new Array(t.length),f.fill(1)):f=r,null!=l&&0!=(l&l-1))throw new Error("Multiple ellipses in slice is not allowed.");let m=!1;const y={dims:f.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:f.slice(),beginMask:o,endMask:c,ellipsisMask:l,newAxisMask:d,shrinkAxisMask:h};for(let i=0;i<y.dims;i++)m&&0!=(1<<i&d)&&y.numAddAxisAfterEllipsis++,1<<i&l&&(m=!0);m||(y.ellipsisMask|=1<<y.dims,y.dims++);const x={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let i=0;i<e.dims;i++)if(1<<i&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-i)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=i}else if(1<<i&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[i]),null!=e.end&&(t.end[n]=e.end[i]),t.strides[n]=e.strides[i],e.beginMask&1<<i&&(t.beginMask|=1<<n),e.endMask&1<<i&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<i?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(i)),t.inputShapeGatherIndicesSparse[n]=i,n++}}(y,x);let O=!0,v=!0,k=!0;const w=[],S=[];for(let i=0;i<e.length;++i){if(0===x.strides[i])throw Error(`strides[${i}] must be non-zero`);const t=!!(x.shrinkAxisMask&1<<i),n=e[i];if(-1===n){w.push(t?1:-1);continue}const r=[x.beginMask&1<<i,x.endMask&1<<i],o=[x.strides[i]>0?0:-1,x.strides[i]>0?n:n-1];if(t&&x.strides[i]<=0)throw Error("only stride 1 allowed on non-range indexing.");k=k&&1===x.strides[i];const c=!!(x.beginMask&1<<i&&x.endMask&1<<i);if(x.beginValid&&x.endValid){if(t){const e=x.begin[i]<0?n+x.begin[i]:x.begin[i];if(x.begin[i]=e,x.end[i]=x.begin[i]+1,e<0||e>=n)throw Error(`slice index ${x.begin[i]} of dimension ${i} out of bounds.`)}else x.begin[i]=j(x.begin[i],0,x.strides[i],n,r,o),x.end[i]=j(x.end[i],1,x.strides[i],n,r,o);const e=1===x.strides[i]&&0===x.begin[i]&&x.end[i]===n;O=O&&e,v=v&&(0===i&&1===x.strides[i]||e)}else O=O&&1===x.strides[i]&&c,v=v&&(0===i&&1===x.strides[i]||c);let l,d=!1;if(x.beginValid&&x.endValid?(l=x.end[i]-x.begin[i],d=!0):t?(l=1,d=!0):c&&n>=0&&(l=x.strides[i]<0?-n:n,d=!0),d){let e;e=0===l||l<0!=x.strides[i]<0?0:Math.trunc(l/x.strides[i])+(l%x.strides[i]!=0?1:0),w.push(e)}else w.push(-1)}for(let e=0;e<x.finalShapeGatherIndices.length;++e){const t=x.finalShapeGatherIndices[e];t>=0?S.push(w[t]):-2===t&&S.push(1)}return{finalShapeSparse:S.filter(((e,i)=>-2!==x.finalShapeGatherIndices[i])),finalShape:S,isIdentity:O,sliceDim0:v,isSimpleSlice:k,begin:x.begin,end:x.end,strides:x.strides}}function j(e,t,n,r,o,c){if(o[t])return n>0?c[t]:c[t+1&1];{const t=e<0?r+e:e;return t<c[0]?c[0]:t>c[1]?c[1]:t}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));const r={};function o(e){return r[e]}},,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return c}));var r=n(567);function o(...e){Object(r.c)().getBool("IS_TEST")||Object(r.c)().getBool("PROD")||console.warn(...e)}function c(...e){Object(r.c)().getBool("IS_TEST")||Object(r.c)().getBool("PROD")||console.log(...e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class o{refCount(e){return c("refCount")}incRef(e){return c("incRef")}timerAvailable(){return!0}time(e){return c("time")}read(e){return c("read")}readSync(e){return c("readSync")}readToGPU(e,t){return c("readToGPU")}numDataIds(){return c("numDataIds")}disposeData(e,t){return c("disposeData")}write(e,t,n){return c("write")}move(e,t,n,r,o){return c("move")}memory(){return c("memory")}floatPrecision(){return c("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return c("dispose")}}function c(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({floorDiv_:function(a,b){let e=Object(l.a)(a,"a","floorDiv"),t=Object(l.a)(b,"b","floorDiv");[e,t]=Object(c.makeTypesMatch)(e,t);const n={a:e,b:t};return r.a.runKernel(o.jb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(554),h=n(566),f=n(545),m=n(550);const y=Object(f.b)({avgPool_:function(e,t,n,f,y){const x=Object(c.a)(e,"x","avgPool","float32");l.b(h.i(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let O=x,v=!1;3===x.rank&&(v=!0,O=Object(m.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),l.b(4===O.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${O.rank}.`)),h.a("avgPool",f,y);const k={x:O},w={filterSize:t,strides:n,pad:f,dimRoundingMode:y};let S=r.a.runKernel(o.o,k,w);return S=Object(d.a)(S,x.dtype),v?Object(m.a)(S,[S.shape[1],S.shape[2],S.shape[3]]):S}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(621),d=n(545),h=n(550);const f=Object(d.b)({broadcastTo_:function(e,t){let input=Object(c.a)(e,"broadcastTo","x");const n=input.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<input.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${input.rank}.`);if(t.length>input.rank){const e=input.shape.slice();for(;e.length<t.length;)e.unshift(1);input=Object(h.a)(input,e)}const d=input.shape,f=Array.from(t);for(let i=t.length-1;i>=0;i--)if(d[i]===t[i])f[i]=1;else if(1!==input.shape[i])throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${t}].`);if(0===f.map(((e,i)=>e>1?i:-1)).filter((i=>i>=0)).length)return Object(l.a)(input);const m={x:input},y={reps:f};return r.a.runKernel(o.hd,m,y)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({cos_:function(e){const t={x:Object(c.a)(e,"x","cos","float32")};return r.a.runKernel(o.J,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({cumprod_:function(e,t=0,n=!1,l=!1){const d={x:Object(c.a)(e,"x","cumprod")},h={axis:t,exclusive:n,reverse:l};return r.a.runKernel(o.M,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({cumsum_:function(e,t=0,n=!1,l=!1){const d={x:Object(c.a)(e,"x","cumsum")},h={axis:t,exclusive:n,reverse:l};return r.a.runKernel(o.N,d,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({elu_:function(e){const t={x:Object(c.a)(e,"x","elu","float32")};return r.a.runKernel(o.Y,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({min_:function(e,t=null,n=!1){const l={x:Object(c.a)(e,"x","min")},d={axis:t,keepDims:n};return r.a.runKernel(o.Ub,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({floor_:function(e){const t={x:Object(c.a)(e,"x","floor","float32")};return r.a.runKernel(o.ib,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({leakyRelu_:function(e,t=.2){const n={x:Object(c.a)(e,"x","leakyRelu")},l={alpha:t};return r.a.runKernel(o.Ab,n,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({less_:function(a,b){let e=Object(l.a)(a,"a","less","string_or_numeric"),t=Object(l.a)(b,"b","less","string_or_numeric");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Bb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(546),o=n(599),c=n(561),l=n(581),d=n(585),h=n(625),f=n(623),m=n(545),y=n(550),x=n(557),O=n(563);const v=Object(m.b)({logSumExp_:function(e,t=null,n=!1){const m=Object(r.a)(e,"x","logSumExp"),v=Object(o.I)(t,m.shape),k=Object(f.a)(m,v,!0),a=Object(x.a)(m,k),b=Object(d.a)(a),w=Object(O.a)(b,v),S=Object(h.a)(w),I=Object(c.a)(Object(y.a)(k,S.shape),S);if(n){const e=Object(l.e)(I.shape,v);return Object(y.a)(I,e)}return I}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(558),d=n(545);const h=Object(d.b)({logicalOr_:function(a,b){const e=Object(c.a)(a,"a","logicalOr","bool"),t=Object(c.a)(b,"b","logicalOr","bool");Object(l.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Jb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(566),h=n(545),f=n(550);const m=Object(h.b)({maxPool_:function(e,t,n,h,m){const y=Object(c.a)(e,"x","maxPool");let x=y,O=!1;3===y.rank&&(O=!0,x=Object(f.a)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),l.b(4===x.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${x.rank}.`)),l.b(d.i(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),d.a("maxPool",h,m);const v={x:x},k={filterSize:t,strides:n,pad:h,dimRoundingMode:m},w=r.a.runKernel(o.Nb,v,k);return O?Object(f.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(554),f=n(545);const m=Object(f.b)({minimum_:function(a,b){let e=Object(l.a)(a,"a","minimum"),t=Object(l.a)(b,"b","minimum");[e,t]=Object(c.makeTypesMatch)(e,t),"bool"===e.dtype&&(e=Object(h.a)(e,"int32"),t=Object(h.a)(t,"int32")),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Vb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({notEqual_:function(a,b){let e=Object(l.a)(a,"a","notEqual","string_or_numeric"),t=Object(l.a)(b,"b","notEqual","string_or_numeric");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.ec,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({oneHot_:function(e,t,n=1,l=0,d="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const h={indices:Object(c.a)(e,"indices","oneHot","int32")},f={dtype:d,depth:t,onValue:n,offValue:l};return r.a.runKernel(o.fc,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({prelu_:function(e,t){const n={x:Object(c.a)(e,"x","prelu"),alpha:Object(c.a)(t,"alpha","prelu")};return r.a.runKernel(o.lc,n)}})},function(e,t,n){var r=n(938),o=n(939),c=n(940),l=n(941),d=n(942),h=n(943),f=n(944);f.alea=r,f.xor128=o,f.xorwow=c,f.xorshift7=l,f.xor4096=d,f.tychei=h,e.exports=f},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({relu6_:function(e){const t={x:Object(c.a)(e,"x","relu6")};return r.a.runKernel(o.tc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(599),l=n(545);const d=Object(l.b)({fft_:function(input){Object(c.b)("complex64"===input.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${input.dtype}.`));const e={input:input};return r.a.runKernel(o.fb,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(599),l=n(545);const d=Object(l.b)({ifft_:function(input){Object(c.b)("complex64"===input.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${input.dtype}.`));const e={input:input};return r.a.runKernel(o.sb,e)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return k}));var r=n(599),o=n(594),c=n(573),l=n(651),d=n(545),h=n(655),f=n(550),m=n(571),y=n(606),x=n(626),O=n(560),v=n(692);const k=Object(d.b)({rfft_:function(input,e){Object(r.b)("float32"===input.dtype,(()=>`The dtype for rfft() must be real value but got ${input.dtype}`));let t=input.shape[input.shape.length-1];const n=input.size/t;let d;if(null!=e&&e<t){const n=input.shape.map((e=>0)),r=input.shape.map((e=>e));r[input.shape.length-1]=e,d=Object(m.a)(input,n,r),t=e}else if(null!=e&&e>t){const n=input.shape.map((e=>e));n[input.shape.length-1]=e-t,d=Object(c.a)([input,Object(x.a)(n)],input.shape.length-1),t=e}else d=input;const k=Object(O.a)(d),w=Object(f.a)(Object(o.a)(d,k),[n,t]),S=Object(v.a)(w),I=Math.floor(t/2)+1,N=Object(h.a)(S),j=Object(l.a)(S),T=Object(y.a)(N,[I,t-I],N.shape.length-1),C=Object(y.a)(j,[I,t-I],j.shape.length-1),$=d.shape.slice();return $[d.shape.length-1]=I,Object(f.a)(Object(o.a)(T[0],C[0]),$)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(558),h=n(545);const f=Object(h.b)({squaredDifference_:function(a,b){let e=Object(l.a)(a,"a","squaredDifference"),t=Object(l.a)(b,"b","squaredDifference");[e,t]=Object(c.makeTypesMatch)(e,t),Object(d.assertAndGetBroadcastShape)(e.shape,t.shape);const n={a:e,b:t};return r.a.runKernel(o.Xc,n,{})}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({unsortedSegmentSum_:function(e,t,n){const d=Object(c.a)(e,"x","unsortedSegmentSum"),h=Object(c.a)(t,"segmentIds","unsortedSegmentSum","int32");Object(l.b)(Object(l.v)(n),(()=>"numSegments must be of dtype int"));const f={x:d,segmentIds:h},m={numSegments:n};return r.a.runKernel(o.nd,f,m)}})},,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return P})),n.d(t,"b",(function(){return B}));var r={};n.r(r),n.d(r,"abs",(function(){return f.b})),n.d(r,"acos",(function(){return f.c})),n.d(r,"acosh",(function(){return f.d})),n.d(r,"add",(function(){return f.e})),n.d(r,"addN",(function(){return f.f})),n.d(r,"all",(function(){return f.g})),n.d(r,"any",(function(){return f.h})),n.d(r,"argMax",(function(){return f.i})),n.d(r,"argMin",(function(){return f.j})),n.d(r,"asin",(function(){return f.k})),n.d(r,"asinh",(function(){return f.l})),n.d(r,"atan",(function(){return f.m})),n.d(r,"atan2",(function(){return f.n})),n.d(r,"atanh",(function(){return f.o})),n.d(r,"avgPool",(function(){return f.p})),n.d(r,"avgPool3d",(function(){return f.q})),n.d(r,"basicLSTMCell",(function(){return f.r})),n.d(r,"batchToSpaceND",(function(){return f.w})),n.d(r,"batchNorm",(function(){return f.s})),n.d(r,"batchNorm2d",(function(){return f.t})),n.d(r,"batchNorm3d",(function(){return f.u})),n.d(r,"batchNorm4d",(function(){return f.v})),n.d(r,"bincount",(function(){return f.x})),n.d(r,"broadcastArgs",(function(){return f.z})),n.d(r,"broadcastTo",(function(){return f.A})),n.d(r,"buffer",(function(){return f.B})),n.d(r,"cast",(function(){return f.C})),n.d(r,"ceil",(function(){return f.D})),n.d(r,"clipByValue",(function(){return f.E})),n.d(r,"clone",(function(){return f.F})),n.d(r,"complex",(function(){return f.G})),n.d(r,"concat",(function(){return f.H})),n.d(r,"concat1d",(function(){return f.I})),n.d(r,"concat2d",(function(){return f.J})),n.d(r,"concat3d",(function(){return f.K})),n.d(r,"concat4d",(function(){return f.L})),n.d(r,"conv1d",(function(){return f.M})),n.d(r,"conv2d",(function(){return f.N})),n.d(r,"conv2dTranspose",(function(){return f.O})),n.d(r,"conv3d",(function(){return f.P})),n.d(r,"conv3dTranspose",(function(){return f.Q})),n.d(r,"cos",(function(){return f.R})),n.d(r,"cosh",(function(){return f.S})),n.d(r,"cumprod",(function(){return f.U})),n.d(r,"cumsum",(function(){return f.V})),n.d(r,"denseBincount",(function(){return f.W})),n.d(r,"depthToSpace",(function(){return f.X})),n.d(r,"depthwiseConv2d",(function(){return f.Y})),n.d(r,"diag",(function(){return f.Z})),n.d(r,"dilation2d",(function(){return f.ab})),n.d(r,"div",(function(){return f.bb})),n.d(r,"divNoNan",(function(){return f.cb})),n.d(r,"dot",(function(){return f.db})),n.d(r,"einsum",(function(){return f.fb})),n.d(r,"elu",(function(){return f.gb})),n.d(r,"equal",(function(){return f.ib})),n.d(r,"erf",(function(){return f.jb})),n.d(r,"euclideanNorm",(function(){return f.kb})),n.d(r,"exp",(function(){return f.lb})),n.d(r,"expandDims",(function(){return f.mb})),n.d(r,"expm1",(function(){return f.nb})),n.d(r,"eye",(function(){return f.ob})),n.d(r,"fill",(function(){return f.qb})),n.d(r,"floor",(function(){return f.rb})),n.d(r,"floorDiv",(function(){return f.sb})),n.d(r,"gather",(function(){return f.ub})),n.d(r,"greater",(function(){return f.wb})),n.d(r,"greaterEqual",(function(){return f.xb})),n.d(r,"imag",(function(){return f.zb})),n.d(r,"isFinite",(function(){return f.Db})),n.d(r,"isInf",(function(){return f.Eb})),n.d(r,"isNaN",(function(){return f.Fb})),n.d(r,"leakyRelu",(function(){return f.Gb})),n.d(r,"less",(function(){return f.Hb})),n.d(r,"lessEqual",(function(){return f.Ib})),n.d(r,"linspace",(function(){return f.Kb})),n.d(r,"localResponseNormalization",(function(){return f.Lb})),n.d(r,"log",(function(){return f.Mb})),n.d(r,"log1p",(function(){return f.Nb})),n.d(r,"logSigmoid",(function(){return f.Ob})),n.d(r,"logSoftmax",(function(){return f.Pb})),n.d(r,"logSumExp",(function(){return f.Qb})),n.d(r,"logicalAnd",(function(){return f.Rb})),n.d(r,"logicalNot",(function(){return f.Sb})),n.d(r,"logicalOr",(function(){return f.Tb})),n.d(r,"logicalXor",(function(){return f.Ub})),n.d(r,"lowerBound",(function(){return f.Wb})),n.d(r,"matMul",(function(){return f.Xb})),n.d(r,"max",(function(){return f.Yb})),n.d(r,"maxPool",(function(){return f.Zb})),n.d(r,"maxPool3d",(function(){return f.ac})),n.d(r,"maxPoolWithArgmax",(function(){return f.bc})),n.d(r,"maximum",(function(){return f.cc})),n.d(r,"mean",(function(){return f.dc})),n.d(r,"meshgrid",(function(){return f.ec})),n.d(r,"min",(function(){return f.fc})),n.d(r,"minimum",(function(){return f.gc})),n.d(r,"mirrorPad",(function(){return f.hc})),n.d(r,"mod",(function(){return f.ic})),n.d(r,"moments",(function(){return f.jc})),n.d(r,"mul",(function(){return f.lc})),n.d(r,"multiRNNCell",(function(){return f.mc})),n.d(r,"multinomial",(function(){return f.nc})),n.d(r,"neg",(function(){return f.oc})),n.d(r,"notEqual",(function(){return f.qc})),n.d(r,"oneHot",(function(){return f.rc})),n.d(r,"ones",(function(){return f.sc})),n.d(r,"onesLike",(function(){return f.tc})),n.d(r,"outerProduct",(function(){return f.vc})),n.d(r,"pad",(function(){return f.wc})),n.d(r,"pad1d",(function(){return f.xc})),n.d(r,"pad2d",(function(){return f.yc})),n.d(r,"pad3d",(function(){return f.zc})),n.d(r,"pad4d",(function(){return f.Ac})),n.d(r,"pool",(function(){return f.Bc})),n.d(r,"pow",(function(){return f.Cc})),n.d(r,"prelu",(function(){return f.Dc})),n.d(r,"print",(function(){return f.Ec})),n.d(r,"prod",(function(){return f.Fc})),n.d(r,"raggedTensorToTensor",(function(){return f.Gc})),n.d(r,"rand",(function(){return f.Hc})),n.d(r,"randomGamma",(function(){return f.Ic})),n.d(r,"randomNormal",(function(){return f.Jc})),n.d(r,"randomStandardNormal",(function(){return f.Kc})),n.d(r,"randomUniform",(function(){return f.Lc})),n.d(r,"range",(function(){return f.Mc})),n.d(r,"real",(function(){return f.Nc})),n.d(r,"reciprocal",(function(){return f.Oc})),n.d(r,"relu",(function(){return f.Pc})),n.d(r,"relu6",(function(){return f.Qc})),n.d(r,"reshape",(function(){return f.Rc})),n.d(r,"reverse",(function(){return f.Sc})),n.d(r,"reverse1d",(function(){return f.Tc})),n.d(r,"reverse2d",(function(){return f.Uc})),n.d(r,"reverse3d",(function(){return f.Vc})),n.d(r,"reverse4d",(function(){return f.Wc})),n.d(r,"round",(function(){return f.Yc})),n.d(r,"rsqrt",(function(){return f.Zc})),n.d(r,"scalar",(function(){return f.ad})),n.d(r,"selu",(function(){return f.dd})),n.d(r,"separableConv2d",(function(){return f.ed})),n.d(r,"setdiff1dAsync",(function(){return f.fd})),n.d(r,"sigmoid",(function(){return f.gd})),n.d(r,"sign",(function(){return f.hd})),n.d(r,"sin",(function(){return f.jd})),n.d(r,"sinh",(function(){return f.kd})),n.d(r,"slice",(function(){return f.ld})),n.d(r,"slice1d",(function(){return f.md})),n.d(r,"slice2d",(function(){return f.nd})),n.d(r,"slice3d",(function(){return f.od})),n.d(r,"slice4d",(function(){return f.pd})),n.d(r,"softmax",(function(){return f.qd})),n.d(r,"softplus",(function(){return f.rd})),n.d(r,"spaceToBatchND",(function(){return f.sd})),n.d(r,"fft",(function(){return f.pb})),n.d(r,"ifft",(function(){return f.yb})),n.d(r,"irfft",(function(){return f.Cb})),n.d(r,"rfft",(function(){return f.Xc})),n.d(r,"split",(function(){return f.wd})),n.d(r,"sqrt",(function(){return f.xd})),n.d(r,"square",(function(){return f.yd})),n.d(r,"squaredDifference",(function(){return f.zd})),n.d(r,"squeeze",(function(){return f.Ad})),n.d(r,"stack",(function(){return f.Bd})),n.d(r,"step",(function(){return f.Cd})),n.d(r,"stridedSlice",(function(){return f.Dd})),n.d(r,"sub",(function(){return f.Fd})),n.d(r,"sum",(function(){return f.Gd})),n.d(r,"tan",(function(){return f.Hd})),n.d(r,"tanh",(function(){return f.Id})),n.d(r,"tensor",(function(){return f.Jd})),n.d(r,"tensor1d",(function(){return f.Kd})),n.d(r,"tensor2d",(function(){return f.Ld})),n.d(r,"tensor3d",(function(){return f.Md})),n.d(r,"tensor4d",(function(){return f.Nd})),n.d(r,"tensor5d",(function(){return f.Od})),n.d(r,"tensor6d",(function(){return f.Pd})),n.d(r,"tile",(function(){return f.Qd})),n.d(r,"topk",(function(){return f.Rd})),n.d(r,"truncatedNormal",(function(){return f.Td})),n.d(r,"unique",(function(){return f.Ud})),n.d(r,"unsortedSegmentSum",(function(){return f.Vd})),n.d(r,"unstack",(function(){return f.Wd})),n.d(r,"upperBound",(function(){return f.Xd})),n.d(r,"variable",(function(){return f.Yd})),n.d(r,"where",(function(){return f.Zd})),n.d(r,"whereAsync",(function(){return f.ae})),n.d(r,"zeros",(function(){return f.be})),n.d(r,"zerosLike",(function(){return f.ce})),n.d(r,"booleanMaskAsync",(function(){return f.y})),n.d(r,"transpose",(function(){return f.Sd})),n.d(r,"norm",(function(){return f.pc})),n.d(r,"movingAverage",(function(){return f.kc})),n.d(r,"scatterND",(function(){return f.bd})),n.d(r,"searchSorted",(function(){return f.cd})),n.d(r,"sparseToDense",(function(){return f.ud})),n.d(r,"gatherND",(function(){return f.vb})),n.d(r,"dropout",(function(){return f.eb})),n.d(r,"enclosingPowerOfTwo",(function(){return f.hb})),n.d(r,"cosineWindow",(function(){return f.T})),n.d(r,"inTopKAsync",(function(){return f.Bb})),n.d(r,"op",(function(){return f.uc})),n.d(r,"OP_SCOPE_SUFFIX",(function(){return f.a})),n.d(r,"image",(function(){return f.Ab})),n.d(r,"linalg",(function(){return f.Jb})),n.d(r,"losses",(function(){return f.Vb})),n.d(r,"spectral",(function(){return f.vd})),n.d(r,"fused",(function(){return f.tb})),n.d(r,"signal",(function(){return f.id})),n.d(r,"sparse",(function(){return f.td})),n.d(r,"string",(function(){return f.Ed}));var o=n(543);Object(o.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}));var c=n(823),l=n(564);class d{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Object(l.e)(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Object(l.e)(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(c.f)(this.node.rawAttrs,e,t);if(null!=n.s)return Object(c.i)(this.node.rawAttrs,e,t);if(null!=n.b)return Object(c.c)(this.node.rawAttrs,e,t);if(null!=n.shape)return Object(c.k)(this.node.rawAttrs,e,t);if(null!=n.type)return Object(c.e)(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(c.g)(this.node.rawAttrs,e,t);if(null!=n.list.s)return Object(c.h)(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Object(c.j)(this.node.rawAttrs,e,t);if(null!=n.list.b)return Object(c.b)(this.node.rawAttrs,e,t);if(null!=n.list.type)return Object(c.d)(this.node.rawAttrs,e,t)}return t}}var h=n(659),f=n(552);function m(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){o.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let i=0;i<e.length;i++){const r=e[i],c=t[i];o.util.assert(r<0||c<0||r===c,(()=>n+` Shapes ${e} and ${t} must match`))}}}function y(e){return"number"!=typeof e&&!e.some((e=>e<0))}function x(e,t,n){let r=O(e,n);const o=!y(r);if(o&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(o&&t.forEach((e=>{r=O(e.shape,r)})),!y(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function O(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let i=0;i<e.length;++i){const r=e[i],o=t[i];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[i]=r>=0?r:o}return n}class v{constructor(e,t,n,r,c,l,d){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=c,this.dynamicSize=l,this.clearAfterRead=d,this.tensors=[],this.closed_=!1,this.idTensor=Object(o.scalar)(0),Object(o.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),m(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Object(o.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((i,e)=>this.write(i,t[e])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let i=0;i<this.size();i++)e.push(i)}if(0===e.length)return Object(o.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return m(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(o.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Object(o.tensor)([],[0].concat(this.elementShape));const t=[];for(let i=0;i<this.size();i++)t.push(i);const n=this.readMany(t);return m(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(o.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Object(o.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const c=0===n?0:t.size/n,l=[];Object(o.tidy)((()=>{t=Object(o.reshape)(t,[1,n,c]);for(let i=0;i<e.length;++i){const n=[0,0===i?0:r[i-1],0],d=[1,e[i],c];l[i]=Object(o.reshape)(Object(o.slice)(t,n,d),this.elementShape)}return l}));const d=[];for(let i=0;i<e.length;i++)d[i]=i;this.writeMany(d,l)}}class k{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);m(t,e.shape,"TensorList shape mismatch: "),Object(o.keep)(e)})),this.idTensor=Object(o.scalar)(0),this.maxNumElements=r,Object(o.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new k([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);m(e,this.elementShape,"TensorList shape mismatch: ");const r=x(this.elementShape,this.tensors,e);return Object(o.tidy)((()=>{const e=this.tensors.map((e=>Object(o.reshape)(e,r)));return Object(o.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=x(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,m(r.shape,e,"TensorList shape mismatch: "),Object(o.reshape)(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(m(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Object(o.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new k([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let i=0;i<Math.min(this.tensors.length,e);++i)t.tensors[i]=this.tensors[i];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);m(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=x(this.elementShape,this.tensors,t);return Object(o.reshape)(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);m(this.elementShape,t.shape,"TensorList shape mismatch: "),Object(o.keep)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);m(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=x(this.elementShape,this.tensors,n);return 0===e.length?Object(o.tensor)([],[0].concat(r)):Object(o.tidy)((()=>{const t=e.map((i=>Object(o.reshape)(this.tensors[i],r)));return Object(o.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);m(this.elementShape,t,"TensorList shape mismatch: ");const n=x(this.elementShape,this.tensors,t);return 0===this.size()?Object(o.tensor)([],[0].concat(n)):Object(o.tidy)((()=>{const e=this.tensors.map((e=>Object(o.reshape)(e,n)));return Object(o.concat)(e,0)}))}}const w=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Object(l.d)("thenBranch",e,t,n),o=Object(l.d)("elseBranch",e,t,n),c=Object(l.d)("cond",e,t,n),d=Object(l.d)("args",e,t,n);return(await c.data())[0]?n.functionMap[r].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap):n.functionMap[o].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Object(l.d)("body",e,t,n),o=Object(l.d)("cond",e,t,n),c=Object(l.d)("args",e,t,n),d=await n.functionMap[o].executeFunctionAsync(c,n.tensorArrayMap,n.tensorListMap),h=c.map((e=>e.id));let f=await d[0].data();d.forEach((e=>{e.kept||-1!==h.indexOf(e.id)||e.dispose()}));let m=c;for(;f[0];){const e=m;m=await n.functionMap[r].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);const t=m.map((e=>e.id));e.forEach((e=>{e.kept||-1!==h.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const c=await n.functionMap[o].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap);f=await c[0].data(),c.forEach((e=>{e.kept||-1!==h.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return m}case"LoopCond":{const r=Object(l.d)("pred",e,t,n);return[Object(l.a)(r)]}case"Switch":{const r=Object(l.d)("pred",e,t,n);let data=Object(l.d)("data",e,t,n);return data.kept||(data=Object(l.a)(data)),(await r.data())[0]?[void 0,data]:[data,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==Object(l.e)(e,t,n)));if(r){const data=Object(l.e)(r,t,n);return[Object(l.a)(data)]}return}case"Enter":{const r=Object(l.d)("frameName",e,t,n),data=Object(l.d)("tensor",e,t,n);return n.enterFrame(r),[Object(l.a)(data)]}case"Exit":{const data=Object(l.d)("tensor",e,t,n);return n.exitFrame(),[Object(l.a)(data)]}case"NextIteration":{const data=Object(l.d)("tensor",e,t,n);return n.nextIteration(),[Object(l.a)(data)]}case"TensorArrayV3":{const r=Object(l.d)("size",e,t,n),c=Object(l.d)("dtype",e,t,n),d=Object(l.d)("elementShape",e,t,n),h=Object(l.d)("dynamicSize",e,t,n),f=Object(l.d)("clearAfterRead",e,t,n),m=Object(l.d)("identicalElementShapes",e,t,n),y=Object(l.d)("name",e,t,n),x=new v(y,c,r,d,m,h,f);return n.addTensorArray(x),[x.idTensor,Object(o.scalar)(1)]}case"TensorArrayWriteV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=Object(l.d)("index",e,t,n),c=Object(l.d)("tensor",e,t,n),d=n.getTensorArray(r.id);return d.write(o,c),[d.idTensor]}case"TensorArrayReadV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=Object(l.d)("index",e,t,n);return[n.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=Object(l.d)("indices",e,t,n),c=Object(l.d)("dtype",e,t,n);return[n.getTensorArray(r.id).gather(o,c)]}case"TensorArrayScatterV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=Object(l.d)("indices",e,t,n),c=Object(l.d)("tensor",e,t,n),d=n.getTensorArray(r.id);return d.scatter(o,c),[d.idTensor]}case"TensorArrayConcatV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=n.getTensorArray(r.id),c=Object(l.d)("dtype",e,t,n);return[o.concat(c)]}case"TensorArraySplitV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=Object(l.d)("tensor",e,t,n),c=Object(l.d)("lengths",e,t,n),d=n.getTensorArray(r.id);return d.split(c,o),[d.idTensor]}case"TensorArraySizeV3":{const r=Object(l.d)("tensorArrayId",e,t,n),c=n.getTensorArray(r.id);return[Object(o.scalar)(c.size(),"int32")]}case"TensorArrayCloseV3":{const r=Object(l.d)("tensorArrayId",e,t,n),o=n.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("index",e,t,n),c=Object(l.d)("tensor",e,t,n),d=n.getTensorList(r.id);return d.setItem(o,c),[d.idTensor]}case"TensorListGetItem":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("index",e,t,n),c=Object(l.d)("elementShape",e,t,n),d=Object(l.d)("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(o,c,d)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Object(l.d)("indices",e,t,n),c=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const c=Math.max(...t);if(null!=r&&-1!==r&&c>=r)throw new Error(`Max index must be < array size (${c}  vs. ${r})`);const l=new k([],n,e.dtype,r),d=Object(o.unstack)(e,0);return t.forEach(((e,t)=>{l.setItem(e,d[t])})),l}(Object(l.d)("tensor",e,t,n),r,Object(l.d)("elementShape",e,t,n),Object(l.d)("numElements",e,t,n));return n.addTensorList(c),[c.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Object(l.d)("elementShape",e,t,n),o=Object(l.d)("elementDType",e,t,n);let c;c="TensorListReserve"===e.op?"numElements":"maxNumElements";const d=Object(l.d)(c,e,t,n),h=function(e,t,n,r){return new k([],e,t,r)}(r,o,0,"TensorListReserve"===e.op?-1:d);return n.addTensorList(h),[h.idTensor]}case"TensorListGather":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("indices",e,t,n),c=Object(l.d)("elementShape",e,t,n),d=Object(l.d)("elementDType",e,t,n);return[n.getTensorList(r.id).gather(o,d,c)]}case"TensorListStack":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("elementShape",e,t,n),c=Object(l.d)("elementDType",e,t,n),d=Object(l.d)("numElements",e,t,n);return[n.getTensorList(r.id).stack(o,c,d)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);m(e.shape.slice(1),t,"TensorList shape mismatch: ");const c=Object(o.unstack)(e);return new k(c,t,r)}(Object(l.d)("tensor",e,t,n),Object(l.d)("elementShape",e,t,n),Object(l.d)("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Object(l.d)("tensorListId",e,t,n),o=n.getTensorList(r.id),c=Object(l.d)("dtype",e,t,n),d=Object(l.d)("elementShape",e,t,n);return[o.concat(c,d)]}case"TensorListPushBack":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("tensor",e,t,n),c=n.getTensorList(r.id);return c.pushBack(o),[c.idTensor]}case"TensorListPopBack":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("elementShape",e,t,n),c=Object(l.d)("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(o,c)]}case"TensorListSplit":{const r=Object(l.d)("tensor",e,t,n),c=Object(l.d)("elementShape",e,t,n),d=function(e,t,n){let r=0;const c=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const l=O(e.shape.slice(1),n),d=0===r?0:e.size/r,h=Object(o.tidy)((()=>{const n=[];e=Object(o.reshape)(e,[1,r,d]);for(let i=0;i<t.length;++i){const r=[0,0===i?0:c[i-1],0],h=[1,t[i],d];n[i]=Object(o.reshape)(Object(o.slice)(e,r,h),l)}return e.dispose(),n})),f=new k([],n,e.dtype,t.length);for(let i=0;i<h.length;i++)f.setItem(i,h[i]);return f}(r,Object(l.d)("lengths",e,t,n),c);return n.addTensorList(d),[d.idTensor]}case"TensorListLength":{const r=Object(l.d)("tensorListId",e,t,n),c=n.getTensorList(r.id);return[Object(o.scalar)(c.size(),"int32")]}case"TensorListResize":{const r=Object(l.d)("tensorListId",e,t,n),o=Object(l.d)("size",e,t,n),c=n.getTensorList(r.id).resize(o);return n.addTensorList(c),[c.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function S(e,t,n){const[r,o]=Object(l.d)("fusedOps",e,t,n),c="biasadd"===r,d=!c,h="prelu"===o,f="fusedbatchnorm"===r,m=Object(l.d)("numArgs",e,t,n);if(c){if(h&&2!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!h&&c&&1!==m)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(f)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const y=Object(l.d)("strides",e,t,n),x=Object(l.c)(e,t,n),O=Object(l.d)("dataFormat",e,t,n).toUpperCase(),v=Object(l.d)("dilations",e,t,n);let[k,w]=Object(l.d)("args",e,t,n);d&&(w=k,k=void 0);return{stride:y,pad:x,dataFormat:O,dilations:v,biasArg:k,preluArg:w,activationFunc:o,leakyreluAlpha:Object(l.d)("leakyreluAlpha",e,t,n)}}function I(e,t,n){return{boxes:Object(l.d)("boxes",e,t,n),scores:Object(l.d)("scores",e,t,n),maxOutputSize:Object(l.d)("maxOutputSize",e,t,n),iouThreshold:Object(l.d)("iouThreshold",e,t,n),scoreThreshold:Object(l.d)("scoreThreshold",e,t,n),softNmsSigma:Object(l.d)("softNmsSigma",e,t,n)}}var N=n(559);class j{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Object(o.scalar)(0),this.tensorMap=new Map,Object(o.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return N.a(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Object(o.tidy)((()=>{const e=Object(o.unstack)(t),r=n.length,c=e.length;o.util.assert(r===c,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${c} elements.`));for(let i=0;i<r;i++){const t=n[i],r=e[i];Object(o.keep)(r),this.tensorMap.set(t,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Object(o.tidy)((()=>{const e=[];for(let i=0;i<n.length;i++){const r=n[i],o=this.findWithDefault(r,t);e.push(o)}return Object(o.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function T(e,t,n,c,f=o.tidy){const m=((e,t,n)=>{switch(e.category){case"arithmetic":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"AddN":return[o.addN(Object(l.d)("tensors",e,t,n))];case"FloorMod":case"Mod":return[o.mod(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Mul":return[o.mul(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"RealDiv":case"Div":return[o.div(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"DivNoNan":return[o.divNoNan(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"FloorDiv":return[o.floorDiv(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Sub":return[o.sub(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Minimum":return[o.minimum(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Maximum":return[o.maximum(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Pow":return[o.pow(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"SquaredDifference":return[o.squaredDifference(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Abs":case"ComplexAbs":return[o.abs(Object(l.d)("x",e,t,n))];case"Acos":return[o.acos(Object(l.d)("x",e,t,n))];case"Acosh":return[o.acosh(Object(l.d)("x",e,t,n))];case"Asin":return[o.asin(Object(l.d)("x",e,t,n))];case"Asinh":return[o.asinh(Object(l.d)("x",e,t,n))];case"Atan":return[o.atan(Object(l.d)("x",e,t,n))];case"Atan2":return[o.atan2(Object(l.d)("x",e,t,n),Object(l.d)("y",e,t,n))];case"Atanh":return[o.atanh(Object(l.d)("x",e,t,n))];case"Ceil":return[o.ceil(Object(l.d)("x",e,t,n))];case"Complex":return[o.complex(Object(l.d)("real",e,t,n),Object(l.d)("imag",e,t,n))];case"Cos":return[o.cos(Object(l.d)("x",e,t,n))];case"Cosh":return[o.cosh(Object(l.d)("x",e,t,n))];case"Elu":return[o.elu(Object(l.d)("x",e,t,n))];case"Erf":return[o.erf(Object(l.d)("x",e,t,n))];case"Exp":return[o.exp(Object(l.d)("x",e,t,n))];case"Expm1":return[o.expm1(Object(l.d)("x",e,t,n))];case"Floor":return[o.floor(Object(l.d)("x",e,t,n))];case"Log":return[o.log(Object(l.d)("x",e,t,n))];case"Log1p":return[o.log1p(Object(l.d)("x",e,t,n))];case"Imag":return[o.imag(Object(l.d)("x",e,t,n))];case"Neg":return[o.neg(Object(l.d)("x",e,t,n))];case"Reciprocal":return[o.reciprocal(Object(l.d)("x",e,t,n))];case"Real":return[o.real(Object(l.d)("x",e,t,n))];case"Relu":return[o.relu(Object(l.d)("x",e,t,n))];case"Round":return[o.round(Object(l.d)("x",e,t,n))];case"Selu":return[o.selu(Object(l.d)("x",e,t,n))];case"Sigmoid":return[o.sigmoid(Object(l.d)("x",e,t,n))];case"Sin":return[o.sin(Object(l.d)("x",e,t,n))];case"Sign":return[o.sign(Object(l.d)("x",e,t,n))];case"Sinh":return[o.sinh(Object(l.d)("x",e,t,n))];case"Softplus":return[o.softplus(Object(l.d)("x",e,t,n))];case"Sqrt":return[o.sqrt(Object(l.d)("x",e,t,n))];case"Square":return[o.square(Object(l.d)("x",e,t,n))];case"Tanh":return[o.tanh(Object(l.d)("x",e,t,n))];case"Tan":return[o.tan(Object(l.d)("x",e,t,n))];case"ClipByValue":return[o.clipByValue(Object(l.d)("x",e,t,n),Object(l.d)("clipValueMin",e,t,n),Object(l.d)("clipValueMax",e,t,n))];case"Relu6":return[o.relu6(Object(l.d)("x",e,t,n))];case"Rsqrt":return[o.rsqrt(Object(l.e)(e.inputNames[0],t,n))];case"Prod":return[o.prod(Object(l.d)("x",e,t,n),Object(l.d)("axes",e,t,n))];case"LeakyRelu":return[o.leakyRelu(Object(l.d)("x",e,t,n),Object(l.d)("alpha",e,t,n))];case"Prelu":return[o.prelu(Object(l.d)("x",e,t,n),Object(l.d)("alpha",e,t,n))];case"IsNan":return[o.isNaN(Object(l.e)(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return w(e,t,n);case"convolution":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Conv1D":{const r=Object(l.d)("stride",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("dataFormat",e,t,n).toUpperCase(),h=Object(l.d)("dilation",e,t,n);return[o.conv1d(Object(l.d)("x",e,t,n),Object(l.d)("filter",e,t,n),r,c,d,h)]}case"Conv2D":{const r=Object(l.d)("strides",e,t,n),c=Object(l.c)(e,t,n),d=Object(l.d)("dataFormat",e,t,n).toUpperCase(),h=Object(l.d)("dilations",e,t,n);return[o.conv2d(Object(l.d)("x",e,t,n),Object(l.d)("filter",e,t,n),[r[1],r[2]],c,d,[h[1],h[2]])]}case"_FusedConv2D":{const{stride:r,pad:c,dataFormat:d,dilations:h,biasArg:f,preluArg:m,activationFunc:y,leakyreluAlpha:x}=S(e,t,n);return[o.fused.conv2d({x:Object(l.d)("x",e,t,n),filter:Object(l.d)("filter",e,t,n),strides:[r[1],r[2]],pad:c,dataFormat:d,dilations:[h[1],h[2]],bias:f,activation:y,preluActivationWeights:m,leakyreluAlpha:x})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:c,dataFormat:d,dilations:h,biasArg:f,preluArg:m,activationFunc:y,leakyreluAlpha:x}=S(e,t,n);return[o.fused.depthwiseConv2d({x:Object(l.d)("x",e,t,n),filter:Object(l.d)("filter",e,t,n),strides:[r[1],r[2]],pad:c,dataFormat:d,dilations:[h[1],h[2]],bias:f,activation:y,preluActivationWeights:m,leakyreluAlpha:x})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(l.d)("outputShape",e,t,n),c=Object(l.d)("strides",e,t,n),d=Object(l.c)(e,t,n);return[o.conv2dTranspose(Object(l.d)("x",e,t,n),Object(l.d)("filter",e,t,n),r,[c[1],c[2]],d)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(l.d)("strides",e,t,n),c=Object(l.c)(e,t,n),d=Object(l.d)("dilations",e,t,n),h=Object(l.d)("dataFormat",e,t,n).toUpperCase();return[o.depthwiseConv2d(Object(l.d)("input",e,t,n),Object(l.d)("filter",e,t,n),[r[1],r[2]],c,h,[d[1],d[2]])]}case"Conv3D":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("dataFormat",e,t,n).toUpperCase(),h=Object(l.d)("dilations",e,t,n);return[o.conv3d(Object(l.d)("x",e,t,n),Object(l.d)("filter",e,t,n),[r[1],r[2],r[3]],c,d,[h[1],h[2],h[3]])]}case"AvgPool":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("kernelSize",e,t,n);return[o.avgPool(Object(l.d)("x",e,t,n),[d[1],d[2]],[r[1],r[2]],c)]}case"MaxPool":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("kernelSize",e,t,n);return[o.maxPool(Object(l.d)("x",e,t,n),[d[1],d[2]],[r[1],r[2]],c)]}case"MaxPoolWithArgmax":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("kernelSize",e,t,n),h=Object(l.d)("includeBatchInIndex",e,t,n),{result:f,indexes:m}=o.maxPoolWithArgmax(Object(l.d)("x",e,t,n),[d[1],d[2]],[r[1],r[2]],c,h);return[f,m]}case"AvgPool3D":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("kernelSize",e,t,n);return[o.avgPool3d(Object(l.d)("x",e,t,n),[d[1],d[2],d[3]],[r[1],r[2],r[3]],c)]}case"MaxPool3D":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("kernelSize",e,t,n);return[o.maxPool3d(Object(l.d)("x",e,t,n),[d[1],d[2],d[3]],[r[1],r[2],r[3]],c)]}case"Dilation2D":{const r=Object(l.d)("strides",e,t,n),c=Object(l.d)("pad",e,t,n),d=Object(l.d)("dilations",e,t,n),h=r[1],f=r[2],m=d[1],y=d[2];return[o.dilation2d(Object(l.d)("x",e,t,n),Object(l.d)("filter",e,t,n),[h,f],c,[m,y],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Fill":{const r=Object(l.d)("shape",e,t,n),c=Object(l.d)("dtype",e,t,n),d=Object(l.d)("value",e,t,n);return[o.fill(r,d,c)]}case"LinSpace":{const r=Object(l.d)("start",e,t,n),c=Object(l.d)("stop",e,t,n),d=Object(l.d)("num",e,t,n);return[o.linspace(r,c,d)]}case"Multinomial":{const r=Object(l.d)("logits",e,t,n),c=Object(l.d)("numSamples",e,t,n),d=Object(l.d)("seed",e,t,n);return[o.multinomial(r,c,d)]}case"OneHot":{const r=Object(l.d)("indices",e,t,n),c=Object(l.d)("depth",e,t,n),d=Object(l.d)("onValue",e,t,n),h=Object(l.d)("offValue",e,t,n),f=Object(l.d)("dtype",e,t,n);return[o.oneHot(r,c,d,h,f)]}case"Ones":return[o.ones(Object(l.d)("shape",e,t,n),Object(l.d)("dtype",e,t,n))];case"OnesLike":return[o.onesLike(Object(l.d)("x",e,t,n))];case"RandomStandardNormal":return[o.randomStandardNormal(Object(l.d)("shape",e,t,n),Object(l.d)("dtype",e,t,n),Object(l.d)("seed",e,t,n))];case"RandomUniform":return[o.randomUniform(Object(l.d)("shape",e,t,n),Object(l.d)("minval",e,t,n),Object(l.d)("maxval",e,t,n),Object(l.d)("dtype",e,t,n))];case"Range":{const r=Object(l.d)("start",e,t,n),c=Object(l.d)("stop",e,t,n),d=Object(l.d)("step",e,t,n);return[o.range(r,c,d,Object(l.d)("dtype",e,t,n))]}case"TruncatedNormal":{const r=Object(l.d)("shape",e,t,n),c=Object(l.d)("mean",e,t,n),d=Object(l.d)("stdDev",e,t,n),h=Object(l.d)("seed",e,t,n);return[o.truncatedNormal(r,c,d,Object(l.d)("dtype",e,t,n),h)]}case"Zeros":return[o.zeros(Object(l.d)("shape",e,t,n),Object(l.d)("dtype",e,t,n))];case"ZerosLike":return[o.zerosLike(Object(l.d)("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,o,c=r)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:o,maxOutputSize:l,iouThreshold:d,scoreThreshold:h,softNmsSigma:f}=I(e,t,n),m=await c.image.nonMaxSuppressionWithScoreAsync(r,o,l,d,h,f);return[m.selectedIndices,m.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:o,maxOutputSize:d,iouThreshold:h,scoreThreshold:f}=I(e,t,n),m=Object(l.d)("padToMaxOutputSize",e,t,n),y=await c.image.nonMaxSuppressionPaddedAsync(r,o,d,h,f,m);return[y.selectedIndices,y.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:o,maxOutputSize:l,iouThreshold:d,scoreThreshold:h}=I(e,t,n);return[await c.image.nonMaxSuppressionAsync(r,o,l,d,h)]}case"Where":{const r=c.cast(Object(l.d)("condition",e,t,n),"bool"),o=[await c.whereAsync(r)];return r.dispose(),o}case"ListDiff":return c.setdiff1dAsync(Object(l.d)("x",e,t,n),Object(l.d)("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"LowerBound":{const r=Object(l.d)("sortedSequence",e,t,n),c=Object(l.d)("values",e,t,n);return[o.lowerBound(r,c)]}case"TopKV2":{const r=Object(l.d)("x",e,t,n),c=Object(l.d)("k",e,t,n),d=Object(l.d)("sorted",e,t,n),h=o.topk(r,c,d);return[h.values,h.indices]}case"UpperBound":{const r=Object(l.d)("sortedSequence",e,t,n),c=Object(l.d)("values",e,t,n);return[o.upperBound(r,c)]}case"Unique":{const r=Object(l.d)("x",e,t,n),c=o.unique(r);return[c.values,c.indices]}case"UniqueV2":{const r=Object(l.d)("x",e,t,n),c=Object(l.d)("axis",e,t,n),d=o.unique(r,c);return[d.values,d.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"ResizeBilinear":{const r=Object(l.d)("images",e,t,n),c=Object(l.d)("size",e,t,n),d=Object(l.d)("alignCorners",e,t,n),h=Object(l.d)("halfPixelCenters",e,t,n);return[o.image.resizeBilinear(r,[c[0],c[1]],d,h)]}case"ResizeNearestNeighbor":{const r=Object(l.d)("images",e,t,n),c=Object(l.d)("size",e,t,n),d=Object(l.d)("alignCorners",e,t,n),h=Object(l.d)("halfPixelCenters",e,t,n);return[o.image.resizeNearestNeighbor(r,[c[0],c[1]],d,h)]}case"CropAndResize":{const image=Object(l.d)("image",e,t,n),r=Object(l.d)("boxes",e,t,n),c=Object(l.d)("boxInd",e,t,n),d=Object(l.d)("cropSize",e,t,n),h=Object(l.d)("method",e,t,n),f=Object(l.d)("extrapolationValue",e,t,n);return[o.image.cropAndResize(image,r,c,d,h,f)]}case"ImageProjectiveTransformV3":{const r=Object(l.d)("images",e,t,n),c=Object(l.d)("transforms",e,t,n),d=Object(l.d)("outputShape",e,t,n),h=Object(l.d)("fillValue",e,t,n),f=Object(l.d)("interpolation",e,t,n),m=Object(l.d)("fillMode",e,t,n);return[o.image.transform(r,c,f.toLowerCase(),m.toLowerCase(),h,d)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=Object(l.d)("default",e,t,n);return[Object(l.e)(e.name,t,n)||r];case"Placeholder":return[Object(l.e)(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const data=Object(l.d)("x",e,t,n);return[Object(l.a)(data)]}case"IdentityN":return Object(l.d)("x",e,t,n).map((e=>Object(l.a)(e)));case"Snapshot":const c=Object(l.d)("x",e,t,n);return[Object(l.a)(c)];case"Shape":return[o.tensor1d(Object(l.d)("x",e,t,n).shape,"int32")];case"ShapeN":return Object(l.d)("x",e,t,n).map((e=>o.tensor1d(e.shape)));case"Size":return[o.scalar(Object(l.d)("x",e,t,n).size,"int32")];case"Rank":return[o.scalar(Object(l.d)("x",e,t,n).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":const input=Object(l.d)("x",e,t,n),data=Object(l.d)("data",e,t,n),d=Object(l.d)("message",e,t,n),h=Object(l.d)("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(d);for(let i=0;i<data.length;i++)console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0,h));return[input];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Equal":return[o.equal(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"NotEqual":return[o.notEqual(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Greater":return[o.greater(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"GreaterEqual":return[o.greaterEqual(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Less":return[o.less(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"LessEqual":return[o.lessEqual(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"LogicalAnd":return[o.logicalAnd(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"LogicalNot":return[o.logicalNot(Object(l.d)("a",e,t,n))];case"LogicalOr":return[o.logicalOr(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];case"Select":case"SelectV2":return[o.where(Object(l.d)("condition",e,t,n),Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(Object(l.d)("a",e,t,n),Object(l.d)("b",e,t,n),Object(l.d)("transposeA",e,t,n),Object(l.d)("transposeB",e,t,n))];case"Einsum":return[o.einsum(Object(l.d)("equation",e,t,n),...Object(l.d)("tensors",e,t,n))];case"Transpose":return[o.transpose(Object(l.d)("x",e,t,n),Object(l.d)("perm",e,t,n))];case"_FusedMatMul":const[r,c]=Object(l.d)("fusedOps",e,t,n),d="biasadd"===r,h="prelu"===c,f=Object(l.d)("numArgs",e,t,n),m=Object(l.d)("leakyreluAlpha",e,t,n);if(d){if(h&&2!==f)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!h&&1!==f)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[y,x]=Object(l.d)("args",e,t,n);return[o.fused.matMul({a:Object(l.d)("a",e,t,n),b:Object(l.d)("b",e,t,n),transposeA:Object(l.d)("transposeA",e,t,n),transposeB:Object(l.d)("transposeB",e,t,n),bias:y,activation:c,preluActivationWeights:x,leakyreluAlpha:m})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"EuclideanNorm":return[o.euclideanNorm(Object(l.d)("x",e,t,n),Object(l.d)("axis",e,t,n),Object(l.d)("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[o.batchNorm(Object(l.d)("x",e,t,n),Object(l.d)("mean",e,t,n),Object(l.d)("variance",e,t,n),Object(l.d)("offset",e,t,n),Object(l.d)("scale",e,t,n),Object(l.d)("epsilon",e,t,n))];case"LRN":return[o.localResponseNormalization(Object(l.d)("x",e,t,n),Object(l.d)("radius",e,t,n),Object(l.d)("bias",e,t,n),Object(l.d)("alpha",e,t,n),Object(l.d)("beta",e,t,n))];case"Softmax":return[o.softmax(Object(l.d)("x",e,t,n))];case"LogSoftmax":return[o.logSoftmax(Object(l.d)("x",e,t,n))];case"SparseToDense":return[o.sparseToDense(Object(l.d)("sparseIndices",e,t,n),Object(l.d)("outputShape",e,t,n),Object(l.d)("sparseValues",e,t,n),Object(l.d)("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Max":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.max(Object(l.d)("x",e,t,n),r,c)]}case"Mean":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.mean(Object(l.d)("x",e,t,n),r,c)]}case"Min":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.min(Object(l.d)("x",e,t,n),r,c)]}case"Sum":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.sum(Object(l.d)("x",e,t,n),r,c)]}case"All":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.all(Object(l.d)("x",e,t,n),r,c)]}case"Any":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.any(Object(l.d)("x",e,t,n),r,c)]}case"ArgMax":{const r=Object(l.d)("axis",e,t,n);return[o.argMax(Object(l.d)("x",e,t,n),r)]}case"ArgMin":{const r=Object(l.d)("axis",e,t,n);return[o.argMin(Object(l.d)("x",e,t,n),r)]}case"Prod":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("keepDims",e,t,n);return[o.prod(Object(l.d)("x",e,t,n),r,c)]}case"Cumprod":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("exclusive",e,t,n),d=Object(l.d)("reverse",e,t,n);return[o.cumprod(Object(l.d)("x",e,t,n),r,c,d)]}case"Cumsum":{const r=Object(l.d)("axis",e,t,n),c=Object(l.d)("exclusive",e,t,n),d=Object(l.d)("reverse",e,t,n);return[o.cumsum(Object(l.d)("x",e,t,n),r,c,d)]}case"Bincount":const r=Object(l.d)("x",e,t,n),c=Object(l.d)("weights",e,t,n),d=Object(l.d)("size",e,t,n);return[o.bincount(r,c,d)];case"DenseBincount":{const r=Object(l.d)("x",e,t,n),c=Object(l.d)("weights",e,t,n),d=Object(l.d)("size",e,t,n),h=Object(l.d)("binaryOutput",e,t,n);return[o.denseBincount(r,c,d,h)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return f((()=>((e,t,n,c=r)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=Object(l.d)("n",e,t,n),o=Object(l.d)("axis",e,t,n);let d=Object(l.d)("tensors",e,t,n);return d=d.slice(0,r),[c.concat(d,o)]}case"Gather":{const input=Object(l.d)("x",e,t,n),r=Object(l.d)("indices",e,t,n);return[c.gather(input,c.cast(r,"int32"),0)]}case"GatherV2":{const r=Object(l.d)("axis",e,t,n),o=Object(l.d)("batchDims",e,t,n),input=Object(l.d)("x",e,t,n),d=Object(l.d)("indices",e,t,n);return[c.gather(input,c.cast(d,"int32"),r,o)]}case"Reverse":{const r=Object(l.d)("dims",e,t,n),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const input=Object(l.d)("x",e,t,n);return[c.reverse(input,o)]}case"ReverseV2":{const r=Object(l.d)("axis",e,t,n),input=Object(l.d)("x",e,t,n);return[c.reverse(input,r)]}case"Slice":{const r=Object(l.d)("begin",e,t,n),o=Object(l.d)("size",e,t,n);return[c.slice(Object(l.d)("x",e,t,n),r,o)]}case"StridedSlice":{const r=Object(l.d)("begin",e,t,n),o=Object(l.d)("end",e,t,n),d=Object(l.d)("strides",e,t,n),h=Object(l.d)("beginMask",e,t,n),f=Object(l.d)("endMask",e,t,n),m=Object(l.d)("ellipsisMask",e,t,n),y=Object(l.d)("newAxisMask",e,t,n),x=Object(l.d)("shrinkAxisMask",e,t,n),O=Object(l.d)("x",e,t,n);return[c.stridedSlice(O,r,o,d,h,f,m,y,x)]}case"Pack":return Object(o.tidy)((()=>{const r=Object(l.d)("axis",e,t,n),d=Object(l.d)("tensors",e,t,n),h=d[0].shape,f=c.squeeze(d[0]).shape,m=d.map((e=>{const t=o.util.arraysEqual(e.shape,h);if(!t&&!o.util.arraysEqual(c.squeeze(e).shape,f))throw new Error("the input tensors shape does not match");return t?e:c.reshape(e,h)}));return[c.stack(m,r)]}));case"Unpack":{const r=Object(l.d)("axis",e,t,n),o=Object(l.d)("tensor",e,t,n);return c.unstack(o,r)}case"Tile":{const r=Object(l.d)("reps",e,t,n);return[c.tile(Object(l.d)("x",e,t,n),r)]}case"Split":case"SplitV":{const r=Object(l.d)("axis",e,t,n),o=Object(l.d)("numOrSizeSplits",e,t,n),d=Object(l.d)("x",e,t,n);return c.split(d,o,r)}case"ScatterNd":{const r=Object(l.d)("indices",e,t,n),o=Object(l.d)("values",e,t,n),d=Object(l.d)("shape",e,t,n);return[c.scatterND(r,o,d)]}case"GatherNd":{const r=Object(l.d)("x",e,t,n),o=Object(l.d)("indices",e,t,n);return[c.gatherND(r,o)]}case"SparseToDense":{const r=Object(l.d)("sparseIndices",e,t,n),o=Object(l.d)("outputShape",e,t,n),d=Object(l.d)("sparseValues",e,t,n),h=Object(l.d)("defaultValue",e,t,n);return[c.sparseToDense(r,d,o,d.dtype===h.dtype?h:c.cast(h,d.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:c,emptyRowIndicator:d,reverseIndexMap:h}=o.sparse.sparseFillEmptyRows(Object(l.d)("indices",e,t,n),Object(l.d)("values",e,t,n),Object(l.d)("denseShape",e,t,n),Object(l.d)("defaultValue",e,t,n));return[r,c,d,h]}case"SparseReshape":{const{outputIndices:r,outputShape:c}=o.sparse.sparseReshape(Object(l.d)("inputIndices",e,t,n),Object(l.d)("inputShape",e,t,n),Object(l.d)("newShape",e,t,n));return[r,c]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(Object(l.d)("data",e,t,n),Object(l.d)("indices",e,t,n),Object(l.d)("segmentIds",e,t,n))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(Object(l.d)("data",e,t,n),Object(l.d)("indices",e,t,n),Object(l.d)("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"FFT":return[o.fft(Object(l.d)("x",e,t,n))];case"IFFT":return[o.ifft(Object(l.d)("x",e,t,n))];case"RFFT":return[o.rfft(Object(l.d)("x",e,t,n))];case"IRFFT":return[o.irfft(Object(l.d)("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:c}=o.string.stringNGrams(Object(l.d)("data",e,t,n),Object(l.d)("dataSplits",e,t,n),Object(l.d)("separator",e,t,n),Object(l.d)("nGramWidths",e,t,n),Object(l.d)("leftPad",e,t,n),Object(l.d)("rightPad",e,t,n),Object(l.d)("padWidth",e,t,n),Object(l.d)("preserveShortSequences",e,t,n));return[r,c]}case"StringSplit":{const{indices:r,values:c,shape:d}=o.string.stringSplit(Object(l.d)("input",e,t,n),Object(l.d)("delimiter",e,t,n),Object(l.d)("skipEmpty",e,t,n));return[r,c,d]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(Object(l.d)("input",e,t,n),Object(l.d)("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return f((()=>((e,t,n,o=r)=>{switch(e.op){case"Cast":return[o.cast(Object(l.d)("x",e,t,n),Object(l.d)("dtype",e,t,n))];case"ExpandDims":{const r=Object(l.d)("axis",e,t,n);return[o.expandDims(Object(l.d)("x",e,t,n),r)]}case"Squeeze":{const r=Object(l.d)("axis",e,t,n);return[o.squeeze(Object(l.d)("x",e,t,n),r)]}case"Reshape":return[o.reshape(Object(l.d)("x",e,t,n),Object(l.d)("shape",e,t,n))];case"MirrorPad":return[o.mirrorPad(Object(l.d)("x",e,t,n),Object(l.d)("padding",e,t,n),Object(l.d)("mode",e,t,n))];case"PadV2":case"Pad":return[o.pad(Object(l.d)("x",e,t,n),Object(l.d)("padding",e,t,n),Object(l.d)("constantValue",e,t,n))];case"SpaceToBatchND":{const r=Object(l.d)("blockShape",e,t,n),c=Object(l.d)("paddings",e,t,n);return[o.spaceToBatchND(Object(l.d)("x",e,t,n),r,c)]}case"BatchToSpaceND":{const r=Object(l.d)("blockShape",e,t,n),c=Object(l.d)("crops",e,t,n);return[o.batchToSpaceND(Object(l.d)("x",e,t,n),r,c)]}case"DepthToSpace":{const r=Object(l.d)("blockSize",e,t,n),c=Object(l.d)("dataFormat",e,t,n).toUpperCase();return[o.depthToSpace(Object(l.d)("x",e,t,n),r,c)]}case"BroadcastTo":return[o.broadcastTo(Object(l.d)("x",e,t,n),Object(l.d)("shape",e,t,n))];case"BroadcastArgs":return[o.broadcastArgs(Object(l.d)("s0",e,t,n),Object(l.d)("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const o=Object(l.d)("keyDType",e,t,n),c=Object(l.d)("valueDType",e,t,n),d=new j(o,c);return r.addHashTable(e.name,d),[d.handle]}case"LookupTableImport":case"LookupTableImportV2":{const o=Object(l.d)("tableHandle",e,t,n,r),c=Object(l.d)("keys",e,t,n),d=Object(l.d)("values",e,t,n),h=r.getHashTableById(o.id);return[await h.import(c,d)]}case"LookupTableFind":case"LookupTableFindV2":{const o=Object(l.d)("tableHandle",e,t,n,r),c=Object(l.d)("keys",e,t,n),d=Object(l.d)("defaultValue",e,t,n),h=r.getHashTableById(o.id);return[await h.find(c,d)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=Object(l.d)("tableHandle",e,t,n,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,c);case"custom":const m=Object(h.a)(e.op);if(m&&m.customExecutor)return m.customExecutor(new d(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return o.util.isPromise(m)?m.then((data=>[].concat(data))):[].concat(m)}class C{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let i=0;i<this.contexts.length-1;i++){const t=this.contexts.slice(0,this.contexts.length-i);e.push(this.contextIdforContexts(t))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function $(e,t,n,r){const o=new Set,c=[];let d=null,h=null;const f=new Set,m=Object.keys(e).map((e=>Object(l.g)(e)[0]));let y=[];null!=r&&(y=r.map((e=>Object(l.g)(e.name)[0])));const x=[...t];for(;x.length>0;){const e=x.pop();(_(e)||F(e)||D(e))&&null==d&&(d=e,h=d.children.map((e=>e.name)).filter((e=>o.has(e)))),o.add(e.name),null==n[e.name]&&(-1===m.indexOf(e.name)&&-1===y.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((input=>{f.has(input.name)||(f.add(input.name),x.push(input))})):c.push(e.name)))}return{inputs:e,outputs:t,usedNodes:o,missingInputs:c,dynamicNode:d,syncInputs:h}}const E=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],A=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],R=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function _(e){return E.indexOf(e.op)>=0}function F(e){return A.indexOf(e.op)>=0}function D(e){return R.indexOf(e.op)>=0}class M{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new M(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((map,e)=>(map[e]=this._functions[e].signature,map)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=$(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:c}=n;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${c}]`);if(r.length>0){const n=t.map((e=>e.name)),o=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${o}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:o}=n,c=[],d=Object.keys(o).map((e=>Object(l.g)(e)[0])).map((t=>e.nodes[t])),h=e.initNodes;d.forEach((input=>{r.has(input.name)&&c.push(input)})),e.weights.forEach((e=>{r.has(e.name)&&c.push(e)})),null!=h&&h.forEach((e=>{r.has(e.name)&&c.push(e)}));const f=new Set,m=[];for(;c.length>0;){const e=c.pop();f.add(e.name),t[e.name]||m.push(e),e.children.forEach((e=>{!f.has(e.name)&&r.has(e.name)&&e.inputs.every((input=>f.has(input.name)))&&c.push(e)}))}return m}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[Object(l.g)(e)[0]])),c=t.map((e=>Object(l.g)(e)[0]));let d=c.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===d.length&&(d=this._outputs);const h=this.getCompilationKey(r,d);let f=this.compiledMap.get(h);null==f&&(f=this.compile(e,d),this.compiledMap.set(h,f));const m={},y={};return Object(o.tidy)((()=>{const n=new C(this.weightMap,m,y,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,o]=Object(l.g)(t),c=[];c[o]=e[t],r[n]=c}));const d=this.getFrozenTensorIds(r),h={};for(let i=0;i<f.length;i++){const e=f[i];if(!r[e.name]){const t=T(e,r,n,this._resourceManager);if(o.util.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.checkTensorForDisposal(e.name,e,r,n,d,c,h)}}return null==this.parent&&n.dispose(d),t.map((e=>Object(l.e)(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,o,c,d){"control"!==t.category&&-1===c.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(d[e.id]=(d[e.id]||0)+t.children.length)})),t.inputs.forEach((input=>{if("control"!==input.category){const e=Object(l.f)(input.name,n,r);null!=e&&e.forEach((e=>{if(e&&!e.kept&&!o.has(e.id)){const n=d[e.id];if(1===n){if(this.keepTensorForDebug){const[n,o]=Object(l.b)(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][o]=e}else e.dispose();delete d[e.id]}else null!=n&&d[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},c={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=Object(o.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const d=new C(this.weightMap,r,c,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,d,t,n);const h=t.map((e=>Object(l.e)(e,this.tensorsMap,d))),f=h.map((e=>e.id)),m=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...f,...m,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&d.dispose(this.keepIds),h}async executeFunctionAsync(e,t,n){const r=e.reduce(((map,e,t)=>(map[this.inputs[t].name]=e,map)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const o=Object.keys(e),c=o.map((e=>this.graph.nodes[Object(l.g)(e)[0]])),d=n.map((e=>Object(l.g)(e)[0]));let h=d.map((e=>this.graph.nodes[e]));0===h.length&&(h=this._outputs);const{usedNodes:f,missingInputs:m,dynamicNode:y,syncInputs:x}=$(e,h,this.weightMap,this._initNodes),O=[...c,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),v=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=Object(l.g)(t),o=[];o[r]=e[t],v[n]=o}));const k={},w=this.getFrozenTensorIds(v),S={};for(;O.length>0;){const e=this.processStack(c,O,t,v,S,w,d,k,f);await Promise.all(e)}null!=y||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const I=h.filter((e=>!_(e)&&!Object(l.e)(e.name,v,t))).map((e=>e.name));if(I.length>0){let e="";throw null!=y&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${x}]`),new Error(`Cannot compute the outputs [${I}] from the provided inputs [${o}]. Consider providing the following inputs: [${m}]. ${e}`)}return v}processStack(e,t,n,r,c,d,h,f,m){const y=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let x="";if("Enter"===e.node.op&&Object(l.d)("isConstant",e.node,r,n)&&([x]=Object(l.b)(e.node.name,n)),null==r[e.node.name]){const O=T(e.node,r,n,this._resourceManager);x||([x]=Object(l.b)(e.node.name,n));const v=n.currentContext;o.util.isPromise(O)?y.push(O.then((o=>(r[x]=o,n.currentContext=v,this.checkTensorForDisposal(x,e.node,r,n,d,h,f),this.processChildNodes(e.node,t,n,r,c,m),o)))):(r[x]=O,this.checkTensorForDisposal(x,e.node,r,n,d,h,f),this.processChildNodes(e.node,t,n,r,c,m))}else this.processChildNodes(e.node,t,n,r,c,m)}return y}processChildNodes(e,t,n,r,o,c){e.children.forEach((e=>{const[d]=Object(l.b)(e.name,n);!o[d]&&c.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Object(l.e)(e,r,n)))&&(o[d]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Object(l.e)(e,r,n)))&&(o[d]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const input=e[t],[n]=Object(l.g)(t),r=this.graph.nodes[n];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,t=e.length===input.shape.length&&input.shape.every(((t,n)=>-1===e[n]||e[n]===t));o.util.assert(t,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${input.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&o.util.assert(input.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${input.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=Object(l.g)(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=Object(l.g)(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class z{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class L{constructor(e,t={},n=o.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new z}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const path=this.modelUrl;if(null!=path.load)this.handler=path;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(path,this.loadOptions);else{const e=this.io.getLoadHandlers(path,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(path,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[path]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return o.util.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new M(c.a.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=c.a.Instance.transformGraph(e.modelInitializer);this.initializer=new M(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e=n instanceof o.Tensor?[n]:n,t={};return e.forEach(((e,i)=>t[this.structuredOutputKeys[i]]=e)),t}return n}normalizeInputs(e){if(!(e instanceof o.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((map,t,i)=>(map[t]=e[i],map)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(map){return Object.keys(map).reduce(((e,t)=>(e[t]=[map[t]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function P(e,t={},n=o.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}(e));const r=new L(e,t,n);return await r.load(),r}const B="3.20.0"},,,function(e,t,n){"use strict";(function(e,r){let o;function c(){if(null==o){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==r)t=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}o=t}return o}function l(e,t){const n=function(){const e=c();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return l}))}).call(this,n(96),n(217))},function(e,t,n){"use strict";let r;function o(e){r=e}function c(nav){if(void 0!==r)return r;if(nav||"undefined"!=typeof navigator&&null!=navigator){if(nav||(nav=navigator),"ReactNative"===nav.product)return!0;const a=nav.userAgent||nav.vendor||("undefined"!=typeof window?window.opera:"");if(!a){const e=nav;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))}return!1}function l(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.r(t),n.d(t,"mockIsMobile",(function(){return o})),n.d(t,"isMobile",(function(){return c})),n.d(t,"isBrowser",(function(){return l}))},function(e,t,n){"use strict";function r(e,t=!1){console.log(e.toString(t))}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({all_:function(e,t=null,n=!1){const l={x:Object(c.a)(e,"x","all","bool")},d={axis:t,keepDims:n};return r.a.runKernel(o.f,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({any_:function(e,t=null,n=!1){const l={x:Object(c.a)(e,"x","any","bool")},d={axis:t,keepDims:n};return r.a.runKernel(o.g,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({argMax_:function(e,t=0){const n={x:Object(c.a)(e,"x","argMax")},l={axis:t};return r.a.runKernel(o.h,n,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({argMin_:function(e,t=0){const n={x:Object(c.a)(e,"x","argMin")},l={axis:t};return r.a.runKernel(o.i,n,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({atan2_:function(a,b){let e=Object(l.a)(a,"a","atan2"),t=Object(l.a)(b,"b","atan2");[e,t]=Object(c.makeTypesMatch)(e,t);const n={a:e,b:t};return r.a.runKernel(o.m,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({tanh_:function(e){const t={x:Object(c.a)(e,"x","tanh","float32")};return r.a.runKernel(o.gd,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(546),o=n(599),c=n(602),l=n(566),d=n(545),h=n(550);const f=Object(d.b)({conv1d_:function(e,filter,t,n,d="NWC",f=1,m){const y=Object(r.a)(e,"x","conv1d"),x=Object(r.a)(filter,"filter","conv1d");let O=y,v=!1;2===y.rank&&(v=!0,O=Object(h.a)(y,[1,y.shape[0],y.shape[1]])),o.b(3===O.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${O.rank}.`)),o.b(3===x.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${x.rank}.`)),l.a("conv1d",n,m),o.b(O.shape[2]===x.shape[1],(()=>`Error in conv1d: depth of input (${O.shape[2]}) must match input depth for filter ${x.shape[1]}.`)),o.b(l.i(t,f),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${f}'`)),o.b("NWC"===d,(()=>`Error in conv1d: got dataFormat of ${d} but only NWC is currently supported.`));const k=Object(h.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]]),w=Object(h.a)(O,[O.shape[0],1,O.shape[1],O.shape[2]]),S=[1,t],I=[1,f],N=Object(c.a)(w,k,S,n,"NHWC",I,m);return v?Object(h.a)(N,[N.shape[2],N.shape[3]]):Object(h.a)(N,[N.shape[0],N.shape[2],N.shape[3]])}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(546),o=n(722),c=n(545);const l=Object(c.b)({conv2dTranspose_:function(e,filter,t,n,c,l){const d=Object(r.a)(e,"x","conv2dTranspose"),h=Object(r.a)(filter,"filter","conv2dTranspose");return Object(o.a)(t,d,h,n,c,"NHWC",l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(599),l=n(566),d=n(545),h=n(550);const f=Object(d.b)({conv2DBackpropInput_:function(e,t,filter,n,d,f="NHWC",m){c.b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let y=e,x=t,O=!1;3===t.rank&&(O=!0,x=Object(h.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),y=[1,e[0],e[1],e[2]]),c.b(4===y.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${y.length}.`)),c.b(4===x.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${x.rank}`)),c.b(4===filter.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${filter.rank}`));const v="NHWC"===f?y[3]:y[1],k="NHWC"===f?x.shape[3]:x.shape[1];c.b(v===filter.shape[2],(()=>`Error in conv2dDerInput: depth of input (${v}) must match input depth for filter ${filter.shape[2]}.`)),c.b(k===filter.shape[3],(()=>`Error in conv2dDerInput: depth of output (${k}) must match output depth for filter ${filter.shape[3]}.`)),l.a("conv2dDerInput",d,m);const w={dy:x,filter:filter},S={strides:n,pad:d,dataFormat:f,dimRoundingMode:m,inputShape:y},I=r.a.runKernel(o.F,w,S);return O?Object(h.a)(I,[I.shape[1],I.shape[2],I.shape[3]]):I}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({cosh_:function(e){const t={x:Object(c.a)(e,"x","cosh","float32")};return r.a.runKernel(o.K,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({depthToSpace_:function(e,t,n="NHWC"){const d=Object(c.a)(e,"x","depthToSpace","float32"),h="NHWC"===n?d.shape[1]:d.shape[2],f="NHWC"===n?d.shape[2]:d.shape[3],m="NHWC"===n?d.shape[3]:d.shape[1];l.b(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),l.b(h*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${h} and ${t}  for depthToSpace with input shape\n    ${d.shape}`)),l.b(f*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${f} and ${t} for depthToSpace with input shape\n        ${d.shape}`)),l.b(m%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${m} for depthToSpace with input shape ${d.shape}`));const y={x:d},x={blockSize:t,dataFormat:n};return r.a.runKernel(o.P,y,x)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545),h=n(550);const f=Object(d.b)({dilation2d_:function(e,filter,t,n,d=[1,1],f="NHWC"){const m=Object(c.a)(e,"x","dilation2d"),y=Object(c.a)(filter,"filter","dilation2d");l.b(3===m.rank||4===m.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${m.rank}.`)),l.b(3===y.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${y.rank}.`)),l.b("NHWC"===f,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${f}`));let x=m,O=!1;3===m.rank&&(x=Object(h.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]]),O=!0);const v={x:x,filter:y},k={strides:t,pad:n,dilations:d},w=r.a.runKernel(o.U,v,k);return O?Object(h.a)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(562),o=n(546),c=n(555),l=n(647),d=n(545),h=n(574),f=n(560);const m=Object(d.b)({divNoNan_:function(a,b){let e=Object(o.a)(a,"a","div"),t=Object(o.a)(b,"b","div");[e,t]=Object(r.makeTypesMatch)(e,t);const n=Object(c.a)(e,t),d=Object(f.a)(n),m=Object(l.a)(t,d);return Object(h.a)(m,d,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(546),o=n(599),c=n(580),l=n(545),d=n(550);const h=Object(l.b)({dot_:function(e,t){const n=Object(r.a)(e,"t1","dot"),l=Object(r.a)(t,"t2","dot");o.b(!(1!==n.rank&&2!==n.rank||1!==l.rank&&2!==l.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${l.rank}.`));const h=1===n.rank?n.size:n.shape[1],f=1===l.rank?l.size:l.shape[0];if(o.b(h===f,(()=>`Error in dot: inner dimensions of inputs must match, but got ${h} and ${f}.`)),1===n.rank&&1===l.rank){const e=Object(d.a)(n,[1,-1]),t=Object(d.a)(l,[-1,1]),r=Object(c.a)(e,t);return Object(d.a)(r,[])}if(1===n.rank&&2===l.rank){const e=Object(d.a)(n,[1,-1]),t=Object(d.a)(l,[l.shape[0],l.shape[1]]),r=Object(c.a)(e,t);return Object(d.a)(r,[r.size])}if(2===n.rank&&1===l.rank){const e=Object(d.a)(l,[-1,1]),t=Object(c.a)(n,e);return Object(d.a)(t,[t.size])}{const e=Object(d.a)(l,[l.shape[0],l.shape[1]]);return Object(c.a)(n,e)}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(648),o=n(545);const c=Object(o.b)({euclideanNorm_:function(e,t=null,n=!1){return Object(r.a)(e,"euclidean",t,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545),h=n(550);const f=Object(d.b)({localResponseNormalization_:function(e,t=5,n=1,d=1,f=.5){const m=Object(c.a)(e,"x","localResponseNormalization");l.b(4===m.rank||3===m.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${m.rank}.`)),l.b(l.v(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let y=m,x=!1;3===m.rank&&(x=!0,y=Object(h.a)(m,[1,m.shape[0],m.shape[1],m.shape[2]]));const O={x:y},v={depthRadius:t,bias:n,alpha:d,beta:f},k=r.a.runKernel(o.yb,O,v);return x?Object(h.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({log1p_:function(e){const t={x:Object(c.a)(e,"x","log1p")};return r.a.runKernel(o.Fb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({softplus_:function(e){const t={x:Object(c.a)(e,"x","softplus")};return r.a.runKernel(o.Nc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(546),o=n(558),c=n(604),l=n(652),d=n(684),h=n(545);const f=Object(h.b)({logicalXor_:function(a,b){const e=Object(r.a)(a,"a","logicalXor","bool"),t=Object(r.a)(b,"b","logicalXor","bool");return Object(o.assertAndGetBroadcastShape)(e.shape,t.shape),Object(c.a)(Object(d.a)(a,b),Object(l.a)(Object(c.a)(a,b)))}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({mirrorPad_:function(e,t,n){l.b("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const d=Object(c.a)(e,"x","mirrorPad");if(0===d.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");l.b(t.length===d.rank,(()=>`Padding doesn't match input. Must be ${d.rank}. Got ${t.length}.`));const h="reflect"===n?1:0;for(let i=0;i<d.rank;i++)l.b(2===t[i].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),l.b(t[i][0]>=0&&t[i][0]<=d.shape[i]-h&&t[i][1]>=0&&t[i][1]<=d.shape[i]-h,(()=>`Padding in dimension ${i} cannot be greater than or equal to ${d.shape[i]-h} or less than 0 for input of shape ${d.shape}`));const f={paddings:t,mode:n},m={x:d};return r.a.runKernel(o.Wb,m,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(562),l=n(546),d=n(545);const h=Object(d.b)({mod_:function(a,b){let e=Object(l.a)(a,"a","mod"),t=Object(l.a)(b,"b","mod");[e,t]=Object(c.makeTypesMatch)(e,t);const n={a:e,b:t};return r.a.runKernel(o.Xb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return x}));var r=n(546),o=n(599),c=n(673),l=n(645),d=n(566),h=n(685),f=n(545),m=n(550),y=n(654);const x=Object(f.b)({pool_:function(input,e,t,n,f,x,O){null==f&&(f=[1,1]),null==x&&(x=1),0===n&&(n="valid");const v=Object(r.a)(input,"x","maxPool");let k=v,w=!1;3===v.rank&&(w=!0,k=Object(m.a)(v,[1,v.shape[0],v.shape[1],v.shape[2]])),o.b(d.i(x,f),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${x} and dilations '${f}'`));const S=d.f(k.shape,e,x,f,n),I=[S.dilationHeight,S.dilationWidth];let N;N="same"===n?function(e,t){const n=e.map(((s,i)=>s+(s-1)*(t[i]-1))).map((s=>s-1)),r=n.map((s=>Math.floor(s/2))),o=n.map(((s,i)=>s-r[i]));return n.map(((e,i)=>[r[i],o[i]]))}([S.filterHeight,S.filterWidth],I):[[0,0],[0,0]];const j=1===I[0]&&1===I[1],[T,C]=function(e,t,n){const r=n.map((b=>b[0])),o=n.map((b=>b[1])),c=e.concat(r,o),l=t.map(((b,i)=>(b-c[i]%b)%b)),d=o.map(((s,i)=>s+l[i])),h=t.map(((e,i)=>[r[i],d[i]])),f=t.map(((e,i)=>[0,l[i]]));return[h,f]}([S.inHeight,S.inWidth],I,N),$=j?n:"valid",E=j?k:Object(y.a)(k,I,T),A=("avg"===t?()=>Object(c.a)(E,e,x,$,O):()=>Object(h.a)(E,e,x,$,O))(),R=j?A:Object(l.a)(A,I,C);return w?Object(m.a)(R,[R.shape[1],R.shape[2],R.shape[3]]):R}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(554),d=n(545);const h=Object(d.b)({prod_:function(e,t=null,n=!1){let d=Object(c.a)(e,"x","prod");"bool"===d.dtype&&(d=Object(l.a)(d,"int32"));const h={x:d},f={axis:t,keepDims:n};return r.a.runKernel(o.mc,h,f)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"TEST_EPSILON_FLOAT16",(function(){return d})),n.d(t,"expectArraysClose",(function(){return h})),n.d(t,"testEpsilon",(function(){return f})),n.d(t,"expectPromiseToFail",(function(){return y})),n.d(t,"expectArraysEqual",(function(){return x})),n.d(t,"expectNumbersClose",(function(){return O})),n.d(t,"expectValuesInRange",(function(){return k})),n.d(t,"expectArrayBuffersEqual",(function(){return w})),n.d(t,"encodeStrings",(function(){return S})),n.d(t,"createVideoElement",(function(){return I})),n.d(t,"play",(function(){return N}));var r=n(547),o=n(546),c=n(599),l=n(549);const d=.1;function h(e,t,n){return null==n&&(n=f()),m(e,t,((a,b)=>v(a,b,n)))}function f(){return 32===r.a.backend.floatPrecision()?.001:d}function m(e,t,n){let r=!0;if((Object(c.A)(e)||Object(c.A)(t))&&(r=!1),Object(c.A)(e)&&Object(c.A)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Object(o.c)(e),r=Object(o.c)(t);if(!Object(c.a)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const l=Object(c.A)(e)?e:Object(c.m)(e),d=Object(c.A)(t)?t:Object(c.m)(t);if(l.length!==d.length)throw new Error(`Arrays have different lengths actual: ${l.length} vs expected: ${d.length}.\nActual:   ${l}.\nExpected: ${d}.`);for(let i=0;i<d.length;++i){const a=l[i],e=d[i];if(!n(a,e))throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\nActual:   ${l}.\nExpected: ${d}.`)}"undefined"!=typeof expect&&expect().nothing()}function y(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function x(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Object(c.z)(e)||Object(c.z)(e[0])||Object(c.z)(t)||Object(c.z)(t[0])?m(e,n,((a,b)=>a==b)):m(e,t,((a,b)=>v(a,b,0)))}function O(a,e,t){if(null==t&&(t=f()),!v(a,e,t))throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);"undefined"!=typeof expect&&expect().nothing()}function v(a,e,t){return!isFinite(a)&&!isFinite(e)||!(isNaN(a)||isNaN(e)||Math.abs(a-e)>t)}function k(e,t,n){for(let i=0;i<e.length;i++)if(e[i]<t||e[i]>n)throw new Error(`Value out of range:${e[i]} low: ${t}, high: ${n}`)}function w(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let i=0;i<r.length;i++)if(n[i]!==r[i])throw new Error(`Expected ArrayBuffer value at ${i} to be ${r[i]} but got ${n[i]} instead`)}function S(a){for(let i=0;i<a.length;i++){const e=a[i];Array.isArray(e)?S(e):a[i]=Object(l.encodeString)(e)}return a}function I(source){const video=document.createElement("video");return"playsInline"in video&&(video.playsInline=!0),video.muted=!0,video.loop=!0,video.style.position="fixed",video.style.left="0px",video.style.top="0px",video.preload="auto",video.appendChild(source),new Promise((e=>{video.addEventListener("loadeddata",(t=>e(video))),video.load()}))}async function N(video){await video.play(),"requestVideoFrameCallback"in video&&await new Promise((e=>{video.requestVideoFrameCallback(e)}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({round_:function(e){const t={x:Object(c.a)(e,"x","round")};return r.a.runKernel(o.Bc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({rsqrt_:function(e){const t={x:Object(c.a)(e,"x","rsqrt","float32")};return r.a.runKernel(o.Cc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({selu_:function(e){const t={x:Object(c.a)(e,"x","selu")};return r.a.runKernel(o.Gc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(546),o=n(599),c=n(602),l=n(646),d=n(545),h=n(550);const f=Object(d.b)({separableConv2d_:function(e,t,n,d,f,m=[1,1],y="NHWC"){const x=Object(r.a)(e,"x","separableConv2d"),O=Object(r.a)(t,"depthwiseFilter","separableConv2d"),v=Object(r.a)(n,"pointwiseFilter","separableConv2d");let k=x,w=!1;if(3===x.rank&&(w=!0,k=Object(h.a)(x,[1,x.shape[0],x.shape[1],x.shape[2]])),"NCHW"===y)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");o.b(4===k.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${k.rank}.`)),o.b(4===O.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${O.rank}.`)),o.b(4===v.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${O.rank}.`)),o.b(1===v.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${v.shape[0]}.`)),o.b(1===v.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${v.shape[1]}.`));const S=O.shape[2],I=O.shape[3];o.b(v.shape[2]===S*I,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${S*I}, but got ${v.shape[2]}.`));const N=Object(l.a)(k,O,d,f,y,m),j=Object(c.a)(N,v,1,"valid",y);return w?Object(h.a)(j,[j.shape[1],j.shape[2],j.shape[3]]):j}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({sin_:function(e){const t={x:Object(c.a)(e,"x","sin","float32")};return r.a.runKernel(o.Jc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({sinh_:function(e){const t={x:Object(c.a)(e,"x","sinh")};return r.a.runKernel(o.Kc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(594),o=n(573),c=n(651),l=n(551),d=n(545),h=n(655),f=n(550),m=n(590),y=n(559),x=n(571),O=n(693);const v=Object(d.b)({irfft_:function(input){const e=input.shape[input.shape.length-1],t=input.size/e;let n;if(e<=2){const r=Object(f.a)(input,[t,e]);n=Object(O.a)(r)}else{const d=[t,2*(e-1)],v=Object(f.a)(Object(h.a)(input),[t,e]),k=Object(f.a)(Object(c.a)(input),[t,e]),w=Object(m.a)(Object(x.a)(v,[0,1],[t,e-2]),1),S=Object(l.a)(Object(m.a)(Object(x.a)(k,[0,1],[t,e-2]),1),Object(y.a)(-1)),I=Object(o.a)([v,w],1),i=Object(o.a)([k,S],1),N=Object(f.a)(Object(r.a)(I,i),[d[0],d[1]]);n=Object(O.a)(N)}if(n=Object(h.a)(n),3===input.rank&&0!==input.shape[0]){const e=n,t=input.shape[0];n=Object(f.a)(n,[t,n.shape[0]/t,n.shape[1]]),e.dispose()}return n}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(546),o=n(599),c=n(593);function l(e,t,n){if(Object(o.d)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const l=Object(r.c)(e,n);if(3!==l.length&&1!==l.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===l.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Object(c.a)(e,t,l,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({topk_:function(e,t=1,n=!0){const l=Object(c.a)(e,"x","topk");if(0===l.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const d=l.shape[l.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>d)throw new Error(`'k' passed to topk() must be <= the last dimension (${d}) but got ${t}`);const h={x:l},f={k:t,sorted:n},[m,y]=r.a.runKernel(o.id,h,f);return{values:m,indices:y}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({unique_:function(e,t=0){const n=Object(c.a)(e,"x","unique","string_or_numeric");Object(l.b)(n.rank>0,(()=>"The input tensor must be at least 1D"));const d={x:n},h={axis:t},[f,m]=r.a.runKernel(o.ld,d,h);return{values:f,indices:m}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(589);function o(e,t){const n=[];for(let i=0;i<t.length;i++)t[i]&&n.push(i);const o=Object(r.a)(e,"int32"),c=Object(r.a)([n.length,e.length],"int32");for(let i=0;i<n.length;i++){const t=o.indexToLoc(n[i]),r=i*e.length;c.values.set(t,r)}return c.toTensor()}},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(599),l=n(566),d=n(545),h=n(550);const f=Object(d.b)({conv2DBackpropFilter_:function(e,t,n,d,f,m="NHWC",y){let x=e;3===e.rank&&(x=Object(h.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let O=t;3===O.rank&&(O=Object(h.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),c.b(4===x.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${x.shape}.`)),c.b(4===O.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${O.shape}.`)),c.b(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const v="NHWC"===m?x.shape[3]:x.shape[1],k="NHWC"===m?O.shape[3]:O.shape[1];c.b(v===n[2],(()=>`Error in conv2dDerFilter: depth of input ${v}) must match input depth in filter (${n[2]}.`)),c.b(k===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${k}) must match output depth for filter (${n[3]}).`)),l.a("conv2dDerFilter",f,y);const w={x:x,dy:O},S={strides:d,pad:f,dataFormat:m,dimRoundingMode:y,filterShape:n};return r.a.runKernel(o.E,w,S)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}));const r=1.7580993408473768,o=1.0507009873554805},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"d",(function(){return l})),n.d(t,"f",(function(){return h})),n.d(t,"c",(function(){return f})),n.d(t,"e",(function(){return m})),n.d(t,"a",(function(){return y}));var r=n(543);function o(input,e){return c(input,e)}function c(input,e,t=new Map,n=new Set){if(null==input)return null;if("function"==typeof Blob&&input instanceof Blob)return input.slice();if(n.has(input))throw new Error("Circular references are not supported.");if(t.has(input))return t.get(input);const r=e(input);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(m(input)){const r=Array.isArray(input)?[]:{};n.add(input);for(const o in input){const l=c(input[o],e,t,n);r[o]=l}return n.delete(input),input.__proto__&&(r.__proto__=input.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${input}`)}return t.set(input,r.value),r.value}function l(e,t=h){return d(e,t)}function d(e,t,n=new Set){const input=e[0];if(n.has(input))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(m(input)){const r=Array.isArray(input)?[]:{};n.add(input);for(const o in input){const c=d(e.map((e=>e[o])),t,n);r[o]=c}return n.delete(input),r}throw new Error(`Can't recurse into non-iterable type: ${input}`)}return r.value}function h(e){return null===e?null:m(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function f(input,e){const t=new Map;c(input,e,t);for(const e of Array.from(t.keys())){const n=t.get(e);if(r.util.isPromise(n)){const r=await n;t.set(e,r)}}return c(input,e,t)}function m(e){let t=!1;if(r.env().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:r}=n(966);t=e instanceof r}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof r.Tensor)&&!(e instanceof Promise)&&!t)}function y(e){return null==e||(null===(t=e)||"object"!=typeof t&&"function"!=typeof t)||Array.isArray(e)||"object"==typeof e&&e instanceof r.Tensor||r.util.isTypedArray(e);var t}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"d",(function(){return Ce})),n.d(t,"e",(function(){return Ee})),n.d(t,"f",(function(){return Re})),n.d(t,"g",(function(){return De})),n.d(t,"gc",(function(){return ze})),n.d(t,"rc",(function(){return Te})),n.d(t,"sc",(function(){return Pe})),n.d(t,"zc",(function(){return Le})),n.d(t,"Sc",(function(){return Me})),n.d(t,"xd",(function(){return ne.a})),n.d(t,"yd",(function(){return ne.b})),n.d(t,"Hd",(function(){return ne.c})),n.d(t,"Cc",(function(){return Be.a})),n.d(t,"fi",(function(){return Be.b})),n.d(t,"Di",(function(){return Be.c})),n.d(t,"Kd",(function(){return We.b})),n.d(t,"Ld",(function(){return We.c})),n.d(t,"Md",(function(){return We.d})),n.d(t,"Nd",(function(){return We.e})),n.d(t,"Od",(function(){return We.f})),n.d(t,"Pd",(function(){return We.g})),n.d(t,"Qd",(function(){return We.h})),n.d(t,"Rd",(function(){return We.i})),n.d(t,"Sd",(function(){return We.j})),n.d(t,"Td",(function(){return We.k})),n.d(t,"Ud",(function(){return We.l})),n.d(t,"Vd",(function(){return We.m})),n.d(t,"Wd",(function(){return We.n})),n.d(t,"Xd",(function(){return We.o})),n.d(t,"Yd",(function(){return We.p})),n.d(t,"Zd",(function(){return We.q})),n.d(t,"ce",(function(){return We.r})),n.d(t,"he",(function(){return We.w})),n.d(t,"de",(function(){return We.s})),n.d(t,"ee",(function(){return We.t})),n.d(t,"fe",(function(){return We.u})),n.d(t,"ge",(function(){return We.v})),n.d(t,"ie",(function(){return We.x})),n.d(t,"ke",(function(){return We.z})),n.d(t,"le",(function(){return We.A})),n.d(t,"oe",(function(){return We.B})),n.d(t,"pe",(function(){return We.C})),n.d(t,"qe",(function(){return We.D})),n.d(t,"re",(function(){return We.E})),n.d(t,"se",(function(){return We.F})),n.d(t,"te",(function(){return We.G})),n.d(t,"ue",(function(){return We.H})),n.d(t,"ve",(function(){return We.I})),n.d(t,"we",(function(){return We.J})),n.d(t,"xe",(function(){return We.K})),n.d(t,"ye",(function(){return We.L})),n.d(t,"ze",(function(){return We.M})),n.d(t,"Ae",(function(){return We.N})),n.d(t,"Be",(function(){return We.O})),n.d(t,"Ce",(function(){return We.P})),n.d(t,"De",(function(){return We.Q})),n.d(t,"Fe",(function(){return We.R})),n.d(t,"Ge",(function(){return We.S})),n.d(t,"Ie",(function(){return We.U})),n.d(t,"Je",(function(){return We.V})),n.d(t,"Le",(function(){return We.W})),n.d(t,"Ne",(function(){return We.X})),n.d(t,"Oe",(function(){return We.Y})),n.d(t,"Qe",(function(){return We.Z})),n.d(t,"Re",(function(){return We.ab})),n.d(t,"Ve",(function(){return We.bb})),n.d(t,"We",(function(){return We.cb})),n.d(t,"Xe",(function(){return We.db})),n.d(t,"Ze",(function(){return We.fb})),n.d(t,"af",(function(){return We.gb})),n.d(t,"gf",(function(){return We.ib})),n.d(t,"hf",(function(){return We.jb})),n.d(t,"if",(function(){return We.kb})),n.d(t,"jf",(function(){return We.lb})),n.d(t,"kf",(function(){return We.mb})),n.d(t,"lf",(function(){return We.nb})),n.d(t,"mf",(function(){return We.ob})),n.d(t,"of",(function(){return We.qb})),n.d(t,"rf",(function(){return We.rb})),n.d(t,"sf",(function(){return We.sb})),n.d(t,"uf",(function(){return We.ub})),n.d(t,"Df",(function(){return We.wb})),n.d(t,"Ef",(function(){return We.xb})),n.d(t,"Gf",(function(){return We.zb})),n.d(t,"Lf",(function(){return We.Db})),n.d(t,"Mf",(function(){return We.Eb})),n.d(t,"Nf",(function(){return We.Fb})),n.d(t,"Qf",(function(){return We.Gb})),n.d(t,"Rf",(function(){return We.Hb})),n.d(t,"Sf",(function(){return We.Ib})),n.d(t,"Uf",(function(){return We.Kb})),n.d(t,"Vf",(function(){return We.Lb})),n.d(t,"Wf",(function(){return We.Mb})),n.d(t,"Xf",(function(){return We.Nb})),n.d(t,"Yf",(function(){return We.Ob})),n.d(t,"Zf",(function(){return We.Pb})),n.d(t,"ag",(function(){return We.Qb})),n.d(t,"bg",(function(){return We.Rb})),n.d(t,"cg",(function(){return We.Sb})),n.d(t,"dg",(function(){return We.Tb})),n.d(t,"eg",(function(){return We.Ub})),n.d(t,"gg",(function(){return We.Wb})),n.d(t,"hg",(function(){return We.Xb})),n.d(t,"jg",(function(){return We.Yb})),n.d(t,"kg",(function(){return We.Zb})),n.d(t,"lg",(function(){return We.ac})),n.d(t,"mg",(function(){return We.bc})),n.d(t,"ng",(function(){return We.cc})),n.d(t,"og",(function(){return We.dc})),n.d(t,"qg",(function(){return We.ec})),n.d(t,"rg",(function(){return We.fc})),n.d(t,"sg",(function(){return We.gc})),n.d(t,"tg",(function(){return We.hc})),n.d(t,"ug",(function(){return We.ic})),n.d(t,"vg",(function(){return We.jc})),n.d(t,"xg",(function(){return We.lc})),n.d(t,"yg",(function(){return We.mc})),n.d(t,"zg",(function(){return We.nc})),n.d(t,"Ag",(function(){return We.oc})),n.d(t,"Dg",(function(){return We.qc})),n.d(t,"Eg",(function(){return We.rc})),n.d(t,"Fg",(function(){return We.sc})),n.d(t,"Gg",(function(){return We.tc})),n.d(t,"Ig",(function(){return We.vc})),n.d(t,"Jg",(function(){return We.wc})),n.d(t,"Kg",(function(){return We.xc})),n.d(t,"Lg",(function(){return We.yc})),n.d(t,"Mg",(function(){return We.zc})),n.d(t,"Ng",(function(){return We.Ac})),n.d(t,"Og",(function(){return We.Bc})),n.d(t,"Pg",(function(){return We.Cc})),n.d(t,"Qg",(function(){return We.Dc})),n.d(t,"Rg",(function(){return We.Ec})),n.d(t,"Sg",(function(){return We.Fc})),n.d(t,"Ug",(function(){return We.Gc})),n.d(t,"Vg",(function(){return We.Hc})),n.d(t,"Wg",(function(){return We.Ic})),n.d(t,"Xg",(function(){return We.Jc})),n.d(t,"Yg",(function(){return We.Kc})),n.d(t,"Zg",(function(){return We.Lc})),n.d(t,"ah",(function(){return We.Mc})),n.d(t,"ch",(function(){return We.Nc})),n.d(t,"dh",(function(){return We.Oc})),n.d(t,"hh",(function(){return We.Pc})),n.d(t,"ih",(function(){return We.Qc})),n.d(t,"kh",(function(){return We.Rc})),n.d(t,"lh",(function(){return We.Sc})),n.d(t,"mh",(function(){return We.Tc})),n.d(t,"nh",(function(){return We.Uc})),n.d(t,"oh",(function(){return We.Vc})),n.d(t,"ph",(function(){return We.Wc})),n.d(t,"rh",(function(){return We.Yc})),n.d(t,"sh",(function(){return We.Zc})),n.d(t,"th",(function(){return We.ad})),n.d(t,"xh",(function(){return We.dd})),n.d(t,"yh",(function(){return We.ed})),n.d(t,"Ch",(function(){return We.fd})),n.d(t,"Dh",(function(){return We.gd})),n.d(t,"Eh",(function(){return We.hd})),n.d(t,"Gh",(function(){return We.jd})),n.d(t,"Hh",(function(){return We.kd})),n.d(t,"Ih",(function(){return We.ld})),n.d(t,"Jh",(function(){return We.md})),n.d(t,"Kh",(function(){return We.nd})),n.d(t,"Lh",(function(){return We.od})),n.d(t,"Mh",(function(){return We.pd})),n.d(t,"Oh",(function(){return We.qd})),n.d(t,"Ph",(function(){return We.rd})),n.d(t,"Qh",(function(){return We.sd})),n.d(t,"nf",(function(){return We.pb})),n.d(t,"Ff",(function(){return We.yb})),n.d(t,"Kf",(function(){return We.Cb})),n.d(t,"qh",(function(){return We.Xc})),n.d(t,"Uh",(function(){return We.wd})),n.d(t,"Vh",(function(){return We.xd})),n.d(t,"Wh",(function(){return We.yd})),n.d(t,"Xh",(function(){return We.zd})),n.d(t,"Yh",(function(){return We.Ad})),n.d(t,"Zh",(function(){return We.Bd})),n.d(t,"ai",(function(){return We.Cd})),n.d(t,"bi",(function(){return We.Dd})),n.d(t,"di",(function(){return We.Fd})),n.d(t,"ei",(function(){return We.Gd})),n.d(t,"gi",(function(){return We.Hd})),n.d(t,"hi",(function(){return We.Id})),n.d(t,"ii",(function(){return We.Jd})),n.d(t,"ji",(function(){return We.Kd})),n.d(t,"ki",(function(){return We.Ld})),n.d(t,"li",(function(){return We.Md})),n.d(t,"mi",(function(){return We.Nd})),n.d(t,"ni",(function(){return We.Od})),n.d(t,"oi",(function(){return We.Pd})),n.d(t,"si",(function(){return We.Qd})),n.d(t,"ui",(function(){return We.Rd})),n.d(t,"xi",(function(){return We.Td})),n.d(t,"yi",(function(){return We.Ud})),n.d(t,"Bi",(function(){return We.Vd})),n.d(t,"Ci",(function(){return We.Wd})),n.d(t,"Ei",(function(){return We.Xd})),n.d(t,"Ii",(function(){return We.Yd})),n.d(t,"Li",(function(){return We.Zd})),n.d(t,"Mi",(function(){return We.ae})),n.d(t,"Ni",(function(){return We.be})),n.d(t,"Oi",(function(){return We.ce})),n.d(t,"je",(function(){return We.y})),n.d(t,"wi",(function(){return We.Sd})),n.d(t,"Cg",(function(){return We.pc})),n.d(t,"wg",(function(){return We.kc})),n.d(t,"uh",(function(){return We.bd})),n.d(t,"wh",(function(){return We.cd})),n.d(t,"Sh",(function(){return We.ud})),n.d(t,"vf",(function(){return We.vb})),n.d(t,"Ye",(function(){return We.eb})),n.d(t,"df",(function(){return We.hb})),n.d(t,"He",(function(){return We.T})),n.d(t,"If",(function(){return We.Bb})),n.d(t,"Hg",(function(){return We.uc})),n.d(t,"oc",(function(){return We.a})),n.d(t,"Hf",(function(){return We.Ab})),n.d(t,"Tf",(function(){return We.Jb})),n.d(t,"fg",(function(){return We.Vb})),n.d(t,"Th",(function(){return We.vd})),n.d(t,"tf",(function(){return We.tb})),n.d(t,"Fh",(function(){return We.id})),n.d(t,"Rh",(function(){return We.td})),n.d(t,"ci",(function(){return We.Ed})),n.d(t,"Gc",(function(){return Ve.a})),n.d(t,"vi",(function(){return Ue})),n.d(t,"cf",(function(){return Oe.g})),n.d(t,"bf",(function(){return Oe.f})),n.d(t,"Se",(function(){return Oe.c})),n.d(t,"Me",(function(){return Oe.b})),n.d(t,"Ue",(function(){return Oe.e})),n.d(t,"ef",(function(){return Oe.h})),n.d(t,"pg",(function(){return Oe.m})),n.d(t,"Tg",(function(){return Oe.n})),n.d(t,"ri",(function(){return Oe.t})),n.d(t,"Te",(function(){return Oe.d})),n.d(t,"Of",(function(){return Oe.l})),n.d(t,"ti",(function(){return Oe.u})),n.d(t,"Ah",(function(){return Oe.r})),n.d(t,"bh",(function(){return Oe.o})),n.d(t,"xf",(function(){return Oe.k})),n.d(t,"jh",(function(){return Oe.q})),n.d(t,"pf",(function(){return Oe.i})),n.d(t,"qf",(function(){return Oe.j})),n.d(t,"eh",(function(){return Oe.p})),n.d(t,"ae",(function(){return Oe.a})),n.d(t,"Bh",(function(){return Oe.s})),n.d(t,"zf",(function(){return te.c})),n.d(t,"yf",(function(){return te.b})),n.d(t,"Af",(function(){return te.d})),n.d(t,"gh",(function(){return te.f})),n.d(t,"fh",(function(){return te.e})),n.d(t,"Ai",(function(){return te.h})),n.d(t,"zi",(function(){return te.g})),n.d(t,"Ee",(function(){return te.a})),n.d(t,"Ke",(function(){return Ne.a})),n.d(t,"Bf",(function(){return Ne.b})),n.d(t,"Cf",(function(){return Ne.c})),n.d(t,"Gi",(function(){return Ne.d})),n.d(t,"Hi",(function(){return Ne.e})),n.d(t,"Ji",(function(){return Ne.f})),n.d(t,"gb",(function(){return y.b})),n.d(t,"ff",(function(){return y.c})),n.d(t,"cb",(function(){return y.a})),n.d(t,"Ki",(function(){return xe})),n.d(t,"Bg",(function(){return Ge.a})),n.d(t,"ne",(function(){return c})),n.d(t,"Jf",(function(){return r})),n.d(t,"ig",(function(){return o})),n.d(t,"zh",(function(){return d})),n.d(t,"qi",(function(){return ge})),n.d(t,"Fi",(function(){return ye})),n.d(t,"be",(function(){return f})),n.d(t,"me",(function(){return J})),n.d(t,"pi",(function(){return be})),n.d(t,"Nh",(function(){return he})),n.d(t,"wf",(function(){return l})),n.d(t,"vh",(function(){return de})),n.d(t,"Pe",(function(){return en})),n.d(t,"Pf",(function(){return m})),n.d(t,"Fb",(function(){return rn.b})),n.d(t,"S",(function(){return rn.a})),n.d(t,"a",(function(){return ee.a})),n.d(t,"b",(function(){return ee.b})),n.d(t,"c",(function(){return ee.c})),n.d(t,"h",(function(){return ee.d})),n.d(t,"i",(function(){return ee.e})),n.d(t,"j",(function(){return ee.f})),n.d(t,"k",(function(){return ee.g})),n.d(t,"l",(function(){return ee.h})),n.d(t,"m",(function(){return ee.i})),n.d(t,"n",(function(){return ee.j})),n.d(t,"o",(function(){return ee.k})),n.d(t,"p",(function(){return ee.l})),n.d(t,"r",(function(){return ee.n})),n.d(t,"q",(function(){return ee.m})),n.d(t,"s",(function(){return ee.o})),n.d(t,"v",(function(){return ee.r})),n.d(t,"t",(function(){return ee.p})),n.d(t,"u",(function(){return ee.q})),n.d(t,"w",(function(){return ee.s})),n.d(t,"x",(function(){return ee.t})),n.d(t,"y",(function(){return ee.u})),n.d(t,"A",(function(){return ee.w})),n.d(t,"z",(function(){return ee.v})),n.d(t,"B",(function(){return ee.x})),n.d(t,"C",(function(){return ee.y})),n.d(t,"D",(function(){return ee.z})),n.d(t,"E",(function(){return ee.A})),n.d(t,"F",(function(){return ee.B})),n.d(t,"G",(function(){return ee.C})),n.d(t,"H",(function(){return ee.D})),n.d(t,"I",(function(){return ee.E})),n.d(t,"J",(function(){return ee.F})),n.d(t,"K",(function(){return ee.G})),n.d(t,"L",(function(){return ee.H})),n.d(t,"M",(function(){return ee.I})),n.d(t,"N",(function(){return ee.J})),n.d(t,"O",(function(){return ee.K})),n.d(t,"Q",(function(){return ee.M})),n.d(t,"R",(function(){return ee.N})),n.d(t,"P",(function(){return ee.L})),n.d(t,"T",(function(){return ee.O})),n.d(t,"U",(function(){return ee.P})),n.d(t,"V",(function(){return ee.Q})),n.d(t,"W",(function(){return ee.R})),n.d(t,"X",(function(){return ee.S})),n.d(t,"Y",(function(){return ee.T})),n.d(t,"Z",(function(){return ee.U})),n.d(t,"bb",(function(){return ee.W})),n.d(t,"ab",(function(){return ee.V})),n.d(t,"Ec",(function(){return ee.qc})),n.d(t,"db",(function(){return ee.X})),n.d(t,"eb",(function(){return ee.Y})),n.d(t,"fb",(function(){return ee.Z})),n.d(t,"ib",(function(){return ee.bb})),n.d(t,"hb",(function(){return ee.ab})),n.d(t,"jb",(function(){return ee.cb})),n.d(t,"kb",(function(){return ee.db})),n.d(t,"lb",(function(){return ee.eb})),n.d(t,"mb",(function(){return ee.fb})),n.d(t,"nb",(function(){return ee.gb})),n.d(t,"ob",(function(){return ee.hb})),n.d(t,"pb",(function(){return ee.ib})),n.d(t,"qb",(function(){return ee.jb})),n.d(t,"sb",(function(){return ee.lb})),n.d(t,"wb",(function(){return ee.pb})),n.d(t,"vb",(function(){return ee.ob})),n.d(t,"xb",(function(){return ee.qb})),n.d(t,"yb",(function(){return ee.rb})),n.d(t,"Ab",(function(){return ee.tb})),n.d(t,"zb",(function(){return ee.sb})),n.d(t,"Bb",(function(){return ee.ub})),n.d(t,"Cb",(function(){return ee.vb})),n.d(t,"Db",(function(){return ee.wb})),n.d(t,"Eb",(function(){return ee.xb})),n.d(t,"Ib",(function(){return ee.Ab})),n.d(t,"Jb",(function(){return ee.Bb})),n.d(t,"Kb",(function(){return ee.Cb})),n.d(t,"Lb",(function(){return ee.Db})),n.d(t,"Mb",(function(){return ee.Eb})),n.d(t,"Nb",(function(){return ee.Fb})),n.d(t,"Pb",(function(){return ee.Hb})),n.d(t,"Qb",(function(){return ee.Ib})),n.d(t,"Rb",(function(){return ee.Jb})),n.d(t,"Sb",(function(){return ee.Kb})),n.d(t,"Ob",(function(){return ee.Gb})),n.d(t,"Tb",(function(){return ee.Lb})),n.d(t,"Gb",(function(){return ee.yb})),n.d(t,"Hb",(function(){return ee.zb})),n.d(t,"Ub",(function(){return ee.Mb})),n.d(t,"ac",(function(){return ee.Sb})),n.d(t,"Vb",(function(){return ee.Nb})),n.d(t,"Yb",(function(){return ee.Qb})),n.d(t,"Wb",(function(){return ee.Ob})),n.d(t,"Xb",(function(){return ee.Pb})),n.d(t,"Zb",(function(){return ee.Rb})),n.d(t,"bc",(function(){return ee.Tb})),n.d(t,"cc",(function(){return ee.Ub})),n.d(t,"dc",(function(){return ee.Vb})),n.d(t,"ec",(function(){return ee.Wb})),n.d(t,"fc",(function(){return ee.Xb})),n.d(t,"hc",(function(){return ee.Yb})),n.d(t,"ic",(function(){return ee.Zb})),n.d(t,"jc",(function(){return ee.ac})),n.d(t,"nc",(function(){return ee.ec})),n.d(t,"kc",(function(){return ee.bc})),n.d(t,"lc",(function(){return ee.cc})),n.d(t,"mc",(function(){return ee.dc})),n.d(t,"qc",(function(){return ee.gc})),n.d(t,"pc",(function(){return ee.fc})),n.d(t,"tc",(function(){return ee.hc})),n.d(t,"uc",(function(){return ee.ic})),n.d(t,"vc",(function(){return ee.jc})),n.d(t,"wc",(function(){return ee.kc})),n.d(t,"xc",(function(){return ee.lc})),n.d(t,"yc",(function(){return ee.mc})),n.d(t,"Ac",(function(){return ee.nc})),n.d(t,"Bc",(function(){return ee.oc})),n.d(t,"Dc",(function(){return ee.pc})),n.d(t,"Fc",(function(){return ee.rc})),n.d(t,"Hc",(function(){return ee.sc})),n.d(t,"Jc",(function(){return ee.uc})),n.d(t,"Mc",(function(){return ee.xc})),n.d(t,"Nc",(function(){return ee.yc})),n.d(t,"Kc",(function(){return ee.vc})),n.d(t,"Lc",(function(){return ee.wc})),n.d(t,"Ic",(function(){return ee.tc})),n.d(t,"Oc",(function(){return ee.zc})),n.d(t,"Qc",(function(){return ee.Bc})),n.d(t,"Rc",(function(){return ee.Cc})),n.d(t,"Tc",(function(){return ee.Dc})),n.d(t,"Uc",(function(){return ee.Ec})),n.d(t,"Vc",(function(){return ee.Fc})),n.d(t,"Wc",(function(){return ee.Gc})),n.d(t,"bd",(function(){return ee.Lc})),n.d(t,"Zc",(function(){return ee.Jc})),n.d(t,"ad",(function(){return ee.Kc})),n.d(t,"Yc",(function(){return ee.Ic})),n.d(t,"Xc",(function(){return ee.Hc})),n.d(t,"dd",(function(){return ee.Nc})),n.d(t,"ld",(function(){return ee.Vc})),n.d(t,"ud",(function(){return ee.ed})),n.d(t,"ed",(function(){return ee.Oc})),n.d(t,"kd",(function(){return ee.Uc})),n.d(t,"cd",(function(){return ee.Mc})),n.d(t,"fd",(function(){return ee.Pc})),n.d(t,"gd",(function(){return ee.Qc})),n.d(t,"hd",(function(){return ee.Rc})),n.d(t,"id",(function(){return ee.Sc})),n.d(t,"jd",(function(){return ee.Tc})),n.d(t,"nd",(function(){return ee.Xc})),n.d(t,"md",(function(){return ee.Wc})),n.d(t,"pd",(function(){return ee.Zc})),n.d(t,"qd",(function(){return ee.ad})),n.d(t,"rd",(function(){return ee.bd})),n.d(t,"sd",(function(){return ee.cd})),n.d(t,"td",(function(){return ee.dd})),n.d(t,"vd",(function(){return ee.fd})),n.d(t,"wd",(function(){return ee.gd})),n.d(t,"zd",(function(){return ee.hd})),n.d(t,"Ad",(function(){return ee.id})),n.d(t,"Bd",(function(){return ee.jd})),n.d(t,"Cd",(function(){return ee.kd})),n.d(t,"Dd",(function(){return ee.ld})),n.d(t,"Ed",(function(){return ee.md})),n.d(t,"Fd",(function(){return ee.nd})),n.d(t,"Gd",(function(){return ee.od})),n.d(t,"Id",(function(){return ee.pd})),n.d(t,"od",(function(){return ee.Yc})),n.d(t,"rb",(function(){return ee.kb})),n.d(t,"Pc",(function(){return ee.Ac})),n.d(t,"Jd",(function(){return ee.qd})),n.d(t,"tb",(function(){return ee.mb})),n.d(t,"ub",(function(){return ee.nb}));var r={};n.r(r),n.d(r,"copyModel",(function(){return V.b})),n.d(r,"listModels",(function(){return V.c})),n.d(r,"moveModel",(function(){return V.d})),n.d(r,"removeModel",(function(){return V.e})),n.d(r,"browserFiles",(function(){return S})),n.d(r,"browserHTTPRequest",(function(){return F})),n.d(r,"concatenateArrayBuffers",(function(){return x.d})),n.d(r,"decodeWeights",(function(){return x.e})),n.d(r,"encodeWeights",(function(){return x.f})),n.d(r,"fromMemory",(function(){return L})),n.d(r,"fromMemorySync",(function(){return P})),n.d(r,"getLoadHandlers",(function(){return O.b})),n.d(r,"getModelArtifactsForJSON",(function(){return x.g})),n.d(r,"getModelArtifactsInfoForJSON",(function(){return x.h})),n.d(r,"getSaveHandlers",(function(){return O.c})),n.d(r,"http",(function(){return _})),n.d(r,"isHTTPScheme",(function(){return A})),n.d(r,"loadWeights",(function(){return C})),n.d(r,"registerLoadRouter",(function(){return O.d})),n.d(r,"registerSaveRouter",(function(){return O.e})),n.d(r,"weightsLoaderFactory",(function(){return $})),n.d(r,"withSaveHandler",(function(){return B})),n.d(r,"withSaveHandlerSync",(function(){return W}));var o={};n.r(o),n.d(o,"confusionMatrix",(function(){return Z}));var c={};n.r(c),n.d(c,"fromPixelsAsync",(function(){return oe})),n.d(c,"toPixels",(function(){return ue})),n.d(c,"fromPixels",(function(){return ce}));var l={};n.r(l),n.d(l,"prepareAndValidate",(function(){return le}));var d={};n.r(d),n.d(d,"Serializable",(function(){return pe})),n.d(d,"SerializationMap",(function(){return fe})),n.d(d,"registerClass",(function(){return me}));var h={};n.r(h),n.d(h,"segOpComputeOptimalWindowSize",(function(){return Xt})),n.d(h,"computeOutShape",(function(){return Yt})),n.d(h,"collectGatherOpShapeInfo",(function(){return Zt}));var f={};n.r(f),n.d(f,"axesAreInnerMostDims",(function(){return He.b})),n.d(f,"combineLocations",(function(){return He.c})),n.d(f,"computeOutAndReduceShapes",(function(){return He.d})),n.d(f,"expandShapeToKeepDim",(function(){return He.e})),n.d(f,"assertAxesAreInnerMostDims",(function(){return He.a})),n.d(f,"getAxesPermutation",(function(){return He.f})),n.d(f,"getUndoAxesPermutation",(function(){return He.h})),n.d(f,"getInnerMostAxes",(function(){return He.g})),n.d(f,"getBroadcastDims",(function(){return J.getBroadcastDims})),n.d(f,"getReductionAxes",(function(){return J.getReductionAxes})),n.d(f,"assertAndGetBroadcastShape",(function(){return J.assertAndGetBroadcastShape})),n.d(f,"assertParamsConsistent",(function(){return qe})),n.d(f,"computeOutShape",(function(){return Ke})),n.d(f,"computeDilation2DInfo",(function(){return Ye.e})),n.d(f,"computePool2DInfo",(function(){return Ye.f})),n.d(f,"computePool3DInfo",(function(){return Ye.g})),n.d(f,"computeConv2DInfo",(function(){return Ye.b})),n.d(f,"computeConv3DInfo",(function(){return Ye.c})),n.d(f,"computeDefaultPad",(function(){return Ye.d})),n.d(f,"tupleValuesAreOne",(function(){return Ye.j})),n.d(f,"eitherStridesOrDilationsAreOne",(function(){return Ye.i})),n.d(f,"convertConv2DDataFormat",(function(){return Ye.h})),n.d(f,"checkPadOnDimRoundingMode",(function(){return Ye.a})),n.d(f,"getFusedDyActivation",(function(){return Ze.c})),n.d(f,"getFusedBiasGradient",(function(){return Ze.b})),n.d(f,"applyActivation",(function(){return Ze.a})),n.d(f,"shouldFuse",(function(){return Ze.d})),n.d(f,"RowPartitionType",(function(){return Xe})),n.d(f,"combineRaggedTensorToTensorShapes",(function(){return Je})),n.d(f,"getRowPartitionTypesHelper",(function(){return Qe})),n.d(f,"getRaggedRank",(function(){return et})),n.d(f,"validateDefaultValueShape",(function(){return tt})),n.d(f,"PARALLELIZE_THRESHOLD",(function(){return nt})),n.d(f,"computeOptimalWindowSize",(function(){return at})),n.d(f,"slice_util",(function(){return he})),n.d(f,"upcastType",(function(){return Be.c})),n.d(f,"getImageCenter",(function(){return st})),n.d(f,"getReshaped",(function(){return it})),n.d(f,"getPermuted",(function(){return ot})),n.d(f,"getReshapedPermuted",(function(){return ut})),n.d(f,"getSliceBeginCoords",(function(){return ct})),n.d(f,"getSliceSize",(function(){return lt})),n.d(f,"prepareAndValidate",(function(){return le})),n.d(f,"validateUpdateShape",(function(){return de.validateUpdateShape})),n.d(f,"validateInput",(function(){return de.validateInput})),n.d(f,"calculateShapes",(function(){return de.calculateShapes})),n.d(f,"SELU_SCALEALPHA",(function(){return ht.b})),n.d(f,"SELU_SCALE",(function(){return ht.a})),n.d(f,"ERF_P",(function(){return pt})),n.d(f,"ERF_A1",(function(){return ft})),n.d(f,"ERF_A2",(function(){return mt})),n.d(f,"ERF_A3",(function(){return bt})),n.d(f,"ERF_A4",(function(){return gt})),n.d(f,"ERF_A5",(function(){return yt})),n.d(f,"warn",(function(){return xt.b})),n.d(f,"log",(function(){return xt.a})),n.d(f,"mergeRealAndImagArrays",(function(){return Ot})),n.d(f,"splitRealAndImagArrays",(function(){return vt})),n.d(f,"complexWithEvenIndex",(function(){return kt})),n.d(f,"complexWithOddIndex",(function(){return wt})),n.d(f,"getComplexWithIndex",(function(){return St})),n.d(f,"assignToTypedArray",(function(){return It})),n.d(f,"exponents",(function(){return Nt})),n.d(f,"exponent",(function(){return jt})),n.d(f,"decodeEinsumEquation",(function(){return $t})),n.d(f,"getEinsumPermutation",(function(){return Et})),n.d(f,"checkEinsumDimSizes",(function(){return At})),n.d(f,"getEinsumComputePath",(function(){return Rt})),n.d(f,"isIdentityPermutation",(function(){return _t})),n.d(f,"prepareSplitSize",(function(){return Dt})),n.d(f,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(function(){return Mt})),n.d(f,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(function(){return zt})),n.d(f,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(function(){return Lt})),n.d(f,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(function(){return Pt})),n.d(f,"getSparseReshapeNegativeOutputDimErrorMessage",(function(){return Bt})),n.d(f,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(function(){return Wt})),n.d(f,"getSparseReshapeInputOutputMultipleErrorMessage",(function(){return Vt})),n.d(f,"getSparseReshapeInputOutputMismatchErrorMessage",(function(){return Ut})),n.d(f,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(function(){return Gt})),n.d(f,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(function(){return Ht})),n.d(f,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(function(){return qt})),n.d(f,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(function(){return Kt})),n.d(f,"segment_util",(function(){return h})),n.d(f,"fromUint8ToStringArray",(function(){return Jt})),n.d(f,"fromStringArrayToUint8",(function(){return Qt}));var m={};n.r(m),n.d(m,"nonMaxSuppressionV3Impl",(function(){return tn.a})),n.d(m,"nonMaxSuppressionV4Impl",(function(){return tn.b})),n.d(m,"nonMaxSuppressionV5Impl",(function(){return tn.c})),n.d(m,"whereImpl",(function(){return nn.a}));n(792),n(795),n(641);var y=n(567),x=n(578),O=n(584);function v(e){return new Promise((e=>setTimeout(e))).then(e)}class k{constructor(e){if(!Object(y.c)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(k.URL_SCHEME)&&(e=e.slice(k.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r=Object(x.i)(e,n),o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),c=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(c.download=this.modelJsonFileName,c.href=o,await v((()=>c.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await v((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Object(x.h)(e)}}}}k.URL_SCHEME="downloads://";class w{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),o=r.modelTopology;if(null==o)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:o});const c=Object(x.g)(r,(e=>this.loadWeights(e)));e(c)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),o=n.map((path=>this.loadWeightsFile(path,r[path])));return Promise.all(o).then((e=>[t,Object(x.d)(e)]))}loadWeightsFile(path,e){return new Promise(((t,n)=>{const r=new FileReader;r.onload=e=>{const n=e.target.result;t(n)},r.onerror=e=>n(`Failed to weights data from file of path '${path}'.`),r.readAsArrayBuffer(e)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Object(x.c)(e.name))),r={};for(const o of e)o.paths.forEach((path=>{const e=Object(x.c)(path);if(-1!==t.indexOf(e))throw new Error(`Duplicate file basename found in weights manifest: '${e}'`);if(t.push(e),-1===n.indexOf(e))throw new Error(`Weight file with basename '${e}' is not provided.`);r[path]=this.weightsFiles[n.indexOf(e)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function S(e){return new w(e)}O.a.registerSaveRouter((e=>Object(y.c)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(k.URL_SCHEME)?function(e="model"){return new k(e)}(e.slice(k.URL_SCHEME.length)):null));var I=n(599);function N(e,t,n,r){!function(e){Object(I.b)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Object(I.b)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Object(I.b)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Object(I.b)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let o=0;return Promise.all(e.map((c=>(c.then((c=>{const l=n+ ++o/e.length*(r-n);return t(l),c})),c))))}var j=n(794);async function T(e,t){null==t&&(t={});const n=null==t.fetchFunc?Object(y.c)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),o=(null==t.onProgress?await Promise.all(r):await N(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(o):await N(o,t.onProgress,.5,1)}async function C(e,t="",n,r){return $((e=>T(e,{requestInit:r})))(e,t,n)}function $(e){return async(t,n="",r)=>{const o=t.map((()=>!1)),c={},l=null!=r?r.map((()=>!1)):[],d=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const h="quantization"in e?e.quantization.dtype:e.dtype,f=j.a[h]*I.O(e.shape),m=()=>{o[t]=!0,null==c[t]&&(c[t]=[]),c[t].push({manifestEntry:e,groupOffset:n,sizeBytes:f})};null!=r?r.forEach(((t,n)=>{t===e.name&&(m(),l[n]=!0)})):m(),d.push(e.name),n+=f}))})),!l.every((e=>e))){const e=r.filter(((e,i)=>!l[i]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${d.join(", ")}.`)}const h=o.reduce(((e,t,i)=>(t&&e.push(i),e)),[]),f=[];h.forEach((i=>{t[i].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;f.push(t)}))}));const m=await e(f),y={};let O=0;return h.forEach((i=>{const e=t[i].paths.length;let n=0;for(let i=0;i<e;i++)n+=m[O+i].byteLength;const r=new ArrayBuffer(n),o=new Uint8Array(r);let l=0;for(let i=0;i<e;i++){const e=new Uint8Array(m[O+i]);o.set(e,l),l+=e.byteLength}c[i].forEach((e=>{const t=r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),n=Object(x.e)(t,[e.manifestEntry]);for(const e in n)y[e]=n[e]})),O+=e})),y}}class E{constructor(path,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(Object(I.b)("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=Object(y.c)().platform.fetch,Object(I.b)(null!=path&&path.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(path)&&Object(I.b)(2===path.length,(()=>`URL paths for http must have a length of 2, (actual length is ${path.length}).`)),this.path=path,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r=Object(x.i)(e,n);t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const o=await this.fetch(this.path,t);if(o.ok)return{modelArtifactsInfo:Object(x.h)(e),responses:[o]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Object(x.g)(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),o=n>t?e.substring(n):"";return[r+"/",o]}(t),o=this.weightPathPrefix||n,c=[];for(const t of e)c.push(...t.weights);const l=[],d=[];for(const t of e)for(const path of t.paths)null!=this.weightUrlConverter?d.push(this.weightUrlConverter(path)):l.push(o+path+r);this.weightUrlConverter&&l.push(...await Promise.all(d));const h=await T(l,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[c,Object(x.d)(h)]}}function A(e){return null!=e.match(E.URL_SCHEME_REGEX)}E.URL_SCHEME_REGEX=/^https?:\/\//;const R=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>A(e))):A(e),n)return _(e,t)}return null};function _(path,e){return new E(path,e)}function F(path,e){return _(path,e)}O.a.registerSaveRouter(R),O.a.registerLoadRouter(R);class D{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class M{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class z{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function L(e,t,n,r){const o=arguments;return new z(P(...o))}function P(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new D(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new D({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new D({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function B(e){return new M(e)}function W(e){return new M(e)}var V=n(620),U=n(546),G=n(554),H=n(580),K=n(688),X=n(545),Y=n(591);const Z=Object(X.b)({confusionMatrix_:function(e,t,n){const r=Object(U.a)(e,"labels","confusionMatrix"),o=Object(U.a)(t,"predictions","confusionMatrix");I.b(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),I.b(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),I.b(1===o.rank,(()=>`Expected the rank of predictions to be 1, but got ${o.rank}`)),I.b(r.shape[0]===o.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${o.shape[0]}. Labels and predictions should have the same number of elements.`)),I.b(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const c=Object(K.a)(Object(G.a)(r,"int32"),n),l=Object(K.a)(Object(G.a)(o,"int32"),n),d=Object(Y.a)(c),h=Object(H.a)(d,l);return Object(G.a)(h,"int32")}});var J=n(558),Q=n(547),ee=n(544),te=n(640),ne=n(548),re=n(745);let ae;function se(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,o=!1,c=!1,l=!1,d=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)c=!0;else if(null!=e.getContext)l=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);d=!0}if(null!=Object(te.c)(ee.kb,Q.a.backendName)){const n={pixels:e},r={numChannels:t};return Q.a.runKernel(ee.kb,n,r)}const[h,f]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];let m,y;if(l)m=e.getContext("2d").getImageData(0,0,h,f).data;else if(r||n)m=e.data;else if(c||o||d){if(null==ae)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");ae=new OffscreenCanvas(1,1).getContext("2d")}else ae=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});ae.canvas.width=h,ae.canvas.height=f,ae.drawImage(e,0,0,h,f),m=ae.getImageData(0,0,h,f).data}if(4===t)y=new Int32Array(m);else{const e=h*f;y=new Int32Array(e*t);for(let i=0;i<e;i++)for(let e=0;e<t;++e)y[i*t+e]=m[4*i+e]}const x=[f,h,t];return Object(re.a)(y,x,"int32")}function ie(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function oe(e,t=3){let n=null;if(Object(y.c)().getBool("WRAP_TO_IMAGEBITMAP")&&ie(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return se(n,t)}async function ue(img,canvas){let e=Object(U.a)(img,"img","toPixels");if(!(img instanceof ne.a)){const t=e;e=Object(G.a)(t,"int32"),t.dispose()}if(2!==e.rank&&3!==e.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);const[t,n]=e.shape.slice(0,2),r=2===e.rank?1:e.shape[2];if(r>4||2===r)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${r}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);const data=await e.data(),o="float32"===e.dtype?255:1,c=new Uint8ClampedArray(n*t*4);for(let i=0;i<t*n;++i){const t=[0,0,0,255];for(let n=0;n<r;n++){const c=data[i*r+n];if("float32"===e.dtype){if(c<0||c>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${c}.`)}else if("int32"===e.dtype&&(c<0||c>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${c}.`);1===r?(t[0]=c*o,t[1]=c*o,t[2]=c*o):t[n]=c*o}const n=4*i;c[n+0]=Math.round(t[0]),c[n+1]=Math.round(t[1]),c[n+2]=Math.round(t[2]),c[n+3]=Math.round(t[3])}if(null!=canvas){canvas.width=n,canvas.height=t;const e=canvas.getContext("2d"),r=new ImageData(c,n,t);e.putImageData(r,0,0)}return e!==img&&e.dispose(),c}const ce=Object(X.b)({fromPixels_:se});function le(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Object(I.O)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const o=t.shape,c=o[o.length-1];let l=1;for(let i=0;i<o.length-1;++i)l*=o[i];const d=e.shape,h=o.slice();h.pop();let f=1;for(let i=c;i<n;++i)f*=d[i],h.push(d[i]);const m=[...Object(I.j)(e.shape).map((e=>e/f)),1].slice(0,c);return[h,l,f,m]}var de=n(657),he=n(658);class pe{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class fe{constructor(){this.classNameMap={}}static getMap(){return null==fe.instance&&(fe.instance=new fe),fe.instance}static register(e){fe.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function me(e){Object(I.b)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),Object(I.b)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),Object(I.b)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),fe.register(e)}var be=n(562),ge=n(737),ye=n(549);const xe="3.20.0";var Oe=n(575),ve=n(561),div=n(555),ke=n(551),we=n(579),Se=n(565),Ie=n(560),Ne=n(572),je=n(559);class Te extends pe{minimize(e,t=!1,n){const{value:r,grads:o}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:o[e.name]})));this.applyGradients(e)}else this.applyGradients(o);return Object(Oe.d)(o),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Object(Ne.f)(e,t)}dispose(){null!=this.iterations_&&Object(Oe.d)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Object(je.a)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Te,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Ce extends Te{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Q.a.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,i)=>{const n=Q.a.registeredVariables[t];null==this.accumulatedGrads[i]&&(this.accumulatedGrads[i]={originalName:`${t}/accum_grad`,variable:Object(Oe.t)((()=>Object(Ie.a)(n).variable(false)))}),null==this.accumulatedUpdates[i]&&(this.accumulatedUpdates[i]={originalName:`${t}/accum_var`,variable:Object(Oe.t)((()=>Object(Ie.a)(n).variable(false)))});const r=Array.isArray(e)?e[i].tensor:e[t];if(null==r)return;const o=this.accumulatedGrads[i].variable,c=this.accumulatedUpdates[i].variable;Object(Oe.t)((()=>{const e=Object(ve.a)(Object(ke.a)(o,this.rho),Object(ke.a)(Object(Se.a)(r),1-this.rho)),t=Object(ke.a)(Object(div.a)(Object(we.a)(Object(ve.a)(c,this.epsilon)),Object(we.a)(Object(ve.a)(o,this.epsilon))),r),l=Object(ve.a)(Object(ke.a)(c,this.rho),Object(ke.a)(Object(Se.a)(t),1-this.rho));o.assign(e),c.assign(l);const d=Object(ve.a)(Object(ke.a)(t,-this.learningRate),n);n.assign(d)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Object(Oe.d)(this.accumulatedGrads.map((e=>e.variable))),Object(Oe.d)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Ce.className="Adadelta",me(Ce);var $e=n(643);class Ee extends Te{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,i)=>{const n=Q.a.registeredVariables[t];if(null==this.accumulatedGrads[i]){const e=!1;this.accumulatedGrads[i]={originalName:`${t}/accumulator`,variable:Object(Oe.t)((()=>Object($e.a)(n.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[i].tensor:e[t];if(null==r)return;const o=this.accumulatedGrads[i].variable;Object(Oe.t)((()=>{const e=Object(ve.a)(o,Object(Se.a)(r));o.assign(e);const t=Object(ve.a)(Object(ke.a)(Object(div.a)(r,Object(we.a)(Object(ve.a)(e,Q.a.backend.epsilon()))),-this.learningRate),n);n.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Object(Oe.d)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Ee.className="Adagrad",me(Ee);var Ae=n(595),sub=n(557);class Re extends Te{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Object(Oe.t)((()=>{this.accBeta1=Object(je.a)(t).variable(),this.accBeta2=Object(je.a)(n).variable()})),null==r&&(this.epsilon=Q.a.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Object(Oe.t)((()=>{const n=Object(sub.a)(1,this.accBeta1),r=Object(sub.a)(1,this.accBeta2);t.forEach(((t,i)=>{const o=Q.a.registeredVariables[t];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${t}/m`,variable:Object(Oe.t)((()=>Object(Ie.a)(o).variable(false)))}),null==this.accumulatedSecondMoment[i]&&(this.accumulatedSecondMoment[i]={originalName:`${t}/v`,variable:Object(Oe.t)((()=>Object(Ie.a)(o).variable(false)))});const c=Array.isArray(e)?e[i].tensor:e[t];if(null==c)return;const l=this.accumulatedFirstMoment[i].variable,d=this.accumulatedSecondMoment[i].variable,h=Object(ve.a)(Object(ke.a)(l,this.beta1),Object(ke.a)(c,1-this.beta1)),f=Object(ve.a)(Object(ke.a)(d,this.beta2),Object(ke.a)(Object(Se.a)(c),1-this.beta2)),m=Object(div.a)(h,n),y=Object(div.a)(f,r);l.assign(h),d.assign(f);const x=Object(ve.a)(Object(ke.a)(Object(div.a)(m,Object(ve.a)(Object(we.a)(y),this.epsilon)),-this.learningRate),o);o.assign(x)})),this.accBeta1.assign(Object(ke.a)(this.accBeta1,this.beta1)),this.accBeta2.assign(Object(ke.a)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Object(Oe.d)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Object(Oe.d)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Object(Oe.t)((()=>{this.accBeta1.assign(Object(Ae.a)(this.beta1,this.iterations_+1)),this.accBeta2.assign(Object(Ae.a)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Re.className="Adam",me(Re);var _e=n(601),Fe=n(644);class De extends Te{constructor(e,t,n,r=null,o=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Object(Oe.t)((()=>{this.iteration=Object(je.a)(0).variable(),this.accBeta1=Object(je.a)(t).variable()})),null==r&&(this.epsilon=Q.a.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Object(Oe.t)((()=>{const n=Object(sub.a)(1,this.accBeta1),r=Object(div.a)(-this.learningRate,Object(ve.a)(Object(ke.a)(this.iteration,this.decay),1));t.forEach(((t,i)=>{const o=Q.a.registeredVariables[t];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${t}/m`,variable:Object(Ie.a)(o).variable(false)}),null==this.accumulatedWeightedInfNorm[i]&&(this.accumulatedWeightedInfNorm[i]={originalName:`${t}/v`,variable:Object(Ie.a)(o).variable(false)});const c=Array.isArray(e)?e[i].tensor:e[t];if(null==c)return;const l=this.accumulatedFirstMoment[i].variable,d=this.accumulatedWeightedInfNorm[i].variable,h=Object(ve.a)(Object(ke.a)(l,this.beta1),Object(ke.a)(c,1-this.beta1)),f=Object(ke.a)(d,this.beta2),m=Object(_e.a)(c),y=Object(Fe.a)(f,m);l.assign(h),d.assign(y);const x=Object(ve.a)(Object(ke.a)(Object(div.a)(r,n),Object(div.a)(h,Object(ve.a)(y,this.epsilon))),o);o.assign(x)})),this.iteration.assign(Object(ve.a)(this.iteration,1)),this.accBeta1.assign(Object(ke.a)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Object(Oe.d)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Object(Oe.d)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}De.className="Adamax",me(De);class Me extends Te{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,i)=>{const n=Array.isArray(e)?e[i].tensor:e[t];if(null==n)return;const r=Q.a.registeredVariables[t];Object(Oe.t)((()=>{const e=Object(ve.a)(Object(ke.a)(this.c,n),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Object(Oe.l)(Object(je.a)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Me.className="SGD",me(Me);class ze extends Me{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Object(je.a)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,i)=>{const n=Q.a.registeredVariables[t];if(null==this.accumulations[i]){const e=!1;this.accumulations[i]={originalName:`${t}/momentum`,variable:Object(Oe.t)((()=>Object(Ie.a)(n).variable(e)))}}const r=this.accumulations[i].variable,o=Array.isArray(e)?e[i].tensor:e[t];null!=o&&Object(Oe.t)((()=>{let e;const t=Object(ve.a)(Object(ke.a)(this.m,r),o);e=this.useNesterov?Object(ve.a)(Object(ke.a)(this.c,Object(ve.a)(o,Object(ke.a)(t,this.m))),n):Object(ve.a)(Object(ke.a)(this.c,t),n),r.assign(t),n.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Object(Oe.d)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}ze.className="Momentum",me(ze);class Le extends Te{constructor(e,t=.9,n=0,r=null,o=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=Q.a.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,i)=>{const n=Q.a.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[i]&&(this.accumulatedMeanSquares[i]={originalName:`${t}/rms`,variable:Object(Oe.t)((()=>Object(Ie.a)(n).variable(r)))}),null==this.accumulatedMoments[i]&&(this.accumulatedMoments[i]={originalName:`${t}/momentum`,variable:Object(Oe.t)((()=>Object(Ie.a)(n).variable(r)))}),null==this.accumulatedMeanGrads[i]&&this.centered&&(this.accumulatedMeanGrads[i]={originalName:`${t}/mg`,variable:Object(Oe.t)((()=>Object(Ie.a)(n).variable(r)))});const o=Array.isArray(e)?e[i].tensor:e[t];if(null==o)return;const c=this.accumulatedMeanSquares[i].variable,l=this.accumulatedMoments[i].variable;Object(Oe.t)((()=>{const e=Object(ve.a)(Object(ke.a)(c,this.decay),Object(ke.a)(Object(Se.a)(o),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[i].variable,r=Object(ve.a)(Object(ke.a)(t,this.decay),Object(ke.a)(o,1-this.decay)),d=Object(div.a)(Object(ke.a)(o,this.learningRate),Object(we.a)(Object(sub.a)(e,Object(ve.a)(Object(Se.a)(r),this.epsilon)))),h=Object(ve.a)(Object(ke.a)(l,this.momentum),d);c.assign(e),t.assign(r),l.assign(h);const f=Object(sub.a)(n,h);n.assign(f)}else{const e=Object(ve.a)(Object(ke.a)(c,this.decay),Object(ke.a)(Object(Se.a)(o),1-this.decay)),t=Object(ve.a)(Object(ke.a)(l,this.momentum),Object(div.a)(Object(ke.a)(o,this.learningRate),Object(we.a)(Object(ve.a)(e,this.epsilon))));c.assign(e),l.assign(t);const r=Object(sub.a)(n,t);n.assign(r)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Object(Oe.d)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Object(Oe.d)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Object(Oe.d)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Le.className="RMSProp",me(Le);class Pe{static sgd(e){return new Me(e)}static momentum(e,t,n=!1){return new ze(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,o=!1){return new Le(e,t,n,r,o)}static adam(e=.001,t=.9,n=.999,r=null){return new Re(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Ce(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,o=0){return new De(e,t,n,r,o)}static adagrad(e,t=.1){return new Ee(e,t)}}var Be=n(600),We=n(552),Ve=n(582);const Ue={sgd:Pe.sgd,momentum:Pe.momentum,adadelta:Pe.adadelta,adagrad:Pe.adagrad,rmsprop:Pe.rmsprop,adamax:Pe.adamax,adam:Pe.adam};var Ge=n(822),He=n(581);function qe(e,t){const n=e[0].length;e.forEach(((e,i)=>{I.b(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${i}] must be the same as the rank of the rest (${n})`))})),I.b(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,i)=>{for(let o=0;o<n;o++)I.b(o===t||e[o]===r[o],(()=>`Error in concat${n}D: Shape of tensors[${i}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${i}.`))}))}function Ke(e,t){const n=e[0].slice();for(let i=1;i<e.length;i++)n[t]+=e[i][t];return n}var Xe,Ye=n(566),Ze=n(608);function Je(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let i=1;i<n.length;++i){const o=n[i],c=r[r.length-n.length+i],l=r[c];if(o>=0)if(l>=0){if(l!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${i+e}] = ${o} but shape[${i+e}] = ${l}`)}else r[c]=o}return r}function Qe(e){const t={FIRST_DIM_SIZE:Xe.FIRST_DIM_SIZE,VALUE_ROWIDS:Xe.VALUE_ROWIDS,ROW_LENGTHS:Xe.ROW_LENGTHS,ROW_SPLITS:Xe.ROW_SPLITS,ROW_LIMITS:Xe.ROW_LIMITS,ROW_STARTS:Xe.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function et(e){return 0===e.length?0:e[0]===Xe.FIRST_DIM_SIZE?e.length-1:e.length}function tt(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let i=0;i<Math.min(n,r-1);++i){const n=e[i],r=t[i+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${i-e.length}] = ${n} but ragged tensor input.flatValues.shape[${i-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Xe||(Xe={}));const nt=30;function at(e){return e<=nt?e:Object(I.G)(e,Math.floor(Math.sqrt(e)))}function st(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function it(e,t,n,r=!0){let o=[];if(r)o=o.concat(t.slice(0)),o.push(e[0]/n),o=o.concat(e.slice(1));else{o=o.concat(e[0]);const n=t.length;for(let i=0;i<n;++i)o=o.concat([e[i+1]/t[i],t[i]]);o=o.concat(e.slice(n+1))}return o}function ot(e,t,n=!0){const r=[];if(n){r.push(t);for(let i=t+1;i<e;++i)i<=2*t?(r.push(i),r.push(i-(t+1))):r.push(i)}else{const n=[],o=[];for(let i=1;i<e;++i)i>=2*t+1||i%2==1?o.push(i):n.push(i);r.push(...n),r.push(0),r.push(...o)}return r}function ut(e,t,n,r=!0){const o=[];r?o.push(e[0]/n):o.push(e[0]*n);for(let i=1;i<e.length;++i)i<=t.length?r?o.push(t[i-1]*e[i]):o.push(e[i]/t[i-1]):o.push(e[i]);return o}function ct(e,t){const n=[0];for(let i=0;i<t;++i)n.push(e[i][0]);return n}function lt(e,t,n){const r=e.slice(0,1);for(let i=0;i<n;++i)r.push(e[i+1]-t[i][0]-t[i][1]);return r}var ht=n(750);const pt=.3275911,ft=.254829592,mt=-.284496736,bt=1.421413741,gt=-1.453152027,yt=1.061405429;var xt=n(670);function Ot(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let i=0;i<n.length;i+=2)n[i]=e[i/2],n[i+1]=t[i/2];return n}function vt(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let i=0;i<e.length;i+=2)t[i/2]=e[i],n[i/2]=e[i+1];return{real:t,imag:n}}function kt(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let i=0;i<e.length;i+=4)n[Math.floor(i/4)]=e[i],r[Math.floor(i/4)]=e[i+1];return{real:n,imag:r}}function wt(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let i=2;i<e.length;i+=4)n[Math.floor(i/4)]=e[i],r[Math.floor(i/4)]=e[i+1];return{real:n,imag:r}}function St(e,t){return{real:e[2*t],imag:e[2*t+1]}}function It(data,e,t,n){data[2*n]=e,data[2*n+1]=t}function Nt(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let i=0;i<Math.ceil(e/2);i++){const o=(t?2:-2)*Math.PI*(i/e);n[i]=Math.cos(o),r[i]=Math.sin(o)}return{real:n,imag:r}}function jt(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Tt="->",Ct=/->/g;function $t(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Ct,"").length)/Tt.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,o]=e.split(Tt);Object(I.b)(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const c=r.split(","),l=c.length;if(t!==l)throw new Error(`Expected ${l} input tensors, received ${t}`);if(l>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const d=[];for(let i=0;i<o.length;++i){const e=o[i];if(!c.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===d.indexOf(e)&&d.push(e)}for(let i=0;i<r.length;++i){const e=r[i];-1===d.indexOf(e)&&","!==e&&d.push(e)}const h=new Array(c.length);for(let i=0;i<l;++i){if(new Set(c[i].split("")).size!==c[i].length)throw new Error(`Found duplicate axes in input component ${c[i]}. Support for duplicate axes in input is not implemented yet.`);h[i]=[];for(let e=0;e<c[i].length;++e)h[i].push(d.indexOf(c[i][e]))}const f=d.length,m=[];for(let i=o.length;i<f;++i)m.push(i);return{allDims:d,summedDims:m,idDims:h}}function Et(e,t){let n=new Array(e);n.fill(-1);for(let i=0;i<t.length;++i)n[t[i]]=i;const r=[];for(let i=0;i<e;++i)-1===n[i]&&r.push(i);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function At(e,t,n){const r=new Array(e);for(let i=0;i<n.length;++i){const e=n[i].shape;for(let n=0;n<t[i].length;++n)void 0===r[t[i][n]]?r[t[i][n]]=e[n]:Object(I.b)(r[t[i][n]]===e[n],(()=>`Expected dimension ${r[t[i][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`))}}function Rt(e,t){const path=e,n=[];let r=0;0===e.length&&path.push(-1),r=e.length+1;for(let i=0;i<r;++i)n.push([]);const o=[];for(let i=0;i<path.length;++i){const e=Ft(t,path[i]);for(const t of e)-1===o.indexOf(t)&&(n[i].push(t),o.push(t))}return{path:path,steps:n}}function _t(e){return e.every(((e,t)=>e===t))}function Ft(e,t){const n=[];for(let i=0;i<e.length;++i)0!==e[i].length&&-1===e[i].indexOf(t)&&-1!==t||n.push(i);return n}function Dt(e,t,n=0){let r=[];if("number"==typeof t)Object(I.b)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const o=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);Object(I.b)(o<=1,(()=>"There should be only one negative value in split array."));const c=t.indexOf(-1);if(-1!==c){const r=t.reduce(((a,b)=>b>0?a+b:a));t[c]=e.shape[n]-r}Object(I.b)(e.shape[n]===t.reduce(((a,b)=>a+b)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Mt(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function zt(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Lt(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Pt(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Bt(e,t){return`size ${e} must be non-negative, not ${t}`}function Wt(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Vt(e,t){return`Input to reshape is a SparseTensor with ${Object(I.O)(e)}\n  dense values, but the requested shape requires a multiple of ${Object(I.O)(t)}. inputShape=${e} outputShape= ${t}`}function Ut(e,t){return`Input to reshape is a tensor with ${Object(I.O)(e)} dense values, but the requested shape has ${Object(I.O)(t)}. inputShape=${e} outputShape=${t}`}function Gt(){return"segment ids must be >= 0"}function Ht(){return"segment ids are not increasing"}function qt(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Kt(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Xt(e,t){let n,r=!1;for(e<=nt?(n=e,r=!0):n=Object(I.G)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Object(I.G)(e,n+1);return n}function Yt(e,t,n){const r=[],o=e.length;for(let c=0;c<o;c++)c!==t?r.push(e[c]):r.push(n);return r}function Zt(e,t,n,r){const o=t.shape.length,c=e.shape.length;if(0!==r&&(r<-o||r>o))throw new Error(`Expect batchDims in the range of [-${o}, ${o}], but got ${r}`);if(r<0&&(r+=o),r>c)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${c}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let i=0;i<r;++i)if(e.shape[i]!==t.shape[i])throw new Error(`x.shape[${i}]: ${e.shape[i]} should be equal to indices.shape[${i}]: ${t.shape[i]}.`);const l=e.shape[n],d=[];let h=1,f=1,m=1;for(let i=0;i<r;++i)d.push(e.shape[i]),h*=e.shape[i];for(let i=r;i<n;i++)d.push(e.shape[i]),f*=e.shape[i];for(let i=r;i<o;i++)d.push(t.shape[i]);for(let i=n+1;i<c;i++)d.push(e.shape[i]),m*=e.shape[i];return{batchSize:h,sliceSize:m,outerSize:f,dimSize:l,outputShape:d}}function Jt(e){try{return e.map((e=>Object(ye.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Qt(e){return e.map((s=>Object(ye.encodeString)(s)))}var en=n(712),tn=n(619),nn=n(748),rn=n(671)},,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return O}));n(641);var r=n(567),o=n(578),c=n(584);const l="tensorflowjs",d="models_store",h="model_info_store";function f(){if(!Object(r.c)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function m(e){const t=e.result;t.createObjectStore(d,{keyPath:"modelPath"}),t.createObjectStore(h,{keyPath:"modelPath"})}class y{constructor(e){if(this.indexedDB=f(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(l,1);r.onupgradeneeded=()=>m(r),r.onsuccess=()=>{const c=r.result;if(null==t){const t=c.transaction(d,"readonly"),r=t.objectStore(d).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return c.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(c.close(),n(r.error)),t.oncomplete=()=>c.close()}else{const r=Object(o.h)(t),l=c.transaction(h,"readwrite");let f=l.objectStore(h);const m=f.put({modelPath:this.modelPath,modelArtifactsInfo:r});let y;m.onsuccess=()=>{y=c.transaction(d,"readwrite");const o=y.objectStore(d).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{f=l.objectStore(h);const t=f.delete(this.modelPath);t.onsuccess=()=>(c.close(),n(o.error)),t.onerror=e=>(c.close(),n(o.error))}},m.onerror=e=>(c.close(),n(m.error)),l.oncomplete=()=>{null==y?c.close():y.oncomplete=()=>c.close()}}},r.onerror=e=>n(r.error)}))}}y.URL_SCHEME="indexeddb://";const x=e=>{return Object(r.c)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(y.URL_SCHEME)?(t=e.slice(y.URL_SCHEME.length),new y(t)):null;var t};c.a.registerSaveRouter(x),c.a.registerLoadRouter(x);class O{constructor(){this.indexedDB=f()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(l,1);n.onupgradeneeded=()=>m(n),n.onsuccess=()=>{const r=n.result,o=r.transaction(h,"readonly"),c=o.objectStore(h).getAll();c.onsuccess=()=>{const t={};for(const e of c.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},c.onerror=e=>(r.close(),t(c.error)),o.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(path){var e;return path=(e=path).startsWith(y.URL_SCHEME)?e.slice(y.URL_SCHEME.length):e,new Promise(((e,t)=>{const n=this.indexedDB.open(l,1);n.onupgradeneeded=()=>m(n),n.onsuccess=()=>{const r=n.result,o=r.transaction(h,"readwrite"),c=o.objectStore(h),l=c.get(path);let f;l.onsuccess=()=>{if(null==l.result)return r.close(),t(new Error(`Cannot find model with path '${path}' in IndexedDB.`));{const n=c.delete(path),o=()=>{f=r.transaction(d,"readwrite");const n=f.objectStore(d).delete(path);n.onsuccess=()=>e(l.result.modelArtifactsInfo),n.onerror=e=>t(l.error)};n.onsuccess=o,n.onerror=e=>(o(),r.close(),t(l.error))}},l.onerror=e=>(r.close(),t(l.error)),o.oncomplete=()=>{null==f?r.close():f.oncomplete=()=>r.close()}},n.onerror=e=>t(n.error)}))}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},function(e,t,n){"use strict";n.d(t,"a",(function(){return S})),n.d(t,"b",(function(){return N}));n(641);var r=n(567),o=n(599),c=n(578),l=n(584);const d="/",h="tensorflowjs_models",f="info",m="model_topology",y="weight_specs",x="weight_data",O="model_metadata";function v(path){return{info:[h,path,f].join(d),topology:[h,path,m].join(d),weightSpecs:[h,path,y].join(d),weightData:[h,path,x].join(d),modelMetadata:[h,path,O].join(d)}}function k(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function w(e){const t=e.split(d);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(d)}class S{constructor(e){if(!Object(r.c)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=v(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Object(c.h)(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(c.a)(e.weightData));const o={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(o)),{modelArtifactsInfo:r}}catch(e){throw k(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const o=this.LS.getItem(this.keys.modelMetadata);if(null!=o){const e=JSON.parse(o);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const l=this.LS.getItem(this.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Object(c.b)(l),t}}S.URL_SCHEME="localstorage://";const I=e=>{return Object(r.c)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(S.URL_SCHEME)?(t=e.slice(S.URL_SCHEME.length),new S(t)):null;var t};l.a.registerSaveRouter(I),l.a.registerLoadRouter(I);class N{constructor(){Object(o.b)(Object(r.c)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Object(o.b)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=h+d,n=d+f;for(let i=0;i<this.LS.length;++i){const r=this.LS.key(i);if(r.startsWith(t)&&r.endsWith(n)){e[w(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(path){var e;const t=v(path=(e=path).startsWith(S.URL_SCHEME)?e.slice(S.URL_SCHEME.length):e);if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${path}'`);const n=JSON.parse(this.LS.getItem(t.info));return k(t),n}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({acos_:function(e){const t={x:Object(c.a)(e,"x","acos")};return r.a.runKernel(o.b,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({acosh_:function(e){const t={x:Object(c.a)(e,"x","acosh")};return r.a.runKernel(o.c,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({asin_:function(e){const t={x:Object(c.a)(e,"x","asin")};return r.a.runKernel(o.j,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({asinh_:function(e){const t={x:Object(c.a)(e,"x","asinh")};return r.a.runKernel(o.k,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({atan_:function(e){const t={x:Object(c.a)(e,"x","atan")};return r.a.runKernel(o.l,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({atanh_:function(e){const t={x:Object(c.a)(e,"x","atanh")};return r.a.runKernel(o.n,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({ceil_:function(e){const t={x:Object(c.a)(e,"x","ceil","float32")};return r.a.runKernel(o.y,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545);const h=Object(d.b)({clipByValue_:function(e,t,n){const d=Object(c.a)(e,"x","clipByValue");l.b(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const h={x:d},f={clipValueMin:t,clipValueMax:n};return r.a.runKernel(o.z,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(547),o=n(544),c=n(599),l=n(545),d=n(550);const h=Object(l.b)({conv3DBackpropInput_:function(e,t,filter,n,l){c.b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let h=e,f=t,m=!1;4===t.rank&&(m=!0,f=Object(d.a)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),h=[1,e[0],e[1],e[2],e[3]]);const y=h[4],x=f.shape[4];c.b(5===h.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${h.length}.`)),c.b(5===f.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${f.rank}`)),c.b(5===filter.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${filter.rank}`)),c.b(y===filter.shape[3],(()=>`Error in conv3dDerInput: depth of input (${y}) must match input depth for filter ${filter.shape[3]}.`)),c.b(x===filter.shape[4],(()=>`Error in conv3dDerInput: depth of output (${x}) must match output depth for filter ${filter.shape[4]}.`));const O={dy:f,filter:filter},v={pad:l,strides:n,inputShape:h},k=r.a.runKernel(o.I,O,v);return m?Object(d.a)(k,[k.shape[1],k.shape[2],k.shape[3],k.shape[4]]):k}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(554),h=n(545);const f=Object(h.b)({erf_:function(e){let t=Object(c.a)(e,"x","erf");l.b("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Object(d.a)(t,"float32"));const n={x:t};return r.a.runKernel(o.bb,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({expm1_:function(e){const t={x:Object(c.a)(e,"x","expm1")};return r.a.runKernel(o.eb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({isFinite_:function(e){const t={x:Object(c.a)(e,"x","isFinite")};return r.a.runKernel(o.vb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({isInf_:function(e){const t={x:Object(c.a)(e,"x","isInf")};return r.a.runKernel(o.wb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({isNaN_:function(e){const t={x:Object(c.a)(e,"x","isNaN")};return r.a.runKernel(o.xb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(572),o=n(546),c=n(551),l=n(568),d=n(545),h=n(622),f=n(731);const m=Object(d.b)({logSigmoid_:function(e){const t=Object(o.a)(e,"x","logSigmoid"),n=Object(r.a)((e=>({value:Object(l.a)(Object(f.a)(Object(l.a)(e))),gradFunc:t=>Object(c.a)(t,Object(h.a)(Object(l.a)(e)))})));return n(t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return O}));var r=n(572),o=n(546),c=n(554),l=n(585),d=n(625),h=n(623),f=n(551),m=n(545),y=n(557),x=n(563);const O=Object(m.b)({logSoftmax_:function(e,t=-1){const n=Object(o.a)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const m=Object(r.a)(((e,n)=>{const r=Object(h.a)(e,t,!0),o=Object(y.a)(e,r),m=Object(y.a)(Object(c.a)(o,"float32"),Object(d.a)(Object(x.a)(Object(l.a)(o),t,!0)));n([m]);return{value:m,gradFunc:(e,n)=>{const[r]=n,o=Object(l.a)(r);return Object(y.a)(e,Object(f.a)(Object(x.a)(e,t,!0),o))}}}));return m(n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({onesLike_:function(e){const t={x:Object(c.a)(e,"x","onesLike")};return r.a.runKernel(o.gc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({reciprocal_:function(e){const t={x:Object(c.a)(e,"x","reciprocal")};return r.a.runKernel(o.rc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({sign_:function(e){const t={x:Object(c.a)(e,"x","sign")};return r.a.runKernel(o.Ic,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({softmax_:function(e,t=-1){const n=Object(c.a)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const l={logits:n},d={dim:t};return r.a.runKernel(o.Mc,l,d)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({stridedSlice_:function(e,t,n,l,d=0,h=0,f=0,m=0,y=0){const x={x:Object(c.a)(e,"x","stridedSlice","string_or_numeric")},O={begin:t,end:n,strides:l,beginMask:d,endMask:h,ellipsisMask:f,newAxisMask:m,shrinkAxisMask:y};return r.a.runKernel(o.Zc,x,O)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(546),l=n(545);const d=Object(l.b)({tan_:function(e){const t={x:Object(c.a)(e,"x","tan","float32")};return r.a.runKernel(o.fd,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545),h=n(550);const f=Object(d.b)({resizeNearestNeighbor_:function(e,t,n=!1,d=!1){const f=Object(c.a)(e,"images","resizeNearestNeighbor");l.b(3===f.rank||4===f.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${f.rank}.`)),l.b(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),l.b("float32"===f.dtype||"int32"===f.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),l.b(!1===d||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let m=f,y=!1;3===f.rank&&(y=!0,m=Object(h.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]]));const[]=t,x={images:m},O={alignCorners:n,halfPixelCenters:d,size:t},v=r.a.runKernel(o.xc,x,O);return y?Object(h.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(547),o=n(544),c=n(546),l=n(599),d=n(545),h=n(550);const f=Object(d.b)({resizeBilinear_:function(e,t,n=!1,d=!1){const f=Object(c.a)(e,"images","resizeBilinear");l.b(3===f.rank||4===f.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${f.rank}.`)),l.b(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),l.b(!1===d||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let m=f,y=!1;3===f.rank&&(y=!0,m=Object(h.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]]));const[]=t,x={images:m},O={alignCorners:n,halfPixelCenters:d,size:t},v=r.a.runKernel(o.vc,x,O);return y?Object(h.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(545),l=n(550);const d=Object(c.b)({depthwiseConv2dNativeBackpropInput_:function(e,t,filter,n,c,d=[1,1],h){let f=t,m=!1;3===t.rank&&(m=!0,f=Object(l.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const y={dy:f,filter:filter},x={strides:n,pad:c,dimRoundingMode:h,dilations:d,inputShape:e},O=r.a.runKernel(o.S,y,x);return m?Object(l.a)(O,[O.shape[1],O.shape[2],O.shape[3]]):O}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(547),o=n(544),c=n(545),l=n(550);const d=Object(c.b)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,c,d,h=[1,1],f){let m=e;3===e.rank&&(m=Object(l.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let y=t;3===y.rank&&(y=Object(l.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const x={x:m,dy:y},O={strides:c,pad:d,dimRoundingMode:f,dilations:h,filterShape:n};return r.a.runKernel(o.R,x,O)}})},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return o}));const r="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==e?e:e=>e();function o(){return new Promise((e=>r((()=>e()))))}}).call(this,n(361).setImmediate)},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return R})),n.d(t,"i",(function(){return F})),n.d(t,"c",(function(){return D})),n.d(t,"f",(function(){return M})),n.d(t,"e",(function(){return P})),n.d(t,"d",(function(){return B})),n.d(t,"k",(function(){return V})),n.d(t,"g",(function(){return U})),n.d(t,"h",(function(){return G})),n.d(t,"j",(function(){return H})),n.d(t,"b",(function(){return K}));var r=n(543),o=n(946),c=n(659),l=n(564),d=n(947),h=n(948),f=n(949),m=n(950),y=n(951),x=n(952),O=n(953),v=n(954),k=n(955),w=n(956),S=n(957),I=n(958),N=n(959),j=n(960),T=n(961),C=n(962),$=n(963),E=n(964),A=n(965);class R{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[d,h,f,m,y,x,O,v,k,w,S,I,N,j,T,C,$,E,A].map((e=>e.json)));this.opMappers=e.reduce(((map,e)=>(map[e.tfOpName]=e,map)),{})}transformGraph(e,t={}){const n=e.node,r=[],o=[],c=[],d=n.reduce(((map,e)=>(map[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(map[e.name]):"Const"===e.op?o.push(map[e.name]):null!=e.input&&0!==e.input.length||c.push(map[e.name]),map)),{});let h=[];const f=[];let m={},y={};null!=t&&(m=this.mapSignatureEntries(t.inputs),y=this.mapSignatureEntries(t.outputs));const x=Object.keys(d);x.forEach((e=>{const t=d[e];t.inputNames.forEach(((e,n)=>{const[r,,o]=Object(l.b)(e),c=d[r];if(null!=c.outputs){const e=c.outputs.indexOf(o);if(-1!==e){const o=`${r}:${e}`;t.inputNames[n]=o}}t.inputs.push(c),c.children.push(t)}))})),0===Object.keys(y).length?x.forEach((e=>{const t=d[e];0===t.children.length&&f.push(t)})):Object.keys(y).forEach((e=>{const[t]=Object(l.b)(e),n=d[t];null!=n&&(n.signatureKey=y[e],f.push(n))})),Object.keys(m).length>0?Object.keys(m).forEach((e=>{const[t]=Object(l.b)(e),n=d[t];n&&(n.signatureKey=m[e],h.push(n))})):h=r;let O={};null!=e.library&&null!=e.library.function&&(O=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const v={nodes:d,inputs:h,outputs:f,weights:o,placeholders:r,signature:t,functions:O};return c.length>0&&(v.initNodes=c),v}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Object(c.a)(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((input=>input.startsWith("^")?input.slice(1):input)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((map,param)=>(map[param.name]={type:param.type,inputIndexStart:param.start,inputIndexEnd:param.end},map)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((map,param)=>{const t=param.type;let n;switch(param.type){case"string":n=F(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=F(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"string[]":n=G(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=G(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"number":n=M(e.attr,param.tfName,param.defaultValue||0),void 0===n&&param.tfDeprecatedName&&(n=M(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"number[]":n=U(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=U(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool":n=D(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=D(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"bool[]":n=K(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=K(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape":n=V(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=V(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"shape[]":n=H(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=H(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype":n=P(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=P(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"dtype[]":n=B(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=B(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"func":n=L(e.attr,param.tfName,param.defaultValue),void 0===n&&param.tfDeprecatedName&&(n=L(e.attr,param.tfDeprecatedName,param.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${param.type} for op: ${e.op}`)}return map[param.name]={value:n,type:t},map}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((map,e)=>(map[e.name]=this.mapNode(e),"Const"===e.op&&n.push(map[e.name]),map)),{}));const o=[],c=[];e.signature.inputArg.forEach((e=>{const[t]=Object(l.b)(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:z(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,o.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[o,,c]=Object(l.b)(e),d=r[o];if(null!=d.outputs){const e=d.outputs.indexOf(c);if(-1!==e){const r=`${o}:${e}`;t.inputNames[n]=r}}t.inputs.push(d),d.children.push(t)}))}));const d=e.ret;e.signature.outputArg.forEach((output=>{const[e,t]=Object(l.b)(d[output.name]),n=r[e];null!=n&&(n.defaultOutput=t,c.push(n))}));const h=this.mapArgsToSignature(e);return{nodes:r,inputs:o,outputs:c,weights:n,placeholders:[],signature:h}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((map,e)=>(map[e.name]=this.mapArgToTensorInfo(e),map)),{}),outputs:e.signature.outputArg.reduce(((map,t)=>(map[t.name]=this.mapArgToTensorInfo(t,e.ret),map)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function _(s,t){const n=Array.isArray(s)?String.fromCharCode.apply(null,s):function(text){const t=Object(r.env)().global;if(void 0!==t.atob)return t.atob(text);if(void 0!==e)return new e(text,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(s);return t?n:n.toLowerCase()}function F(e,t,n,r=!1){const param=e[t];return null!=param?_(param.s,r):n}function D(e,t,n){const param=e[t];return param?param.b:n}function M(e,t,n){const param=e[t]||{},r=null!=param.i?param.i:null!=param.f?param.f:n;return"number"==typeof r?r:parseInt(r,10)}function z(e){switch("string"==typeof e&&(e=o.a[e]),e){case o.a.DT_FLOAT:case o.a.DT_HALF:return"float32";case o.a.DT_INT32:case o.a.DT_INT64:case o.a.DT_INT8:case o.a.DT_UINT8:return"int32";case o.a.DT_BOOL:return"bool";case o.a.DT_DOUBLE:return"float32";case o.a.DT_STRING:return"string";default:return null}}function L(e,t,n){const param=e[t];return param&&param.func?param.func.name:n}function P(e,t,n){const param=e[t];return param&&param.type?z(param.type):n}function B(e,t,n){const param=e[t];return param&&param.list&&param.list.type?param.list.type.map((e=>z(e))):n}function W(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function V(e,t,n){const param=e[t];return param&&param.shape?W(param.shape):n}function U(e,t,n){const param=e[t];return param?((param.list.f&&param.list.f.length?param.list.f:param.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function G(e,t,n,r=!1){const param=e[t];return param&&param.list&&param.list.s?param.list.s.map((e=>_(e,r))):n}function H(e,t,n){const param=e[t];return param&&param.list&&param.list.shape?param.list.shape.map((e=>W(e))):n}function K(e,t,n){const param=e[t];return param&&param.list&&param.list.b?param.list.b:n}}).call(this,n(553).Buffer)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"d",(function(){return o.ones})),n.d(t,"e",(function(){return o.scalar})),n.d(t,"f",(function(){return o.tidy})),n.d(t,"a",(function(){return o.browser})),n.d(t,"c",(function(){return zo})),n.d(t,"b",(function(){return Gc.a}));var r={};n.r(r),n.d(r,"simpleAbsImpl",(function(){return Kl})),n.d(r,"addImpl",(function(){return Ll})),n.d(r,"bincountImpl",(function(){return Rd})),n.d(r,"bincountReduceImpl",(function(){return _d})),n.d(r,"castImpl",(function(){return _l})),n.d(r,"ceilImpl",(function(){return Md})),n.d(r,"concatImpl",(function(){return Vd})),n.d(r,"equalImpl",(function(){return jh})),n.d(r,"expImpl",(function(){return zh})),n.d(r,"expm1Impl",(function(){return Vh})),n.d(r,"floorImpl",(function(){return op})),n.d(r,"gatherNdImpl",(function(){return mp})),n.d(r,"gatherV2Impl",(function(){return gp})),n.d(r,"greaterImpl",(function(){return xp})),n.d(r,"greaterEqualImpl",(function(){return kp})),n.d(r,"lessImpl",(function(){return Ap})),n.d(r,"lessEqualImpl",(function(){return Fp})),n.d(r,"linSpaceImpl",(function(){return zp})),n.d(r,"logImpl",(function(){return Pp})),n.d(r,"maxImpl",(function(){return tf})),n.d(r,"maximumImpl",(function(){return af})),n.d(r,"minimumImpl",(function(){return mf})),n.d(r,"multiplyImpl",(function(){return xh})),n.d(r,"negImpl",(function(){return If})),n.d(r,"notEqualImpl",(function(){return Rf})),n.d(r,"prodImpl",(function(){return Hf})),n.d(r,"raggedTensorToTensorImpl",(function(){return Jf})),n.d(r,"rangeImpl",(function(){return tm})),n.d(r,"rsqrtImpl",(function(){return pm})),n.d(r,"scatterImpl",(function(){return bm})),n.d(r,"sigmoidImpl",(function(){return Il})),n.d(r,"sliceImpl",(function(){return Cd})),n.d(r,"sparseFillEmptyRowsImpl",(function(){return Dm})),n.d(r,"sparseReshapeImpl",(function(){return zm})),n.d(r,"sparseSegmentReductionImpl",(function(){return Pm})),n.d(r,"sqrtImpl",(function(){return Gm})),n.d(r,"squaredDifferenceImpl",(function(){return Xm})),n.d(r,"stridedSliceImpl",(function(){return eb})),n.d(r,"stringNGramsImpl",(function(){return rb})),n.d(r,"stringSplitImpl",(function(){return ib})),n.d(r,"stringToHashBucketFastImpl",(function(){return ub})),n.d(r,"subImpl",(function(){return Xh})),n.d(r,"tileImpl",(function(){return fb})),n.d(r,"topKImpl",(function(){return yb})),n.d(r,"transposeImpl",(function(){return nd})),n.d(r,"uniqueImpl",(function(){return Ib}));var o=n(543),c=n(544),l=n(554),d=n(551),h=n(628);const f={kernelName:c.a,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,Object(h.a)(Object(l.a)(n,"float32"),-1))}}};var div=n(555),m=n(568),y=n(559),x=n(579),O=n(565),sub=n(557);const v={kernelName:c.b,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const a=Object(O.a)(Object(l.a)(n,"float32")),b=Object(x.a)(Object(sub.a)(Object(y.a)(1),a));return Object(m.a)(Object(div.a)(e,b))}}}},k={kernelName:c.c,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const a=Object(x.a)(Object(sub.a)(Object(O.a)(Object(l.a)(n,"float32")),1));return Object(div.a)(e,a)}}}};var w=n(558),S=n(550),I=n(563);const N={kernelName:c.d,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=w.assertAndGetBroadcastShape(a.shape,b.shape);return{a:()=>{let t=e;const r=w.getReductionAxes(a.shape,n);return r.length>0&&(t=Object(I.a)(t,r)),Object(S.a)(t,a.shape)},b:()=>{let t=e;const r=w.getReductionAxes(b.shape,n);return r.length>0&&(t=Object(I.a)(t,r)),Object(S.a)(t,b.shape)}}}},j={kernelName:c.e,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,i)=>{n[i]=()=>e.clone()})),n}};var T=n(560);const C={kernelName:c.h,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(T.a)(n)}}},$={kernelName:c.i,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(T.a)(n)}}},E={kernelName:c.j,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(x.a)(Object(sub.a)(Object(y.a)(1),Object(O.a)(Object(l.a)(n,"float32")))))}}};var A=n(561);const R={kernelName:c.k,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const a=Object(x.a)(Object(A.a)(Object(y.a)(1),Object(O.a)(Object(l.a)(n,"float32"))));return Object(div.a)(e,a)}}}},_={kernelName:c.m,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=Object(w.assertAndGetBroadcastShape)(a.shape,b.shape);return{a:()=>{const t=Object(A.a)(Object(O.a)(a),Object(O.a)(b));let r=Object(d.a)(e,Object(div.a)(b,t));const o=Object(w.getReductionAxes)(a.shape,n);return o.length>0&&(r=Object(I.a)(r,o)),Object(S.a)(r,a.shape)},b:()=>{const t=Object(A.a)(Object(O.a)(a),Object(O.a)(b));let r=Object(m.a)(Object(d.a)(e,Object(div.a)(a,t)));const o=Object(w.getReductionAxes)(b.shape,n);return o.length>0&&(r=Object(I.a)(r,o)),Object(S.a)(r,b.shape)}}}},F={kernelName:c.l,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(A.a)(Object(O.a)(Object(l.a)(n,"float32")),1))}}},D={kernelName:c.n,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(sub.a)(Object(y.a)(1),Object(O.a)(Object(l.a)(n,"float32"))))}}};var M=n(547),z=n(546),L=n(599),P=n(566),B=n(545);const W=Object(B.b)({avgPool3dGrad_:function(e,input,t,n,r,o){const l=Object(z.a)(e,"dy","avgPool3dGrad"),d=Object(z.a)(input,"input","avgPool3dGrad");let h=l,f=d,m=!1;4===d.rank&&(m=!0,h=Object(S.a)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),f=Object(S.a)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]])),L.b(5===h.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),L.b(5===f.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${f.rank}.`)),Object(P.a)("avgPool3dGrad",r,o);const y={dy:h,input:f},x={filterSize:t,strides:n,pad:r,dimRoundingMode:o},O=M.a.runKernel(c.q,y,x);return m?Object(S.a)(O,[O.shape[1],O.shape[2],O.shape[3],O.shape[4]]):O}}),V={kernelName:c.p,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:o,strides:c,pad:l,dimRoundingMode:d}=n;return{x:()=>W(e,r,o,c,l,d)}}};const U=Object(B.b)({avgPoolGrad_:function(e,input,t,n,r){const o=Object(z.a)(e,"dy","avgPoolGrad"),l=Object(z.a)(input,"input","avgPoolGrad");L.b(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`));let d=l,h=o,f=!1;3===l.rank&&(f=!0,d=Object(S.a)(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=Object(S.a)(o,[1,o.shape[0],o.shape[1],o.shape[2]])),L.b(4===h.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${h.rank}.`)),L.b(4===d.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${d.rank}.`));const m={dy:h,input:d},y={filterSize:t,strides:n,pad:r},x=M.a.runKernel(c.r,m,y);return f?Object(S.a)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),G={kernelName:c.o,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:o,strides:c,pad:l}=n;return{x:()=>U(e,r,o,c,l)}}};var H=n(580);const K={kernelName:c.s,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[a,b]=t,{transposeA:r,transposeB:o}=n;return r||o?!r&&o?{a:()=>Object(H.a)(e,b,!1,!1),b:()=>Object(H.a)(e,a,!0,!1)}:r&&!o?{a:()=>Object(H.a)(b,e,!1,!0),b:()=>Object(H.a)(a,e,!1,!1)}:{a:()=>Object(H.a)(b,e,!0,!0),b:()=>Object(H.a)(e,a,!0,!0)}:{a:()=>Object(H.a)(e,b,!1,!0),b:()=>Object(H.a)(a,e,!0,!1)}}};var X=n(654);const Y={kernelName:c.t,gradFunc:(e,t,n)=>{const{blockShape:r,crops:o}=n;return{x:()=>Object(X.a)(e,r,o)}}},Z={kernelName:c.w,gradFunc:(e,t,n)=>{const r=n,o=r.inputShape,c=r.shape,l=Array.from(c);for(let i=o.length-1;i>=0;i--)if(o[i]===c[i])l[i]=1;else if(1!==o[i])throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${c}].`);const d=[];for(let i=0;i<l.length;i++)l[i]>1&&d.push(i);return{x:()=>Object(I.a)(e,d,!0)}}},J={kernelName:c.x,gradFunc:e=>({x:()=>e.clone()})},Q={kernelName:c.y,gradFunc:e=>({x:()=>Object(T.a)(e)})};var ee=n(603),te=n(596),ne=n(604),re=n(574);const ae={kernelName:c.z,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:o,clipValueMax:c}=n;return{x:()=>Object(re.a)(Object(ne.a)(Object(ee.a)(r,o),Object(te.a)(r,c)),e,Object(T.a)(e))}}},se={kernelName:c.B,inputsToSave:["x"],gradFunc:f.gradFunc};var ie=n(606);const oe={kernelName:c.C,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:o}=n,c=Object(L.I)(o,t[0].shape)[0],l=r.map((s=>s[c]));return Object(ie.a)(e,l,c).map((e=>()=>e))}};var ue=n(749),ce=n(722);const le={kernelName:c.D,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,o]=t,{dilations:c,strides:l,pad:d,dataFormat:h}=n;return L.b(P.j(c),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${c}'`)),{x:()=>Object(ce.a)(r.shape,e,o,l,d,h),filter:()=>Object(ue.a)(r,e,o.shape,l,d,h)}}};var de=n(602);const he={kernelName:c.F,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,filter]=t,{strides:o,pad:c,dataFormat:l,dimRoundingMode:d}=n;return{dy:()=>Object(de.a)(e,filter,o,c,l,1,d),filter:()=>Object(ue.a)(e,r,filter.shape,o,c,l,d)}}};const pe=Object(B.b)({conv3DBackpropFilter_:function(e,t,n,r,o){let l=e;4===e.rank&&(l=Object(S.a)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let d=t;4===d.rank&&(d=Object(S.a)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),L.b(5===l.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${l.shape}.`)),L.b(5===d.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${d.shape}.`)),L.b(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),L.b(l.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${l.shape[4]}) must match input depth in filter (${n[3]}.`)),L.b(d.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${d.shape[4]}) must match output depth for filter (${n[4]}).`));const h={x:l,dy:d},f={strides:r,pad:o,filterShape:n};return M.a.runKernel(c.H,h,f)}});var fe=n(804);const me={kernelName:c.G,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:o,pad:c}=n;L.b(Object(P.j)(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[l,d]=t;return{x:()=>Object(fe.a)(l.shape,e,d,o,c),filter:()=>pe(l,e,d.shape,o,c)}}};var be=n(742);const ge={kernelName:c.J,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(Object(m.a)(Object(be.a)(Object(l.a)(n,"float32"))),e)}}};var ye=n(743);const xe={kernelName:c.K,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(Object(ye.a)(Object(l.a)(n,"float32")),e)}}};var Oe=n(581),ve=n(677),ke=n(591);const we={kernelName:c.N,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:o,exclusive:c,reverse:l}=n;return{x:()=>{const t=Object(Oe.f)([o],r.rank);let n=Object(ve.a)(e,o,c,!l);return null!=t&&(n=Object(ke.a)(n,t)),n}}}};var Se=n(821),Ie=n(820);const Ne={kernelName:c.Q,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:o,pad:c,dimRoundingMode:l}=n,d=null==r?[1,1]:r;L.b(P.j(d),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${d}'`));const[h,filter]=t;return L.b(4===h.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${h.rank}.`)),L.b(4===filter.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${filter.rank}.`)),L.b(h.shape[3]===filter.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${filter.shape[2]}.`)),L.b(P.i(o,d),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${d}'.`)),P.a("depthwiseConv2d",c,l),{x:()=>Object(Ie.a)(h.shape,e,filter,o,c,d,l),filter:()=>Object(Se.a)(h,e,filter.shape,o,c,d,l)}}},je={kernelName:c.U,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,filter]=t,o={x:r,filter:filter,dy:e},l={x:r,filter:filter,dy:e};return{x:()=>M.a.runKernel(c.W,o,n),filter:()=>M.a.runKernel(c.V,l,n)}}},Te={kernelName:c.Y,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>M.a.runKernel(c.Z,r)}}};var Ce=n(585);const $e={kernelName:c.bb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,a=Object(d.a)(Object(Ce.a)(Object(m.a)(Object(O.a)(n))),2/Math.sqrt(Math.PI));return{x:()=>Object(d.a)(e,a)}}},Ee={kernelName:c.cb,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,n)}}},Ae={kernelName:c.db,inputsToSave:["input"],gradFunc:(e,t)=>{const[input]=t;return{input:()=>Object(S.a)(e,input.shape)}}},Re={kernelName:c.eb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,Object(Ce.a)(n))}}},_e={kernelName:c.ib,gradFunc:e=>({x:()=>Object(T.a)(e)})},Fe={kernelName:c.jb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=Object(w.assertAndGetBroadcastShape)(a.shape,b.shape);return{a:()=>{const t=Object(div.a)(e,Object(l.a)(b,"float32")),r=Object(w.getReductionAxes)(a.shape,n);return r.length>0?Object(S.a)(Object(I.a)(t,r),a.shape):t},b:()=>{let t=Object(d.a)(e,Object(l.a)(a,"float32"));const r=Object(w.getReductionAxes)(b.shape,n);r.length>0&&(t=Object(S.a)(Object(I.a)(t,r),b.shape));const o=Object(O.a)(b);return Object(m.a)(Object(div.a)(t,Object(l.a)(o,"float32")))}}}};var De=n(739),Me=n(624);const ze={kernelName:c.lb,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[o,c,l,h]=t,f=null==h?Object(y.a)(1):h,m=Object(w.getReductionAxes)(c.shape,o.shape),x=[];if(1===c.rank){for(let i=0;i<o.shape.length-1;++i)x.push(o.shape[i]);x.push(1)}const O=Object(sub.a)(o,c),v=Object(d.a)(e,f),k=Object(De.a)(Object(A.a)(l,Object(y.a)(r))),N=Object(d.a)(Object(d.a)(Object(d.a)(k,k),k),Object(y.a)(-.5));return{x:()=>1===c.rank?Object(S.a)(Object(d.a)(Object(d.a)(e,Object(Me.a)(Object(S.a)(k,[1,1,1,c.shape[0]]),x)),f),o.shape):Object(S.a)(Object(d.a)(Object(d.a)(e,k),f),o.shape),mean:()=>{let e=Object(d.a)(Object(d.a)(k,Object(y.a)(-1)),v);return 1===c.rank&&(e=Object(I.a)(e,m)),Object(S.a)(e,c.shape)},variance:()=>{let e=Object(d.a)(Object(d.a)(N,O),v);return 1===c.rank&&(e=Object(I.a)(e,m)),Object(S.a)(e,c.shape)},scale:()=>{const t=Object(d.a)(O,k);let n=Object(d.a)(e,t);return 1===c.rank&&(n=Object(I.a)(n,m)),Object(S.a)(n,c.shape)},offset:()=>{let t=e;return 1===c.rank&&(t=Object(I.a)(t,m)),Object(S.a)(t,c.shape)}}}};var Le=n(696);const Pe={kernelName:c.pb,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,o]=t,{axis:c}=n,l=Object(L.I)(c,r.shape)[0];return{x:()=>{const t=r.shape,n=o.size,d=t.slice(0,l),h=d.length,f=t.slice(c,t.length).slice(1),m=f.length,y=Be(0,h),x=Be(h+1,h+1+m),O=We([d,[n],f]),v=Object(S.a)(e,O),k=Object(S.a)(o,[n]),w=We([[h],y,x]),I=Object(ke.a)(v,w);let N=Object(Le.a)(I,k,r.shape[l]);const j=Object(Oe.h)(w);return N=Object(ke.a)(N,j),N},indices:()=>o}}};function Be(e,t){const n=[];for(let i=e;i<t;++i)n.push(i);return n}function We(e){const t=[];for(let i=0;i<e.length;++i)for(let n=0;n<e[i].length;++n)t.push(e[i][n]);return t}const Ve={kernelName:c.rb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t;return{a:()=>Object(T.a)(a),b:()=>Object(T.a)(b)}}},Ue={kernelName:c.tb,gradFunc:e=>({x:()=>Object(l.a)(e,"float32")})},Ge={kernelName:c.vb,gradFunc:e=>({x:()=>Object(T.a)(e)})},He={kernelName:c.wb,gradFunc:e=>({x:()=>Object(T.a)(e)})},qe={kernelName:c.xb,gradFunc:e=>({x:()=>Object(T.a)(e)})};var Ke=n(586);const Xe={kernelName:c.Ab,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:o}=n,mask=Object(Ke.a)(r,0);return{x:()=>Object(re.a)(mask,e,Object(d.a)(e,o))}}},Ye={kernelName:c.Fb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(A.a)(n,1))}}},Ze={kernelName:c.Eb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(l.a)(n,"float32"))}}},Je={kernelName:c.Gb,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:o}=n;return{logits:()=>{const t=Object(Ce.a)(r);return Object(sub.a)(e,Object(d.a)(Object(I.a)(e,o,!0),t))}}}};const Qe=Object(B.b)({localResponseNormalizationBackprop_:function(e,t,n,r=5,o=1,l=1,d=.5){const h={x:e,y:t,dy:n},f={depthRadius:r,bias:o,alpha:l,beta:d};return M.a.runKernel(c.zb,h,f)}}),et={kernelName:c.yb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,o]=t,{depthRadius:c,bias:l,alpha:d,beta:h}=n;return{x:()=>Qe(r,o,e,c,l,d,h)}}};var tt=n(647);function nt(e,t,n,r){return t.rank<n.rank&&(t=Object(S.a)(t,Oe.e(t.shape,r))),e.rank<n.rank&&(e=Object(S.a)(e,Oe.e(e.shape,r))),{x:()=>Object(d.a)(e,Object(l.a)(Object(tt.a)(n,t),e.dtype))}}const at={kernelName:c.Mb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:o}=r,c=t[0],l=nt(e,t[1],c,L.I(o,c.shape));return{x:()=>l.x()}}};var st=n(682);const it={kernelName:c.Sb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t;return{a:()=>Object(d.a)(e,Object(l.a)(Object(ee.a)(a,b),"float32")),b:()=>Object(d.a)(e,Object(l.a)(Object(st.a)(a,b),"float32"))}}};const ot=Object(B.b)({maxPool3dGrad_:function(e,input,output,t,n,r,o){const l=Object(z.a)(e,"dy","maxPool3dGrad"),d=Object(z.a)(input,"input","maxPool3dGrad"),h=Object(z.a)(output,"output","maxPool3dGrad");let f=l,m=d,y=h,x=!1;4===d.rank&&(x=!0,f=Object(S.a)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=Object(S.a)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]]),y=Object(S.a)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),L.b(5===f.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${f.rank}.`)),L.b(5===m.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${m.rank}.`)),L.b(5===y.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${y.rank}.`)),Object(P.a)("maxPool3dGrad",r,o);const O={dy:f,input:m,output:y},v={filterSize:t,strides:n,pad:r,dimRoundingMode:o},k=M.a.runKernel(c.Pb,O,v);return x?Object(S.a)(k,[k.shape[1],k.shape[2],k.shape[3],k.shape[4]]):k}}),ut={kernelName:c.Ob,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,o]=t,{filterSize:c,strides:l,pad:d,dimRoundingMode:h}=n;return{x:()=>ot(e,r,o,c,l,d,h)}}};const ct=Object(B.b)({maxPoolGrad_:function(e,input,output,t,n,r,o){const l=Object(z.a)(e,"dy","maxPoolGrad"),d=Object(z.a)(input,"input","maxPoolGrad"),h=Object(z.a)(output,"output","maxPoolGrad");L.b(d.rank===l.rank,(()=>`Rank of input (${d.rank}) does not match rank of dy (${l.rank})`)),L.b(4===l.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),L.b(4===d.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${d.rank}.`)),P.a("maxPoolGrad",r,o);const f={dy:l,input:d,output:h},m={filterSize:t,strides:n,pad:r,dimRoundingMode:o};return M.a.runKernel(c.Qb,f,m)}}),lt={kernelName:c.Nb,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,o]=t,{filterSize:c,strides:l,pad:d}=n;return{x:()=>ct(e,r,o,c,l,d)}}};var ht=n(605);const pt={kernelName:c.Tb,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:o}=n,c=L.I(o,r.shape),l=Object(Oe.d)(r.shape,c)[1],h=L.O(l);return{x:()=>{const t=r.shape.slice();c.forEach((e=>{t[e]=1}));const n=Object(S.a)(e,t);return Object(div.a)(Object(d.a)(n,Object(ht.a)(r.shape,"float32")),h)}}}},ft={kernelName:c.Ub,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:o}=r,[c,l]=t,d=nt(e,l,c,L.I(o,c.shape));return{x:()=>d.x()}}},mt={kernelName:c.Vb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t;return{a:()=>Object(d.a)(e,Object(l.a)(Object(te.a)(a,b),"float32")),b:()=>Object(d.a)(e,Object(l.a)(Object(Ke.a)(a,b),"float32"))}}};var bt=n(571);const gt={kernelName:c.Wb,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:o}=n,c=o.map((p=>p[0]));return{x:()=>Object(bt.a)(e,c,r.shape)}}};var yt=n(680);const xt={kernelName:c.Xb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=Object(w.assertAndGetBroadcastShape)(a.shape,b.shape);return{a:()=>{const t=Object(w.getReductionAxes)(a.shape,n);return t.length>0?Object(S.a)(Object(I.a)(e,t),a.shape):e},b:()=>{const t=Object(d.a)(e,Object(m.a)(Object(yt.a)(Object(div.a)(a,b)))),r=Object(w.getReductionAxes)(b.shape,n);return r.length>0?Object(S.a)(Object(I.a)(t,r),b.shape):t}}}},Ot={kernelName:c.Zb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=Object(w.assertAndGetBroadcastShape)(a.shape,b.shape);return{a:()=>{const t=Object(d.a)(e,Object(l.a)(b,"float32")),r=Object(w.getReductionAxes)(a.shape,n);return r.length>0?Object(S.a)(Object(I.a)(t,r),a.shape):t},b:()=>{const t=Object(d.a)(e,Object(l.a)(a,"float32")),r=Object(w.getReductionAxes)(b.shape,n);return r.length>0?Object(S.a)(Object(I.a)(t,r),b.shape):t}}}},vt={kernelName:c.ac,gradFunc:e=>({x:()=>Object(m.a)(e)})};var kt=n(626);const wt={kernelName:c.fc,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Object(kt.a)(n.shape,"float32")}}},St={kernelName:c.gc,gradFunc:e=>({x:()=>Object(T.a)(e)})};var It=n(629);const Nt={kernelName:c.hc,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Object(It.a)(e,r).map((e=>()=>e))}},jt={kernelName:c.ic,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:o}=n,c=o.map((p=>p[0]));return{x:()=>Object(bt.a)(e,c,r.shape)}}};var Tt=n(625),Ct=n(595);const $t={kernelName:c.kc,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[a,b,n]=t,base=a,r=b,o=w.assertAndGetBroadcastShape(base.shape,r.shape);return{a:()=>{const t=Object(l.a)(r,"float32");let n=Object(d.a)(e,Object(d.a)(t,Object(Ct.a)(base,Object(sub.a)(t,Object(y.a)(1)))));const c=w.getReductionAxes(base.shape,o);return c.length>0&&(n=Object(I.a)(n,c)),Object(S.a)(n,base.shape)},b:()=>{const t=Object(Ke.a)(base,0),c=Object(re.a)(t,Object(Tt.a)(base),Object(T.a)(base));let l=Object(d.a)(e,Object(d.a)(n,c));const h=w.getReductionAxes(r.shape,o);return h.length>0&&(l=Object(I.a)(l,h)),Object(S.a)(l,r.shape)}}}},Et={kernelName:c.lc,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,mask=Object(Ke.a)(n,0);return{x:()=>Object(re.a)(mask,e,Object(d.a)(e,r)),alpha:()=>{let t=Object(re.a)(mask,Object(T.a)(e),Object(d.a)(e,n));const o=Object(w.getReductionAxes)(r.shape,e.shape);return o.length>0&&(t=Object(I.a)(t,o)),Object(S.a)(t,r.shape)}}}};var At=n(780),Rt=n(676);function _t(e,t,n){const r=e.shape.length,o=r-n.length,c=At.be.getAxesPermutation(n,r);let l=e;null!=c&&(l=Object(ke.a)(e,c));const h=l.shape.slice(),f=h.splice(r-n.length,n.length).reduce(((p,e)=>p*e),1);h.push(f);let m=function(e,t,n){const r=e.shape.slice();r[n]=1;const o=Object(S.a)(t,r),c=Object(Rt.a)(e,n,!0,!1),l=Object(Rt.a)(e,n,!0,!0),h=Object(d.a)(c,l);return Object(d.a)(o,h)}(l.reshape(h),t,o);if(m=m.reshape(l.shape),null!=c){const e=At.be.getUndoAxesPermutation(c);m=Object(ke.a)(m,e)}return m}const Ft={kernelName:c.mc,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:o}=n;let c=[];return c=null==o?r.shape.map(((e,i)=>i)):"number"==typeof o?[o]:o,{x:()=>_t(r,e,c)}}},Dt={kernelName:c.qc,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=w.assertAndGetBroadcastShape(a.shape,b.shape);return{a:()=>{const t=Object(div.a)(e,Object(l.a)(b,"float32")),r=w.getReductionAxes(a.shape,n);return r.length>0?Object(S.a)(Object(I.a)(t,r),a.shape):t},b:()=>{let t=Object(d.a)(e,Object(l.a)(a,"float32"));const r=w.getReductionAxes(b.shape,n);r.length>0&&(t=Object(S.a)(Object(I.a)(t,r),b.shape));const o=Object(O.a)(b);return Object(m.a)(Object(div.a)(t,Object(l.a)(o,"float32")))}}}},Mt={kernelName:c.rc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(m.a)(Object(O.a)(n)))}}},zt={kernelName:c.tc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,mask=Object(d.a)(Object(te.a)(n,6),Object(h.a)(n));return{x:()=>Object(d.a)(e,Object(l.a)(mask,"float32"))}}},Lt={kernelName:c.sc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,Object(l.a)(Object(h.a)(n),"float32"))}}},Pt={kernelName:c.uc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(S.a)(e,n.shape)}}},Bt={kernelName:c.vc,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,o={dy:e,images:r};return{images:()=>M.a.runKernel(c.wc,o,n)}}},Wt={kernelName:c.xc,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,o={dy:e,images:r};return{images:()=>M.a.runKernel(c.yc,o,n)}}};var Vt=n(590);const Ut={kernelName:c.zc,gradFunc:(e,t,n)=>{const{dims:r}=n,o=Object(L.I)(r,e.shape);return{x:()=>Object(Vt.a)(e,o)}}},Gt={kernelName:c.Bc,gradFunc:e=>({x:()=>Object(T.a)(e)})},Ht={kernelName:c.Cc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(m.a)(Object(div.a)(e,Object(d.a)(Object(Ct.a)(n,1.5),2)))}}};var qt=n(652);const Kt={kernelName:c.Fc,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Object(l.a)(Object(T.a)(n),"float32"),t:()=>Object(d.a)(e,Object(l.a)(n,e.dtype)),e:()=>Object(d.a)(e,Object(l.a)(Object(qt.a)(n),e.dtype))}}};var Xt=n(750);const Yt={kernelName:c.Gc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const mask=Object(Ke.a)(n,Object(y.a)(0)),t=Object(y.a)(Xt.b),r=Object(y.a)(Xt.a),o=Object(d.a)(e,r),c=Object(d.a)(Object(d.a)(e,t),Object(Ce.a)(Object(l.a)(n,"float32")));return Object(re.a)(mask,o,c)}}}},Zt={kernelName:c.Hc,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,Object(d.a)(n,Object(sub.a)(Object(y.a)(1),n)))}}},Jt={kernelName:c.Ic,gradFunc:e=>({x:()=>Object(T.a)(e)})};var Qt=n(675);const en={kernelName:c.Jc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(Object(Qt.a)(Object(l.a)(n,"float32")),e)}}};var tn=n(723);const nn={kernelName:c.Kc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(Object(tn.a)(Object(l.a)(n,"float32")),e)}}};var rn=n(597),an=n(658);const sn={kernelName:c.Lc,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:o,size:c}=n,l=r.shape,[d,h]=Object(an.parseSliceParams)(r,o,c),f=[];for(let i=0;i<e.rank;i++)f.push([d[i],l[i]-d[i]-h[i]]);return{x:()=>Object(rn.a)(e,f)}}},on={kernelName:c.Mc,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:o}=n,c=Object(d.a)(e,r);return{logits:()=>Object(sub.a)(c,Object(d.a)(Object(I.a)(c,[o],true),r))}}};var un=n(622);const cn={kernelName:c.Nc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,Object(un.a)(n))}}};var ln=n(645);const dn={kernelName:c.Oc,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:o}=n;return{x:()=>Object(ln.a)(e,r,o)}}};var hn=n(573);const pn={kernelName:c.Uc,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Object(hn.a)(e,r)}}},fn={kernelName:c.Vc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(d.a)(Object(x.a)(Object(l.a)(n,"float32")),2))}}},mn={kernelName:c.Wc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(e,Object(d.a)(Object(l.a)(n,"float32"),2))}}},bn={kernelName:c.Xc,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=Object(y.a)(2);return{a:()=>Object(d.a)(e,Object(d.a)(n,Object(sub.a)(a,b))),b:()=>Object(d.a)(e,Object(d.a)(n,Object(sub.a)(b,a)))}}},gn={kernelName:c.Yc,gradFunc:e=>({x:()=>Object(T.a)(e)})},yn={kernelName:c.dd,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[a,b]=t,n=w.assertAndGetBroadcastShape(a.shape,b.shape);return{a:()=>{let t=e;const r=w.getReductionAxes(a.shape,n);return r.length>0&&(t=Object(I.a)(t,r)),Object(S.a)(t,a.shape)},b:()=>{let t=e;const r=w.getReductionAxes(b.shape,n);return r.length>0&&(t=Object(I.a)(t,r)),Object(S.a)(Object(m.a)(t),b.shape)}}}},xn={kernelName:c.ed,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,o=r.shape.slice(),{axis:c}=n;Object(L.I)(c,r.shape).forEach((e=>{o[e]=1}));const l=Object(S.a)(e,o),h=Object(d.a)(l,Object(ht.a)(r.shape,"float32"));return{x:()=>h}}},On={kernelName:c.fd,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(div.a)(e,Object(O.a)(Object(Qt.a)(n)))}}},vn={kernelName:c.gd,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Object(d.a)(Object(sub.a)(Object(y.a)(1),Object(O.a)(n)),e)}}},kn={kernelName:c.hd,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:o}=n;return{x:()=>{let t=Object(T.a)(r);if(1===r.rank)for(let i=0;i<o[0];++i)t=Object(A.a)(t,Object(bt.a)(e,[i*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let i=0;i<o[0];++i)for(let n=0;n<o[1];++n)t=Object(A.a)(t,Object(bt.a)(e,[i*r.shape[0],n*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let i=0;i<o[0];++i)for(let n=0;n<o[1];++n)for(let c=0;c<o[2];++c)t=Object(A.a)(t,Object(bt.a)(e,[i*r.shape[0],n*r.shape[1],c*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let i=0;i<o[0];++i)for(let n=0;n<o[1];++n)for(let c=0;c<o[2];++c)for(let l=0;l<o[3];++l)t=Object(A.a)(t,Object(bt.a)(e,[i*r.shape[0],n*r.shape[1],c*r.shape[2],l*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},wn={kernelName:c.kd,gradFunc:(e,t,n)=>{const r=n,{perm:o}=r,c=Oe.h(o);return{x:()=>Object(ke.a)(e,c)}}};var Sn=n(607);const In={kernelName:c.md,gradFunc:(e,t,n)=>{const r=n,{axis:o}=r;return{value:()=>Object(Sn.a)(e,o)}}};var Nn=n(649),jn=n(650),Tn=n(644);const Cn={kernelName:c.nd,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Object(Tn.a)(t,Object(T.a)(t)),r=Object(jn.a)(e,n);let o=Object(ee.a)(t,Object(y.a)(0,"int32"));const c=r.rank-o.rank;for(let i=0;i<c;++i)o=Object(Nn.a)(o,i+1);o=Object(ne.a)(o,Object(ht.a)(r.shape,"bool"));const l=Object(T.a)(r);return Object(re.a)(o,r,l)}(e,n)}}};const $n={kernelName:c.pd,gradFunc:e=>({x:()=>Object(T.a)(e)})};var En=n(640);const An=[f,v,k,N,j,C,$,E,R,_,F,D,V,G,K,Y,Z,J,Q,ae,se,oe,he,le,me,ge,xe,we,Ne,je,Dt,Te,$e,Ee,Ae,Re,Fe,_e,ze,Pe,Ve,Ue,Ge,He,qe,Xe,Ye,Ze,Je,et,at,at,it,ut,lt,pt,ft,mt,gt,xt,Ot,vt,wt,St,Nt,jt,jt,$t,Et,Ft,Mt,zt,Lt,Pt,Bt,Wt,Ut,Gt,Ht,Kt,Yt,Zt,Jt,en,nn,sn,on,cn,dn,dn,pn,pn,fn,bn,mn,gn,yn,xn,On,vn,kn,wn,In,Cn,$n];for(const e of An)Object(En.e)(e);var Rn=n(601),_n=n(548);Object(_n.d)().prototype.abs=function(){return this.throwIfDisposed(),Object(Rn.a)(this)};var Fn=n(796);Object(_n.d)().prototype.acos=function(){return this.throwIfDisposed(),Object(Fn.a)(this)};var Dn=n(797);Object(_n.d)().prototype.acosh=function(){return this.throwIfDisposed(),Object(Dn.a)(this)},Object(_n.d)().prototype.add=function(b){return this.throwIfDisposed(),Object(A.a)(this,b)};var Mn=n(714);Object(_n.d)().prototype.all=function(e,t){return this.throwIfDisposed(),Object(Mn.a)(this,e,t)};var zn=n(715);Object(_n.d)().prototype.any=function(e,t){return this.throwIfDisposed(),Object(zn.a)(this,e,t)};var Ln=n(716);Object(_n.d)().prototype.argMax=function(e){return this.throwIfDisposed(),Object(Ln.a)(this,e)};var Pn=n(717);Object(_n.d)().prototype.argMin=function(e){return this.throwIfDisposed(),Object(Pn.a)(this,e)},Object(_n.d)().prototype.asScalar=function(){return this.throwIfDisposed(),Object(L.b)(1===this.size,(()=>"The array must have only 1 element.")),Object(S.a)(this,[])},Object(_n.d)().prototype.asType=function(e){return this.throwIfDisposed(),Object(l.a)(this,e)},Object(_n.d)().prototype.as1D=function(){return this.throwIfDisposed(),Object(S.a)(this,[this.size])},Object(_n.d)().prototype.as2D=function(e,t){return this.throwIfDisposed(),Object(S.a)(this,[e,t])},Object(_n.d)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Object(S.a)(this,[e,t,n])},Object(_n.d)().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Object(S.a)(this,[e,t,n,r])},Object(_n.d)().prototype.as5D=function(e,t,n,r,o){return this.throwIfDisposed(),Object(S.a)(this,[e,t,n,r,o])};var Bn=n(798);Object(_n.d)().prototype.asin=function(){return this.throwIfDisposed(),Object(Bn.a)(this)};var Wn=n(799);Object(_n.d)().prototype.asinh=function(){return this.throwIfDisposed(),Object(Wn.a)(this)};var Vn=n(800);Object(_n.d)().prototype.atan=function(){return this.throwIfDisposed(),Object(Vn.a)(this)};var Un=n(718);Object(_n.d)().prototype.atan2=function(b){return this.throwIfDisposed(),Object(Un.a)(this,b)};var Gn=n(801);Object(_n.d)().prototype.atanh=function(){return this.throwIfDisposed(),Object(Gn.a)(this)};var Hn=n(673);Object(_n.d)().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),Object(Hn.a)(this,e,t,n,r)},Object(_n.d)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Object(ln.a)(this,e,t)};var qn=n(639);Object(_n.d)().prototype.batchNorm=function(e,t,n,r,o){return this.throwIfDisposed(),Object(qn.a)(this,e,t,n,r,o)};var Kn=n(674);Object(_n.d)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Object(Kn.a)(this,e)},Object(_n.d)().prototype.cast=function(e){return this.throwIfDisposed(),Object(l.a)(this,e)};var Xn=n(802);Object(_n.d)().prototype.ceil=function(){return this.throwIfDisposed(),Object(Xn.a)(this)};var Yn=n(803);Object(_n.d)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Object(Yn.a)(this,e,t)},Object(_n.d)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof _n.a&&(e=[e]),Object(hn.a)([this,...e],t)};var Zn=n(720);Object(_n.d)().prototype.conv1d=function(filter,e,t,n,r,o){return this.throwIfDisposed(),Object(Zn.a)(this,filter,e,t,n,r,o)};var Jn=n(721);Object(_n.d)().prototype.conv2dTranspose=function(filter,e,t,n,r){return this.throwIfDisposed(),Object(Jn.a)(this,filter,e,t,n,r)},Object(_n.d)().prototype.conv2d=function(filter,e,t,n,r,o){return this.throwIfDisposed(),Object(de.a)(this,filter,e,t,n,r,o)},Object(_n.d)().prototype.cos=function(){return this.throwIfDisposed(),Object(Qt.a)(this)},Object(_n.d)().prototype.cosh=function(){return this.throwIfDisposed(),Object(tn.a)(this)},Object(_n.d)().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Object(Rt.a)(this,e,t,n)},Object(_n.d)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Object(ve.a)(this,e,t,n)};var Qn=n(724);Object(_n.d)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Object(Qn.a)(this,e,t)};var er=n(646);Object(_n.d)().prototype.depthwiseConv2d=function(filter,e,t,n,r,o){return this.throwIfDisposed(),Object(er.a)(this,filter,e,t,n,r,o)};var nr=n(725);Object(_n.d)().prototype.dilation2d=function(filter,e,t,n,r){return this.throwIfDisposed(),Object(nr.a)(this,filter,e,t,n,r)};var rr=n(726);Object(_n.d)().prototype.divNoNan=function(b){return this.throwIfDisposed(),Object(rr.a)(this,b)},Object(_n.d)().prototype.div=function(b){return this.throwIfDisposed(),Object(div.a)(this,b)};var ar=n(727);Object(_n.d)().prototype.dot=function(b){return this.throwIfDisposed(),Object(ar.a)(this,b)};var sr=n(678);Object(_n.d)().prototype.elu=function(){return this.throwIfDisposed(),Object(sr.a)(this)},Object(_n.d)().prototype.equal=function(b){return this.throwIfDisposed(),Object(tt.a)(this,b)};var ir=n(805);Object(_n.d)().prototype.erf=function(){return this.throwIfDisposed(),Object(ir.a)(this)};var or=n(728);Object(_n.d)().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),Object(or.a)(this,e,t)},Object(_n.d)().prototype.exp=function(){return this.throwIfDisposed(),Object(Ce.a)(this)},Object(_n.d)().prototype.expandDims=function(e){return this.throwIfDisposed(),Object(Nn.a)(this,e)};var ur=n(806);Object(_n.d)().prototype.expm1=function(){return this.throwIfDisposed(),Object(ur.a)(this)};var cr=n(692);Object(_n.d)().prototype.fft=function(){return this.throwIfDisposed(),Object(cr.a)(this)},Object(_n.d)().prototype.flatten=function(){return this.throwIfDisposed(),Object(S.a)(this,[this.size])},Object(_n.d)().prototype.floor=function(){return this.throwIfDisposed(),Object(yt.a)(this)};var lr=n(672);Object(_n.d)().prototype.floorDiv=function(b){return this.throwIfDisposed(),Object(lr.a)(this,b)},Object(_n.d)().prototype.gather=function(e,t){return this.throwIfDisposed(),Object(jn.a)(this,e,t)},Object(_n.d)().prototype.greaterEqual=function(b){return this.throwIfDisposed(),Object(ee.a)(this,b)},Object(_n.d)().prototype.greater=function(b){return this.throwIfDisposed(),Object(Ke.a)(this,b)};var dr=n(693);Object(_n.d)().prototype.ifft=function(){return this.throwIfDisposed(),Object(dr.a)(this)};var pr=n(744);Object(_n.d)().prototype.irfft=function(){return this.throwIfDisposed(),Object(pr.a)(this)};var fr=n(807);Object(_n.d)().prototype.isFinite=function(){return this.throwIfDisposed(),Object(fr.a)(this)};var mr=n(808);Object(_n.d)().prototype.isInf=function(){return this.throwIfDisposed(),Object(mr.a)(this)};var gr=n(809);Object(_n.d)().prototype.isNaN=function(){return this.throwIfDisposed(),Object(gr.a)(this)};var yr=n(681);Object(_n.d)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Object(yr.a)(this,e)},Object(_n.d)().prototype.lessEqual=function(b){return this.throwIfDisposed(),Object(te.a)(this,b)},Object(_n.d)().prototype.less=function(b){return this.throwIfDisposed(),Object(st.a)(this,b)};var xr=n(729);Object(_n.d)().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Object(xr.a)(this,e,t,n,r)};var Or=n(810);Object(_n.d)().prototype.logSigmoid=function(){return this.throwIfDisposed(),Object(Or.a)(this)};var vr=n(811);Object(_n.d)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Object(vr.a)(this,e)};var kr=n(683);Object(_n.d)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Object(kr.a)(this,e,t)},Object(_n.d)().prototype.log=function(){return this.throwIfDisposed(),Object(Tt.a)(this)};var wr=n(730);Object(_n.d)().prototype.log1p=function(){return this.throwIfDisposed(),Object(wr.a)(this)},Object(_n.d)().prototype.logicalAnd=function(b){return this.throwIfDisposed(),Object(ne.a)(this,b)},Object(_n.d)().prototype.logicalNot=function(){return this.throwIfDisposed(),Object(qt.a)(this)};var Sr=n(684);Object(_n.d)().prototype.logicalOr=function(b){return this.throwIfDisposed(),Object(Sr.a)(this,b)};var Ir=n(732);Object(_n.d)().prototype.logicalXor=function(b){return this.throwIfDisposed(),Object(Ir.a)(this,b)},Object(_n.d)().prototype.matMul=function(b,e,t){return this.throwIfDisposed(),Object(H.a)(this,b,e,t)};var Nr=n(685);Object(_n.d)().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Object(Nr.a)(this,e,t,n,r)};var jr=n(623);Object(_n.d)().prototype.max=function(e,t){return this.throwIfDisposed(),Object(jr.a)(this,e,t)},Object(_n.d)().prototype.maximum=function(b){return this.throwIfDisposed(),Object(Tn.a)(this,b)};var Tr=n(653);Object(_n.d)().prototype.mean=function(e,t){return this.throwIfDisposed(),Object(Tr.a)(this,e,t)};var Cr=n(679);Object(_n.d)().prototype.min=function(e,t){return this.throwIfDisposed(),Object(Cr.a)(this,e,t)};var $r=n(686);Object(_n.d)().prototype.minimum=function(b){return this.throwIfDisposed(),Object($r.a)(this,b)};var Er=n(733);Object(_n.d)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Object(Er.a)(this,e,t)};var Ar=n(734);Object(_n.d)().prototype.mod=function(b){return this.throwIfDisposed(),Object(Ar.a)(this,b)},Object(_n.d)().prototype.mul=function(b){return this.throwIfDisposed(),Object(d.a)(this,b)},Object(_n.d)().prototype.neg=function(){return this.throwIfDisposed(),Object(m.a)(this)};var Rr=n(648);Object(_n.d)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Object(Rr.a)(this,e,t,n)};var _r=n(687);Object(_n.d)().prototype.notEqual=function(b){return this.throwIfDisposed(),Object(_r.a)(this,b)};var Fr=n(688);Object(_n.d)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Object(Fr.a)(this,e,t,n)};var Dr=n(812);Object(_n.d)().prototype.onesLike=function(){return this.throwIfDisposed(),Object(Dr.a)(this)},Object(_n.d)().prototype.pad=function(e,t){return this.throwIfDisposed(),Object(rn.a)(this,e,t)};var Mr=n(735);Object(_n.d)().prototype.pool=function(e,t,n,r,o,c){return this.throwIfDisposed(),Object(Mr.a)(this,e,t,n,r,o,c)},Object(_n.d)().prototype.pow=function(e){return this.throwIfDisposed(),Object(Ct.a)(this,e)};var zr=n(689);Object(_n.d)().prototype.prelu=function(e){return this.throwIfDisposed(),Object(zr.a)(this,e)};var Lr=n(736);Object(_n.d)().prototype.prod=function(e,t){return this.throwIfDisposed(),Object(Lr.a)(this,e,t)};var Pr=n(813);Object(_n.d)().prototype.reciprocal=function(){return this.throwIfDisposed(),Object(Pr.a)(this)};var Br=n(627);Object(_n.d)().prototype.relu=function(){return this.throwIfDisposed(),Object(Br.a)(this)};var Wr=n(691);Object(_n.d)().prototype.relu6=function(){return this.throwIfDisposed(),Object(Wr.a)(this)},Object(_n.d)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Object(S.a)(this,e.shape)},Object(_n.d)().prototype.reshape=function(e){return this.throwIfDisposed(),Object(S.a)(this,e)};var Vr=n(819);Object(_n.d)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Object(Vr.a)(this,e,t,n)};var Ur=n(818);Object(_n.d)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Object(Ur.a)(this,e,t,n)},Object(_n.d)().prototype.reverse=function(e){return this.throwIfDisposed(),Object(Vt.a)(this,e)};var Gr=n(694);Object(_n.d)().prototype.rfft=function(){return this.throwIfDisposed(),Object(Gr.a)(this)};var Hr=n(738);Object(_n.d)().prototype.round=function(){return this.throwIfDisposed(),Object(Hr.a)(this)},Object(_n.d)().prototype.rsqrt=function(){return this.throwIfDisposed(),Object(De.a)(this)};var qr=n(740);Object(_n.d)().prototype.selu=function(){return this.throwIfDisposed(),Object(qr.a)(this)};var Kr=n(741);Object(_n.d)().prototype.separableConv2d=function(e,t,n,r,o,c){return this.throwIfDisposed(),Object(Kr.a)(this,e,t,n,r,o,c)},Object(_n.d)().prototype.sigmoid=function(){return this.throwIfDisposed(),Object(un.a)(this)};var Xr=n(814);Object(_n.d)().prototype.sign=function(){return this.throwIfDisposed(),Object(Xr.a)(this)},Object(_n.d)().prototype.sin=function(){return this.throwIfDisposed(),Object(be.a)(this)},Object(_n.d)().prototype.sinh=function(){return this.throwIfDisposed(),Object(ye.a)(this)},Object(_n.d)().prototype.slice=function(e,t){return this.throwIfDisposed(),Object(bt.a)(this,e,t)};var Yr=n(815);Object(_n.d)().prototype.softmax=function(e){return this.throwIfDisposed(),Object(Yr.a)(this,e)};var Zr=n(731);Object(_n.d)().prototype.softplus=function(){return this.throwIfDisposed(),Object(Zr.a)(this)},Object(_n.d)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Object(X.a)(this,e,t)},Object(_n.d)().prototype.split=function(e,t){return this.throwIfDisposed(),Object(ie.a)(this,e,t)},Object(_n.d)().prototype.sqrt=function(){return this.throwIfDisposed(),Object(x.a)(this)},Object(_n.d)().prototype.square=function(){return this.throwIfDisposed(),Object(O.a)(this)};var Jr=n(695);Object(_n.d)().prototype.squaredDifference=function(b){return this.throwIfDisposed(),Object(Jr.a)(this,b)};var Qr=n(656);Object(_n.d)().prototype.squeeze=function(e){return this.throwIfDisposed(),Object(Qr.a)(this,e)},Object(_n.d)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof _n.a?[this,e]:[this,...e];return Object(Sn.a)(n,t)},Object(_n.d)().prototype.step=function(e){return this.throwIfDisposed(),Object(h.a)(this,e)};var ea=n(816);Object(_n.d)().prototype.stridedSlice=function(e,t,n,r,o,c,l,d){return this.throwIfDisposed(),Object(ea.a)(this,e,t,n,r,o,c,l,d)},Object(_n.d)().prototype.sub=function(b){return this.throwIfDisposed(),Object(sub.a)(this,b)},Object(_n.d)().prototype.sum=function(e,t){return this.throwIfDisposed(),Object(I.a)(this,e,t)};var ta=n(817);Object(_n.d)().prototype.tan=function(){return this.throwIfDisposed(),Object(ta.a)(this)};var na=n(719);Object(_n.d)().prototype.tanh=function(){return this.throwIfDisposed(),Object(na.a)(this)},Object(_n.d)().prototype.tile=function(e){return this.throwIfDisposed(),Object(Me.a)(this,e)},Object(_n.d)().prototype.toBool=function(){return this.throwIfDisposed(),Object(l.a)(this,"bool")},Object(_n.d)().prototype.toFloat=function(){return this.throwIfDisposed(),Object(l.a)(this,"float32")},Object(_n.d)().prototype.toInt=function(){return this.throwIfDisposed(),Object(l.a)(this,"int32")};var ra=n(746);Object(_n.d)().prototype.topk=function(e,t){return this.throwIfDisposed(),Object(ra.a)(this,e,t)},Object(_n.d)().prototype.transpose=function(e){return this.throwIfDisposed(),Object(ke.a)(this,e)};var aa=n(747);Object(_n.d)().prototype.unique=function(e){return this.throwIfDisposed(),Object(aa.a)(this,e)},Object(_n.d)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Object(Le.a)(this,e,t)},Object(_n.d)().prototype.unstack=function(e){return this.throwIfDisposed(),Object(It.a)(this,e)},Object(_n.d)().prototype.where=function(e,t){return this.throwIfDisposed(),Object(re.a)(e,this,t)},Object(_n.d)().prototype.zerosLike=function(){return this.throwIfDisposed(),Object(T.a)(this)};class sa extends Error{constructor(e){super(e),Object.setPrototypeOf(this,sa.prototype)}}class ia extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ia.prototype)}}class oa extends Error{constructor(e){super(e),Object.setPrototypeOf(this,oa.prototype)}}class ua extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ua.prototype)}}class ca extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ca.prototype)}}class la extends Error{constructor(e){super(e),Object.setPrototypeOf(this,la.prototype)}}class da{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let i=0;i<this.maxEntries-e;i++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function ha(e,t){if(Array.isArray(e)){let n=[];for(let i=0;i<t;i++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function pa(e,t){if(!e)throw new ca(t)}function fa(e,t){let n=0;for(const r of e)r===t&&n++;return n}function ma(e){return 1===e.length?e[0]:e}function ba(e){return Array.isArray(e)?e:[e]}function ga(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function ya(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let xa={};function Oa(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function va(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>va(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?va(t):e[n]=t.value)}}}function ka(e,t={},n={},r="object",o=!1){if("string"==typeof e){const o=e;let c;if(o in n)c=n[o];else if(o in xa)c=xa[o];else if(c=t[o],null==c)throw new oa(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return c}{const c=e;if(null==c.className||null==c.config)throw new oa(`${r}: Improper config format: ${JSON.stringify(c)}.\n'className' and 'config' must set.`);const l=c.className;let d,h;if(l in n?[d,h]=n[l]:l in xa?[d,h]=xa.className:l in t&&([d,h]=t[l]),null==d)throw new oa(`Unknown ${r}: ${l}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=h){const e={};for(const t of Object.keys(xa))e[t]=xa[t];for(const t of Object.keys(n))e[t]=n[t];c.config.customObjects=e;const t=Object.assign({},xa);for(const e of Object.keys(n))xa[e]=n[e];va(c.config);const r=h(d,c.config,n,o);return xa=Object.assign({},t),r}{const e=Object.assign({},xa);for(const e of Object.keys(n))xa[e]=n[e];const t=new d(c.config);return xa=Object.assign({},e),t}}}function wa(a,b){return-1*function(a,b){return a<b?-1:a>b?1:0}(a,b)}function Sa(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Ia(e){if(null==e)throw new oa(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Na(e,label,t){if(null!=t&&e.indexOf(t)<0)throw new oa(`${t} is not a valid ${label}.  Valid values are ${e} or null/undefined.`)}function ja(e,t,n=0,r=1/0){return pa(n>=0),pa(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function Ta(e,t){Array.isArray(e)?(o.util.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,i)=>Ta(e,`element ${i+1} of ${t}`)))):o.util.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Ca(e)}.`))}function Ca(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Ca(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function $a(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Ea=0;function Aa(){return Ea++}const Ra={};function _a(e=""){return e in Ra||(Ra[e]=0),Ra[e]+=1,e+Ra[e].toString()}const Fa=["channelsFirst","channelsLast"],Da=["nearest","bilinear"],Ma=["valid","same","causal"],za=["max","avg"],La=["sum","mul","concat","ave"],Pa=new Map;function Ba(e){Na(Fa,"DataFormat",e)}function Wa(e){Na(Ma,"PaddingMode",e)}function Va(e){Na(za,"PoolMode",e)}const Ua=[];function Ga(e,t){Ua.push(e);try{const e=t();return Ua.pop(),e}catch(e){throw Ua.pop(),e}}function Ha(e){if(!Xa(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Ua.length?"":Ua.join("/")+"/")+e}function qa(e){if(!Xa(e))throw new Error("Not a valid tensor name: '"+e+"'");Pa.has(e)||Pa.set(e,0);const t=Pa.get(e);if(Pa.set(e,Pa.get(e)+1),t>0){const n=`${e}_${t}`;return Pa.set(n,1),n}return e}const Ka=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Xa(e){return!!e.match(Ka)}function Ya(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let i=t;i<n;++i)r*=e[i];return r}function Za(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let i=0;i<e.length;i++){const n=e[i];n<t&&(t=n)}return t}function Ja(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let i=0;i<e.length;i++){const n=e[i];n>t&&(t=n)}return t}function Qa(e,t){if(t<e)throw new oa(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let i=e;i<t;++i)n.push(i);return n}let es;function ts(){return null==es&&(es=Object(o.backend)().epsilon()),es}function ns(e,t){return o.cast(e,t)}function rs(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),o.reshape(e,n)}function as(e,t,n){return Object(o.tidy)((()=>{switch(e.rank){case 1:return o.slice1d(e,t,n);case 2:return o.slice2d(e,[t,0],[n,e.shape[1]]);case 3:return o.slice3d(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return o.slice4d(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return o.slice(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return o.slice(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new oa(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function ss(e,t,n){return Object(o.tidy)((()=>{switch(e.rank){case 1:return o.slice1d(e,t,n);case 2:return o.slice2d(e,[0,t],[e.shape[0],n]);case 3:return o.slice3d(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return o.slice4d(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new oa(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function is(e,t,n,r){return Object(o.tidy)((()=>{switch(e.rank){case 1:return o.slice1d(e,t,n);case 2:switch(r){case 1:return as(e,t,n);case 2:return ss(e,t,n);default:throw new oa(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return as(e,t,n);case 2:return o.slice3d(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return ss(e,t,n);default:throw new oa(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return as(e,t,n);case 2:return o.slice4d(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return o.slice4d(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return ss(e,t,n);default:throw new oa(`The axis is not within the rank of the tensor ${r}`)}default:throw new oa(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function os(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),o.concat(e,t)}function us(a,b){switch(a.rank){case 1:return o.concat1d([a,b]);case 2:return o.concat2d([a,b],0);case 3:return o.concat3d([a,b],0);case 4:return o.concat4d([a,b],0);default:throw new oa(`concatAlongFirstAxis() received an unsupported tensor rank: ${a.rank}`)}}function cs(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new oa(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return o.tile(e,t)}function ls(e,t=0,n=1,r,c){return o.randomNormal(e,t,n,r,c)}function ds(a,b,e,t){if(a.rank<2||b.rank<2)throw new ua(`dot requires both inputs to be rank >= 2 but got x shape = ${a.shape} and y shape = ${b.shape}`);if(b.rank>=3){if(a.shape.slice(-1)[0]!==b.shape.slice(-2)[0])throw new ua(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${a.shape} and  y shape = ${b.shape}`)}if(2===a.rank&&2===b.rank){const n=!1,r=!1;return o.fused.matMul({a:a,b:b,transposeA:n,transposeB:r,bias:t?fs(a.rank,t,"channelsLast"):null,activation:e})}{const n=a.shape.slice(),r=n.pop();a=o.reshape(a,[-1,r]);const c=b.shape.slice(),l=c.pop(),d=c.pop(),h=[...c,l],f=Array.from({length:b.rank},((e,i)=>0===i?b.rank-2:i<=b.rank-2?i-1:i));b=o.reshape(o.transpose(b,f),[d,-1]);const m=[...n,...h],y=!1,x=!1;return o.reshape(o.fused.matMul({a:a,b:b,transposeA:y,transposeB:x,bias:t?fs(a.rank,t,"channelsLast"):null,activation:e}),m)}}function hs(e,t,n){return Object(o.tidy)((()=>(t=Array.isArray(t)?Object(o.tensor1d)(t,"int32"):o.cast(t,"int32"),o.gather(e,t,n))))}function ps(e){return o.mul(e,e)}function fs(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new oa(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?o.reshape(t,[1,r[0],1,1,1]):o.reshape(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?o.reshape(t,[1,1,1,1,r[0]]):o.reshape(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?o.reshape(t,[1,r[0],1,1]):o.reshape(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?o.reshape(t,[1,1,1,r[0]]):o.reshape(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?o.reshape(t,[1,r[0],1]):o.reshape(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?o.reshape(t,[1,1,r[0]]):o.reshape(t,[1].concat(r))}else if(e<3)return t;throw new oa(`Unsupported input rank by biasAdd: ${t.rank}`)}function ms(e,t,n){return Object(o.tidy)((()=>(null==n&&(n="channelsLast"),Ba(n),o.add(e,fs(e.rank,t,n)))))}function bs(e,t,n,r){return Object(o.tidy)((()=>o.dropout(e,t,n,r)))}function gs(e,t,n=!1){return n?e():t()}const ys=["fanIn","fanOut","fanAvg"],xs=["normal","uniform","truncatedNormal"];class Os extends o.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class vs extends Os{apply(e,t){return Object(o.zeros)(e,t)}}vs.className="Zeros",o.serialization.registerClass(vs);class ks extends Os{apply(e,t){return Object(o.ones)(e,t)}}ks.className="Ones",o.serialization.registerClass(ks);class ws extends Os{constructor(e){if(super(),"object"!=typeof e)throw new oa(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new oa(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Object(o.tidy)((()=>Object(o.mul)(Object(o.scalar)(this.value),Object(o.ones)(e,t))))}getConfig(){return{value:this.value}}}ws.className="Constant",o.serialization.registerClass(ws);class Ss extends Os{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Object(o.randomUniform)(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Ss.className="RandomUniform",o.serialization.registerClass(Ss);class Is extends Os{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new ua(`randomNormal does not support dType ${t}.`);return ls(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Is.className="RandomNormal",o.serialization.registerClass(Is);class Ns extends Os{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new ua(`truncatedNormal does not support dType ${t}.`);return Object(o.truncatedNormal)(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ns.className="TruncatedNormal",o.serialization.registerClass(Ns);class js extends Os{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Object(o.tidy)((()=>{if(2!==e.length||e[0]!==e[1])throw new oa("Identity matrix initializer can only be used for 2D square matrices.");return Object(o.mul)(this.gain,Object(o.eye)(e[0]))}))}getConfig(){return{gain:this.gain}}}js.className="Identity",o.serialization.registerClass(js);class Ts extends Os{constructor(e){if(super(),e.scale<0)throw new oa(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Na(ys,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Na(xs,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(Ba(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Ya(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=Ya(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=Ya(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],c=n[1];let l=this.scale;if("fanIn"===this.mode?l/=Math.max(1,r):"fanOut"===this.mode?l/=Math.max(1,c):l/=Math.max(1,(r+c)/2),"normal"===this.distribution){const n=Math.sqrt(l);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new ua(`${this.getClassName()} does not support dType ${t}.`);return Object(o.truncatedNormal)(e,0,n,t,this.seed)}{const n=Math.sqrt(3*l);return Object(o.randomUniform)(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Ts.className="VarianceScaling",o.serialization.registerClass(Ts);class Cs extends Ts{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Ts.className}}Cs.className="GlorotUniform",o.serialization.registerClass(Cs);class $s extends Ts{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Ts.className}}$s.className="GlorotNormal",o.serialization.registerClass($s);class Es extends Ts{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Ts.className}}Es.className="HeNormal",o.serialization.registerClass(Es);class As extends Ts{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Ts.className}}As.className="HeUniform",o.serialization.registerClass(As);class Rs extends Ts{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Ts.className}}Rs.className="LeCunNormal",o.serialization.registerClass(Rs);class _s extends Ts{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Ts.className}}_s.className="LeCunNormal",o.serialization.registerClass(_s);class Fs extends Os{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new ua("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Object(o.tidy)((()=>{if(e.length<2)throw new ua("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const a=ls(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let q=o.linalg.gramSchmidt(a);return e[0]>e[1]&&(q=Object(o.transpose)(q)),Object(o.mul)(this.gain,q)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Fs.className="Orthogonal",o.serialization.registerClass(Fs);const Ds={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Ms(e,t={}){return ka(e,o.serialization.SerializationMap.getMap().classNameMap,t,"initializer")}function zs(e){return Oa(e)}function Ls(e){if("string"==typeof e){const t=e in Ds?Ds[e]:e;if("GlorotNormal"===t)return new $s;if("GlorotUniform"===t)return new Cs;if("HeNormal"===t)return new Es;if("HeUniform"===t)return new As;if("LeCunNormal"===t)return new Rs;if("LeCunUniform"===t)return new _s;{const e={};return e.className=t,e.config={},Ms(e)}}return e instanceof Os?e:Ms(e)}function Ps(e){return Array.isArray(e)&&Array.isArray(e[0])}function Bs(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Ws(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new oa(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Vs(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new oa(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Us(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((a,b)=>a*b));return t}const Gs="Variable";class Hs{constructor(e,t="float32",n="Variable",r=!0,c=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Aa(),n=null==n?Gs:n,this.originalName=Ha(n),this.name=qa(this.originalName),this.trainable_=r,this.constraint=c,this.val=o.variable(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function qs(e){return e.map((e=>e.read()))}function Ks(e){e.forEach((e=>{e[0].write(e[1])}))}class Xs{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Ys{constructor(e,t,n,r,o,c,l){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=o,this.outputTensorIndex=l,this.id=Aa(),null!=c&&(this.originalName=Ha(c),this.name=qa(this.originalName)),this.rank=t.length}}let Zs=0;class Js{constructor(e,t){this.callArgs=t,this.id=Zs++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Qs=0;class ei extends o.serialization.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Qs++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=ga(e)+"_"+_a(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new ia(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new oa(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return ma(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return ma(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new sa(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new sa(`Layer ${this.name} is not connected, no input to return.`);return ma(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new sa(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new sa(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return ma(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=ba(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=ba(this.inputSpec);if(e.length!==t.length)throw new oa(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],o=t[n];if(null==o)continue;const c=r.rank;if(null!=o.ndim&&c!==o.ndim)throw new oa(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${c}`);if(null!=o.maxNDim&&c>o.maxNDim)throw new oa(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${c}`);if(null!=o.minNDim&&c<o.minNDim)throw new oa(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${c}.`);if(null!=o.dtype&&r.dtype!==o.dtype)throw new oa(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);if(o.axes){const e=r.shape;for(const t in o.axes){const r=Number(t),c=o.axes[t],l=r>=0?e[r]:e[e.length+r];if(null!=c&&-1===[c,null].indexOf(l))throw new oa(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${c} but got shape ${e}.`)}}if(null!=o.shape)for(let i=0;i<o.shape.length;++i){const e=o.shape[i],t=r.shape[i];if(null!=e&&null!=t&&e!==t)throw new oa(`Input ${n} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=ba(e);let r=!0;for(const input of n)if(!(input instanceof Ys)){r=!1;break}let o=!0;for(const input of n)if(input instanceof Ys){o=!1;break}if(r===o)throw new oa("Arguments to apply() must be all SymbolicTensors or all Tensors");return Ga(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of ba(e))t.push(n.shape);this.build(ma(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(e),o){let output=this.call(e,t);const r=ba(output),o=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),o.push(e);if(output=ma(o),null!=this.activityRegularizer)throw new ua("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return output}{const n=function(e){e=ba(e);const t=[];for(const n of e)t.push(n.shape);return ma(t)}(e),r=this.computeOutputShape(n);let output;const o="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),output=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new Ys(o,n,this,ba(e),t,this.name,r))):new Ys(o,r,this,ba(e),t,this.name),this.addInboundNode(e,output,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new ua("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return output}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,i)=>{null!=n&&null!=e[i]&&e[i]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new sa(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new sa(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new ia(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Us(this.weights)}build(e){this.built=!0}getWeights(e=!1){return qs(e?this.trainableWeights:this.weights)}setWeights(e){Object(o.tidy)((()=>{const t=this.weights;if(t.length!==e.length)throw new oa(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=qs(t);for(let i=0;i<r.length;++i){const c=r[i],p=t[i],l=e[i];if(!o.util.arraysEqual(c.shape,l.shape))throw new oa(`Layer weight shape ${c.shape} not compatible with provided weight shape ${l.shape}`);n.push([p,l])}Ks(n)}))}addWeight(e,t,n,r,o,c,l,d){if(-1!==this._addedWeightNames.indexOf(e))throw new oa(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=d?d():Ls("zeros"));const h=r.apply(t,n),f=new Hs(h,n,e,c,l);return h.dispose(),null!=o&&this.addLoss((()=>o.apply(f.read()))),null==c&&(c=!0),c?this._trainableWeights.push(f):this._nonTrainableWeights.push(f),f}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=ba(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,mask){if(!this.supportsMasking){if(null!=mask){if(!Array.isArray(mask))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);mask.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return mask}addInboundNode(e,t,n,r,o,c,l=null){const d=ba(e);t=ba(t),n=ba(n),r=ba(r),o=Bs(o),c=Bs(c);const h=[],f=[],m=[];for(const e of d)h.push(e.sourceLayer),f.push(e.nodeIndex),m.push(e.tensorIndex);new Js({outboundLayer:this,inboundLayers:h,nodeIndices:f,tensorIndices:m,inputTensors:d,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:o,outputShapes:c},l);for(let i=0;i<t.length;i++)t[i].sourceLayer=this,t[i].nodeIndex=this.inboundNodes.length-1,t[i].tensorIndex=i}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function ti(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let i=0;i<e.inboundLayers.length;i++){const n=ti(e.inputTensors[i],e.inboundLayers[i],e.nodeIndices[i]);for(const e of n)-1===t.indexOf(e)&&t.push(e)}return t}}}class ni extends ei{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:_a("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new oa("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new oa("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new oa("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new Ys(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Js({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new oa(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function ri(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new oa("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new ni({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}ni.className="InputLayer",o.serialization.registerClass(ni);class ai{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof ai)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,mask){if(null!=this.id2Value[e.id])throw new oa(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Object(o.cast)(t,e.dtype)}catch(n){throw new oa(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=mask&&(this.id2Mask[e.id]=mask),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Ys){if(null==this.id2Value[e.id])throw new oa(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new oa(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Ys){if(null==this.id2Value[e.id])throw new oa(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new oa(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Object(o.dispose)(this.id2Mask)}}const si=new da,ii=new da;function oi(e,t,n,r){const c=null!=n&&n.training,l=Array.isArray(e),d=l?e:[e],h=d.map((e=>e.name)),f=[],m=t.names();for(const e of h)-1!==m.indexOf(e)?f.push(t.getValue(e)):f.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const y=h.join(",")+"|"+t.names().sort().join(",");let x,O=si.get(y);if(null==O){const e=function(e,t){o.util.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const o=ci(e[0],t);n=o.sorted,r=o.recipientMap}else{const o=new Set;for(const c of e){const{sorted:e,recipientMap:l}=ci(c,t);for(const t of e)o.has(t.name)||(n.push(t),o.add(t.name));for(const e in l)null==r[e]&&(r[e]=new Set),l[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:ui(r)}}(d,t);O=e.sorted,x=e.recipientCounts,si.put(y,O),ii.put(y,x)}x={},c||Object.assign(x,ii.get(y));const v=new ai(t);for(let i=0;i<O.length;++i){if(null!=r){const e=Object(o.memory)().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const e=O[i],l=e.sourceLayer;if(l instanceof ni)continue;const d=[],m=[],y=[];let k=!1;for(const input of e.inputs){const e=v.getValue(input),mask=v.getMask(input);d.push(e),m.push(mask),null!=mask&&(k=!0),c||(x[input.name]--,0!==x[input.name]||t.hasKey(input)||-1!==h.indexOf(input.name)||e.isDisposed||!0===input.sourceLayer.stateful||y.push(e))}k&&((n=n||{}).mask=m[0]);const w=ba(l.apply(d,n));let S=null;l.supportsMasking&&(S=l.computeMask(d,m));const I=di(e),N=Array.isArray(I)?I:[I];for(let i=0;i<N.length;++i){v.hasKey(N[i])||v.add(N[i],w[i],Array.isArray(S)?S[0]:S);const e=h.indexOf(N[i].name);-1!==e&&(f[e]=w[i])}c||Object(o.dispose)(y)}return v.disposeMasks(),l?f:f[0]}function ui(e){const t={};for(const n in e)t[n]=e[n].size;return t}function ci(e,t){const n=new Set,r=[],o={};for(const e of t.names())n.add(e);const c=[],l=[];for(c.push(e);c.length>0;){const e=c[c.length-1];if(n.has(e.name)){c.pop();continue}const t=l[l.length-1]===c.length-1;if(0===e.inputs.length||t)c.pop(),r.push(e),n.add(e.name),t&&l.pop();else{l.push(c.length-1);for(const input of e.inputs)null==o[input.name]&&(o[input.name]=new Set),o[input.name].add(e.name),n.has(input.name)||c.push(input)}}return{sorted:r,recipientMap:o}}function di(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let i=0;i<e.sourceLayer.inboundNodes.length;++i)for(const t of e.sourceLayer.inboundNodes[i].outputTensors)if(t.id===e.id){n=i;break}t=e.sourceLayer.getOutputAt(n)}return t}function hi(e,t){return Object(o.tidy)((()=>o.sqrt(o.sum(o.mul(e,e),t,!0))))}Object(o.env)().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=si&&si.setMaxEntries(e),null!=ii&&ii.setMaxEntries(e)}));class pi extends o.serialization.Serializable{getConfig(){return{}}}class fi extends pi{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Object(o.tidy)((()=>{const t=hi(e,this.axis),n=o.clipByValue(t,0,this.maxValue);return o.mul(e,o.div(n,o.add(ts(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}fi.className="MaxNorm",o.serialization.registerClass(fi);class mi extends pi{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Object(o.tidy)((()=>o.div(e,o.add(ts(),hi(e,this.axis)))))}getConfig(){return{axis:this.axis}}}mi.className="UnitNorm",o.serialization.registerClass(mi);class bi extends pi{apply(e){return o.relu(e)}}bi.className="NonNeg",o.serialization.registerClass(bi);class gi extends pi{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Object(o.tidy)((()=>{const t=hi(e,this.axis),n=o.add(o.mul(this.rate,o.clipByValue(t,this.minValue,this.maxValue)),o.mul(1-this.rate,t));return o.mul(e,o.div(n,o.add(ts(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}gi.className="MinMaxNorm",o.serialization.registerClass(gi);const yi={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function xi(e){return Oa(e)}function Oi(e,t={}){return ka(e,o.serialization.SerializationMap.getMap().classNameMap,t,"constraint")}function vi(e){if(null==e)return null;if("string"==typeof e){return Oi({className:e in yi?yi[e]:e,config:{}})}return e instanceof pi?e:Oi(e)}async function ki(e){if(null==e)return;const t=[],n=[],r=[];for(const o in e){const c=e[o];if("number"!=typeof c){const e=c;t.push(e.data()),n.push(o),r.push(e)}}if(t.length>0){const c=await Promise.all(t);for(let i=0;i<c.length;++i)e[n[i]]=c[i][0];Object(o.dispose)(r)}}function wi(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Si;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Si||(Si={}));class Ii{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Ni{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class ji extends Ii{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const c=Object(o.tidy)((()=>Object(o.add)(this.totals[e],Object(o.mul)(r,n))));this.totals[e]=c,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Object(o.tidy)((()=>{const n=Object(o.mul)(Object(o.div)(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),Object(o.keep)(t[e])})))}}class Ti extends Ii{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const o=this.history[r];for(let i=0;i<o.length;++i)if("number"!=typeof o[i]){const c=o[i];e.push(c.data()),t.push(r),n.push(i)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class Ci extends Ii{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||o.nextFrame,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");o.util.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,c=null!=n?n():o.util.now();return(...l)=>{const d=null!=n?n():o.util.now();return d-c<t||(c=d,r=e(...l)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await ki(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await ki(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await ki(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await ki(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await ki(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):o.util.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await ki(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await ki(e),await this.trainEnd(e))}}function $i(e,t){if(null==e&&(e={}),e instanceof Ii)return[e];if(Array.isArray(e)&&e[0]instanceof Ii)return e;return ba(e).map((e=>new Ci(e,t)))}class Ei{constructor(){}static registerCallbackConstructor(e,t){o.util.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Ei.checkForDuplicate(t),null==Ei.constructors[e]&&(Ei.constructors[e]=[]),Ei.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Ei.constructors){Ei.constructors[+t].forEach((t=>{if(t===e)throw new oa("Duplicate callback constructor.")}))}}static clear(){Ei.constructors={}}static createCallbacks(e){const t=[];for(const n in Ei.constructors){const r=+n;e>=r&&t.push(...Ei.constructors[r])}return t.map((e=>new e))}}function Ai(e,t,n,r,o,c,l,d,h){const f=new Ti,m=[new ji,...Ei.createCallbacks(t)];null!=e&&m.push(...e),m.push(f);const y=new Ni(m);return y.setParams({epochs:n,initialEpoch:r,samples:o,steps:c,batchSize:l,verbose:t,doValidation:d,metrics:h}),{callbackList:y,history:f}}function Ri(e,t={},n=!1){return ka(e,o.serialization.SerializationMap.getMap().classNameMap,t,"layer",n)}function _i(e,t){return Object(o.tidy)((()=>{"float32"!==e.dtype&&(e=o.cast(e,"float32"));const n=o.sum(ps(e),t,!0),r=o.fill(n.shape,ts()),c=o.sqrt(o.maximum(n,r));return o.div(e,c)}))}function Fi(e,t){return Object(o.tidy)((()=>o.mean(ps(o.sub(t,e)),-1)))}function Di(e,t){return Object(o.tidy)((()=>o.mean(o.abs(o.sub(t,e)),-1)))}function Mi(e,t){return Object(o.tidy)((()=>{const n=o.sub(e,t),r=o.clipByValue(o.abs(e),ts(),Number.MAX_VALUE),c=o.abs(o.div(n,r));return o.mul(100,o.mean(c,-1))}))}function zi(e,t){return Object(o.tidy)((()=>{const n=o.clipByValue(t,ts(),Number.MAX_VALUE),r=o.log(o.add(1,n)),c=o.clipByValue(e,ts(),Number.MAX_VALUE),l=o.log(o.add(1,c));return o.mean(ps(o.sub(r,l)),-1)}))}function Li(e,output,t=!1){return Object(o.tidy)((()=>{if(t)output=o.softmax(output);else{const e=o.sum(output,output.shape.length-1,!0);output=o.div(output,e)}return output=o.clipByValue(output,ts(),1-ts()),o.neg(o.sum(o.mul(o.cast(e,"float32"),o.log(output)),output.shape.length-1))}))}function Pi(e,output,t=!1){return Object(o.tidy)((()=>{const n=o.cast(o.floor(function(e){const t=[Ya(e.shape)];return o.reshape(e,t)}(e)),"int32"),r=(output=o.clipByValue(output,ts(),1-ts())).shape;return Li(o.reshape(o.oneHot(n,r[r.length-1]),r),output,t)}))}function Bi(e,t){return Object(o.tidy)((()=>{let n;return n=o.clipByValue(t,ts(),1-ts()),n=o.log(o.div(n,o.sub(1,n))),o.mean(function(e,t){if(!o.util.arraysEqual(e.shape,t.shape))throw new oa(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Object(o.tidy)((()=>{const n=o.relu(t),r=o.neg(o.abs(t));return o.add(o.sub(n,o.mul(t,e)),o.log1p(o.exp(r)))}))}(e,n),-1)}))}function Wi(e,t){return Object(o.tidy)((()=>{const n=o.clipByValue(e,ts(),1),r=o.clipByValue(t,ts(),1);return o.sum(o.mul(e,o.log(o.div(n,r))),-1)}))}function Vi(e,t){return Object(o.tidy)((()=>{const n=_i(e,-1),r=_i(t,-1),c=o.mul(n,r);return o.neg(o.sum(c,-1))}))}Ei.constructors={};const Ui={meanSquaredError:Fi,meanAbsoluteError:Di,meanAbsolutePercentageError:Mi,meanSquaredLogarithmicError:zi,squaredHinge:function(e,t){return Object(o.tidy)((()=>{const n=o.maximum(0,o.sub(1,o.mul(e,t)));return o.mean(ps(n),-1)}))},hinge:function(e,t){return Object(o.tidy)((()=>{const n=o.maximum(0,o.sub(1,o.mul(e,t)));return o.mean(n,-1)}))},categoricalHinge:function(e,t){return Object(o.tidy)((()=>{const n=o.sum(o.mul(e,t),-1),r=o.max(o.mul(o.sub(1,e),t),-1);return o.maximum(0,o.add(1,o.sub(r,n)))}))},logcosh:function(e,t){return Object(o.tidy)((()=>{const n=Math.log(2),r=o.sub(t,e),c=o.sub(o.add(r,o.softplus(o.mul(-2,r))),n);return o.mean(c,-1)}))},categoricalCrossentropy:Li,sparseCategoricalCrossentropy:Pi,binaryCrossentropy:Bi,kullbackLeiblerDivergence:Wi,poisson:function(e,t){return Object(o.tidy)((()=>{const n=o.log(o.add(ts(),t));return o.mean(o.sub(t,o.mul(e,n)),-1)}))},cosineProximity:Vi};function Gi(e){if("string"==typeof e){if(e in Ui)return Ui[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new oa(t)}return e}function Hi(e,t){return Object(o.tidy)((()=>{const n=o.mul(.5,o.onesLike(t)),r=ns(o.greater(t,n),e.dtype);return o.mean(o.equal(e,r),-1)}))}function qi(e,t){return Object(o.tidy)((()=>ns(o.equal(o.argMax(e,-1),o.argMax(t,-1)),"float32")))}function Ki(e,t){return Object(o.tidy)((()=>o.cast(o.sum(o.logicalAnd(o.equal(e,1),o.equal(t,1))),"float32")))}function Xi(e,t){return Object(o.tidy)((()=>{const n=Ki(e,t),r=function(e,t){return Object(o.tidy)((()=>o.cast(o.sum(o.logicalAnd(o.equal(e,0),o.equal(t,1))),"float32")))}(e,t),c=o.add(n,r);return o.cast(o.where(o.greater(c,0),o.div(n,c),0),"float32")}))}function Yi(e,t){return Bi(e,t)}function Zi(e,t){return e.rank===t.rank&&(e=o.squeeze(e,[e.rank-1])),(t=o.argMax(t,-1)).dtype!==e.dtype&&(t=o.cast(t,e.dtype)),o.cast(o.equal(e,t),"float32")}const Ji=Li,Qi=Pi,eo={binaryAccuracy:Hi,categoricalAccuracy:qi,precision:Xi,categoricalCrossentropy:Ji,sparseCategoricalCrossentropy:Qi,mse:Fi,MSE:Fi,mae:Di,MAE:Di,mape:Mi,MAPE:Mi,cosine:Vi};function to(e){if("string"==typeof e&&e in eo)return eo[e];if("string"!=typeof e&&null!=e)return e;throw new oa(`Unknown metric ${e}`)}function no(e){if(pa(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Ui))if(Ui[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(eo))if(eo[n]===e){t=n;break}return void 0!==t?t:e.name}}const ro=1048576;function ao(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!so(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>ro&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function so(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!so(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!so(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function io(e,t,n,r=console.log){const o=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const o of n.inboundNodes)if(-1!==r.indexOf(o)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),c=["Layer (type)","Input Shape","Output shape","Param #"];let l;if(o?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((p=>Math.floor(t*p)))),!o){c.push("Receives inputs"),l=[];for(const t in e.nodesByDepth)l.push(...e.nodesByDepth[t])}r("_".repeat(t)),oo(c,n,r),r("=".repeat(t));const d=e.layers;for(let i=0;i<d.length;++i)o?uo(d[i],n,r):co(d[i],n,l,r),r((i===d.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const h=function(e){let t;t=null!=e.collectedTrainableWeights?Us(e.collectedTrainableWeights):Us(e.trainableWeights);return t}(e),f=Us(e.nonTrainableWeights);r(`Total params: ${h+f}`),r(`Trainable params: ${h}`),r(`Non-trainable params: ${f}`),r("_".repeat(t))}function oo(e,t,n=console.log){let line="";for(let i=0;i<e.length;++i)i>0&&(line=line.slice(0,line.length-1)+" "),line+=e[i],line=line.slice(0,t[i]),line+=" ".repeat(t[i]-line.length);n(line)}function uo(e,t,n){let r,o;try{o=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){o="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}oo([`${e.name} (${e.getClassName()})`,o,r,e.countParams().toString()],t,n)}function co(e,t,n,r){let o,c;try{c=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){c="multiple"}try{o=JSON.stringify(e.outputShape)}catch(e){o="multiple"}const l=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let i=0;i<t.inboundLayers.length;++i){const e=t.inboundLayers[i].name,n=t.nodeIndices[i],r=t.tensorIndices[i];l.push(`${e}[${n}][${r}]`)}const d=e.name,h=e.getClassName(),f=0===l.length?"":l[0];oo([`${d} (${h})`,c,o,e.countParams().toString(),f],t,r);for(let i=1;i<l.length;++i)oo(["","","","",l[i]],t,r)}function lo(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function ho(e,t){if(null===e)return null;if("string"==typeof e)return ya(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let i=0;i<r;++i){const r=e[i];lo(t,i,r)?n.push(r):n.push(ho(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=ya(n);t[e]=ho(r,e)}}return t}}function po(e,t){if(null==e)return null;if("string"==typeof e)return ga(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let i=0;i<r;++i){const r=e[i];lo(t,i,r)?n.push(r):n.push(po(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],o=ga(n);t[o]="name"!==n&&"className"!==n||"string"!=typeof r?po(r,n):r}return t}}class fo extends ei{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=_a(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Sa(this.inputs).length!==this.inputs.length)throw new oa(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Sa(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;pa(0===n,"input layer has >1 nodes"),pa(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let i=0;i<this.inputLayers.length;i++){const t=this.inputLayers[i];if(!(t instanceof ni))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${i} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},o={},c={},l=[],d=(e,t,n,r,o,h)=>{null!=r&&null!=o&&null!=h||(r=e.sourceLayer,o=e.nodeIndex,h=e.tensorIndex);const f=r.inboundNodes[o];if(-1!==n.indexOf(f))throw new ia(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(f))return;this.containerNodes.add(fo.nodeKey(r,o)),r.id in c||(c[r.id]=Object.keys(c).length),-1===n.indexOf(f)&&n.push(f);const m=f.inboundLayers.length;for(let i=0;i<m;i++){const e=f.inputTensors[i],r=f.inboundLayers[i],o=f.nodeIndices[i],c=f.tensorIndices[i];d(e,t,n,r,o,c)}for(t.push(f);n.indexOf(f)>=0;)n.splice(n.indexOf(f),1);l.push(f)},h=[],f=[];for(const e of this.outputs)d(e,h,f);const m=l.slice().reverse();for(const e of m){n[e.id]=e,e.id in t||(t[e.id]=0);let c=t[e.id];const l=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];c=Math.max(c,l),r[e.outboundLayer.id]=c,o[e.outboundLayer.id]=e.outboundLayer,t[e.id]=c;for(let i=0;i<e.inboundLayers.length;i++){const r=e.inboundLayers[i],o=e.nodeIndices[i],l=r.inboundNodes[o],d=null==t[l.id]?0:t[l.id];t[l.id]=Math.max(c+1,d),n[l.id]=l}}const y={};for(const e in t){const r=t[e];r in y||(y[r]=[]),y[r].push(n[e])}const x={};for(const e in r){const t=r[e];t in x||(x[t]=[]),x[t].push(o[e])}let O=Object.keys(x).map((e=>parseInt(e,10))).sort(wa);this.layers=[];for(const e of O){const t=x[e];t.sort(((a,b)=>{const e=c[a.id],t=c[b.id];return e<t?-1:e>t?1:0}));for(const e of t)e instanceof fo&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=x,O=Object.keys(y).map((e=>parseInt(e,10))).sort(wa);const v=this.inputs.slice(),k=[];for(const e of O)for(const t of y[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===v.indexOf(n))throw new ia(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${k}`);for(const e of t.outputTensors)v.push(e);k.push(e.name)}}this.nodesByDepth=y;const w=this.layers.map((e=>e.name));for(const e of w){const t=w.filter((t=>t===e)).length;if(1!==t)throw new ia(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(w))}this.outboundNodes=[],this.inboundNodes=[],new Js({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new oa("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new oa(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const o=[];for(const r in e){let c=r;if(null==n[r]){const e=r.split("/");c=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[c])o.push([n[c],e[r]]);else if(t)throw new oa(`Provided weight data has no target variable: ${r}`);delete n[c]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new oa(`${e.length} of ${r} weights are not set: ${e}`)}Ks(o)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.20.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=po(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Object(o.tidy)((()=>{e=ba(e);const n=new ai;for(let i=0;i<this.inputs.length;++i)n.add(this.inputs[i],e[i]);return oi(this.outputs,n,t)}))}computeMask(e,mask){return Object(o.tidy)((()=>{let t;return e=ba(e),t=null==mask?ha(null,e.length):ba(mask),this.runInternalGraph(e,t)[1]}))}computeOutputShape(e){const t=Bs(e);if(t.length!==this.inputLayers.length)throw new oa(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++){const e=this.inputLayers[i],r=t[i];n[e.name+"_0_0"]=r}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(wa);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const o=e.inboundLayers[t],c=e.nodeIndices[t],l=e.tensorIndices[t],d=n[`${o.name}_${c}_${l}`];r.push(d)}const o=Bs(t.computeOutputShape(ma(r))),c=t.inboundNodes.indexOf(e);for(let e=0;e<o.length;e++){n[`${t.name}_${c}_${e}`]=o[e]}}}const o=[],c=[];for(let i=0;i<this.outputLayers.length;i++){const e=this.outputLayers[i],t=this.outputLayersNodeIndices[i],n=this.outputLayersTensorIndices[i],r=`${e.name}_${t}_${n}`;c.push(r)}for(let i=0;i<c.length;i++){const e=c[i];pa(e in n),o.push(n[e])}return ma(o)}runInternalGraph(e,t){null==t&&(t=ha(null,e.length));const n={};for(let i=0;i<this.inputs.length;++i){const r=this.inputs[i],o=e[i],mask=t[i];n[r.id]=[o,mask]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(wa);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,o=e.outputTensors,c=new Array;for(const e of r)e.id in n&&c.push(n[e.id]);if(c.length===r.length){let r,l,d,h,f={};if(null!=e.callArgs&&(f=e.callArgs),1===c.length){const[e,n]=c[0];null==f.mask&&(f.mask=n),d=ba(t.call(e,f)),h=ba(t.computeMask(e,n)),r=[e],l=[n]}else r=c.map((e=>e[0])),l=c.map((e=>e[1])),null==f.mask&&(f.mask=l),d=ba(t.call(r,f)),h=ba(t.computeMask(r,l));if(t.activityRegularizer)throw new ua("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let i=0;i<o.length;++i){const e=o[i],t=d[i],mask=h[i];n[e.id]=[t,mask]}}}}const o=[],c=[],l=[];for(const e of this.outputs){pa(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,mask]=n[e.id];l.push(t.shape),o.push(t),c.push(mask)}return[o,c,l]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof fo?1:0;for(let r=0;r<e.inboundNodes.length;r++){const o=fo.nodeKey(e,r);this.containerNodes.has(o)&&(t[o]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new oa(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new oa("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new oa(`No such layer: ${e}`)}calculateLosses(){return Object(o.tidy)((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=fo.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),o=e.getConfig(),c=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],o=fo.nodeKey(e,n);let l={};if(this.containerNodes.has(o)){if(r.callArgs)try{JSON.stringify(r.callArgs),l=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),l={}}if(r.inboundLayers.length>0){const e=[];for(let i=0;i<r.inboundLayers.length;i++){const n=r.inboundLayers[i],o=r.nodeIndices[i],c=r.tensorIndices[i];let d=t[fo.nodeKey(n,o)];null==d&&(d=0),e.push([n.name,d,c,l])}c.push(e)}}}const l={};l.name=e.name,l.className=r,l.config=o,l.inboundNodes=c,n.push(l)}e.layers=n;const r=[];for(let i=0;i<this.inputLayers.length;i++){const e=this.inputLayers[i],n=this.inputLayersNodeIndices[i],o=fo.nodeKey(e,n);if(!this.containerNodes.has(o))continue;let c=t[o];null==c&&(c=0);const l=this.inputLayersTensorIndices[i];r.push([e.name,c,l])}e.inputLayers=r;const o=[];for(let i=0;i<this.outputLayers.length;i++){const e=this.outputLayers[i],n=this.outputLayersNodeIndices[i],r=fo.nodeKey(e,n);if(!this.containerNodes.has(r))continue;let c=t[r];null==c&&(c=0);const l=this.outputLayersTensorIndices[i];o.push([e.name,c,l])}return e.outputLayers=o,e}static fromConfig(e,t,n={},r=!1){const o={},c={};function l(e,t){e.name in c?c[e.name].push(t):c[e.name]=[t]}function d(e,t){const n=[];let r;for(const c of t){const d=c[0],h=c[1],f=c[2];if(r=null==c[3]?{}:c[3],!(d in o))return void l(e,t);const m=o[d];if(m.inboundNodes.length<=h)return void l(e,t);const y=m.inboundNodes[h];n.push(y.outputTensors[f])}n.length>0&&e.apply(ma(n),r)}function h(e){const n=e.name,c=Ri(e,null!=t.customObjects?t.customObjects:{});c.setFastWeightInitDuringBuild(r),o[n]=c;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new oa(`Corrupted configuration, expected array for nodeData: ${e}`);l(c,e)}))}const f=t.name,m=t.layers;for(const e of m)h(e);for(;!Ia(c);)for(const e of m){const t=o[e.name];if(t.name in c){const e=c[t.name];delete c[t.name];for(const n of e)d(t,n)}}const y=[],x=[],O=t.inputLayers;for(const e of O){const t=e[0],n=e[1],r=e[2];pa(t in o);const c=o[t].inboundNodes[n].outputTensors;y.push(c[r])}const v=t.outputLayers;for(const e of v){const t=e[0],n=e[1],r=e[2];pa(t in o);const c=o[t].inboundNodes[n].outputTensors;x.push(c[r])}return new e({inputs:y,outputs:x,name:f})}get stateful(){if(this._stateful)throw new oa("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Object(o.tidy)((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function mo(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const output=[];return t.forEach((t=>{t in e?output.push(e[t]):output.push(null)})),output}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function bo(e,t){return mo(e,t,"classWeight")}async function go(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Object(o.tidy)((()=>{if(1===e.shape.length)return Object(o.clone)(e);if(2===e.shape.length){if(e.shape[1]>1){const t=1;return Object(o.argMax)(e,t)}if(1===e.shape[1])return Object(o.reshape)(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Object(o.dispose)(t);const c=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);c.push(n[e])})),Object(o.tensor1d)(c,"float32")}return null}function yo(e,t){return Object(o.mul)(e,t)}function xo(e,t){let n,r;const c=t;n=c.xs,r=c.ys,o.util.assert(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const l=Oo("input",e.inputNames,n),d=Oo("output",e.outputNames,r),h=l[0].shape[0];o.util.assert(l.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${l.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),o.util.assert(d.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${d.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<l.length;t++)o.util.assert(l[t].shape[0]===h,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${l[t].shape[0]}; expected  ${h} based on input ${e.inputNames[0]}.`));for(let t=0;t<d.length;t++)o.util.assert(d[t].shape[0]===h,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${d[t].shape[0]}; expected  ${h} based on input ${e.inputNames[0]}.`));return{xs:l,ys:d}}function Oo(e,t,n){if(n instanceof o.Tensor)return[n];if(Array.isArray(n))return o.util.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const o of t){if(null==n[o])throw new oa(`The feature data generated by the dataset lacks the required ${e} key '${o}'.`);r.push(n[o])}return r}}async function vo(e,t,n){const r=null!=n.batchesPerEpoch;if(o.util.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),o.util.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),o.util.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),o.util.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),o.util.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const c=null!=n.validationData;let l,d;if(c)if(ko(n.validationData))o.util.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(data){if(3===data.length)throw new ua("Validation with sample weights is not implemented yet.");return{xs:data[0],ys:data[1]}}(n.validationData);l=e.xs,d=e.ys}const h=e.makeTrainFunction(),f=e.getDedupedMetricsNames();let m;m=c?f.slice().concat(f.map((e=>"val_"+e))):f.slice();const y=$i(n.callbacks,n.yieldEvery),x=null==n.verbose?1:n.verbose,{callbackList:O,history:v}=Ai(y,x,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,c,m);O.setModel(e),e.history=v,await O.onTrainBegin(),e.stopTraining_=!1;let k=null==n.initialEpoch?0:n.initialEpoch,w=await t.iterator();for(;k<n.epochs;){const m={};await O.onEpochBegin(k);let y=0,x=0;for(r||(w=await t.iterator());!r||y<n.batchesPerEpoch;){const t=await w.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:c}=xo(e,t.value),l={};l.batch=x,l.size=r[0].shape[0],await O.onBatchBegin(x,l);const d=[];if(null!=n.classWeight){const t=bo(n.classWeight,e.outputNames);for(let i=0;i<t.length;++i)d.push(await go(c[i],null,t[i]))}const ins=r.concat(c).concat(d),m=h(ins);o.dispose(ins);for(let i=0;i<f.length;++i){const label=f[i],e=m[i];l[label]=e,o.keep(e)}await O.onBatchEnd(x,l),wi(l),x++,y++}if(r?y>=n.batchesPerEpoch:t.done){if(c){let t;t=ko(n.validationData)?ba(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):ba(e.evaluate(l,d,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let i=0;i<e.metricsNames.length;++i)m[`val_${e.metricsNames[i]}`]=t[i]}break}if(e.stopTraining_)break}if(await O.onEpochEnd(k,m),k++,e.stopTraining_)break}return await O.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function ko(e){return"function"==typeof e.iterator}function wo(e){o.util.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function So(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>as(e,t,n-t))):as(e,t,n-t)}function Io(e,t){return o.tidy((()=>null==e?null:Array.isArray(e)?e.map((e=>Io(e,t))):hs(e,"int32"===t.dtype?t:o.cast(t,"int32"))))}function No(e,t){const output=[];let n=0,r=null;for(;n<e;)r=n+t,r>=e&&(r=e),output.push([n,r]),n=r;return output}async function jo(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let c,l,d,h,f,m,y,x,O;e.isTraining=!0;try{const v=null==r.batchSize?32:r.batchSize;wo(v);const k=!1,w=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,k,v);c=w[0],l=w[1],O=w[2];let S,I=!1;if(null!=r.validationData&&r.validationData.length>0){if(I=!0,2!==r.validationData.length)throw 3===r.validationData.length?new ua("validationData including sample weights is not supported yet."):new oa(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);f=r.validationData[0],m=r.validationData[1];const t=!0,n=await e.standardizeUserData(f,m,null,null,t,v);y=n[0],x=n[1],S=y.concat(x)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){I=!0;const e=Math.floor(c[0].shape[0]*(1-r.validationSplit)),t=c[0].shape[0];y=So(c,e,t),d=c,c=So(c,0,e),x=So(l,e,t),h=l,l=So(l,0,e),S=y.concat(x)}else null!=r.validationSteps&&(I=!0);const ins=c.concat(l).concat(O);e.checkTrainableWeightsConsistency();const N=e.makeTrainFunction(),j=e.getDedupedMetricsNames();let T,C;I?(e.makeTestFunction(),T=e.testFunction,C=j.slice().concat(j.map((e=>"val_"+e)))):(T=null,S=[],C=j.slice());const $=$i(r.callbacks,r.yieldEvery),E=await async function(e,t,ins,n,r,c,l,d,h,f,m,y,x,O,v){null==r&&(r=32),null==c&&(c=1),null==m&&(m=!0),null==x&&(x=0);let k=!1;if(null!=h&&null!=f&&(k=!0),null!=v&&(k=!0,null==O))throw new oa("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const w=e.checkNumSamples(ins,r,O,"steps_per_epoch");let S;null!=w&&(S=Qa(0,w)),null==l&&(l=1);const{callbackList:I,history:N}=Ai(d,l,c,x,w,O,r,k,y);I.setModel(e),e.history=N,await I.onTrainBegin(),e.stopTraining_=!1;for(let l=x;l<c;++l){await I.onEpochBegin(l);const c={};if(null!=O)throw new ua("stepsPerEpoch mode is not implemented yet.");{if("batch"===m)throw new ua("batch shuffling is not implemneted yet");m&&o.util.shuffle(S);const l=Object(o.tensor1d)(S),d=No(w,r);for(let m=0;m<d.length;++m){const y={};if(await I.onBatchBegin(m,y),o.tidy((()=>{const x=d[m][0],O=d[m][1],v=as(l,x,O-x);y.batch=m,y.size=O-x;const w=Io(ins,v),S=t(w);for(let i=0;i<n.length;++i){const label=n[i],e=S[i];y[label]=e,o.keep(e)}if(m===d.length-1&&k){const t=e.testLoop(h,f,r);for(let i=0;i<n.length;++i){const label=n[i],e=t[i];o.keep(e),c["val_"+label]=e}}})),await I.onBatchEnd(m,y),wi(y),e.stopTraining_)break}l.dispose()}if(await I.onEpochEnd(l,c),e.stopTraining_)break}return await I.onTrainEnd(),await e.history.syncData(),e.history}(e,N,ins,j,v,r.epochs,r.verbose,$,T,S,r.shuffle,C,r.initialEpoch,null,null);return E}finally{e.isTraining=!1,Co(c,t),Co(l,n),Co(d,t),Co(h,n),Co(y,f),Co(x,m),null!=O&&o.dispose(O)}}function To(e){const t=[];e instanceof o.Tensor&&(e=[e]);for(let i=0;i<e.length;++i){const n=e[i];if(1===n.rank)t.push(rs(n,1));else{if(0===n.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(n)}}return t}function Co(e,t){if(null==e)return;const n=[];if(t instanceof o.Tensor)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof o.Tensor)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const o=e[t];-1===n.indexOf(o.id)&&r.push(o)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function $o(e){return Array.isArray(e)}function Eo(e){return!function(e){return e instanceof o.Tensor}(e)&&!$o(e)}function Ao(data,e,t,n=!0,r=""){if(null==e||0===e.length){if(null!=data){let e=!1;if($o(data)&&data.length>0)e=!0;else if(Eo(data)){for(const t in data)if(data.hasOwnProperty(t)){e=!0;break}}else e=!0;if(e)throw new oa(`Error when checking model ${r} expected no data, but got ${data}`)}return[]}if(null==data)return e.map((e=>null));let o;if(Eo(data)){o=[];for(const t of e){if(null==data[t])throw new oa(`No data provided for "${t}". Need data for each key in: ${e}`);o.push(data[t])}}else if($o(data)){if(data.length!==e.length)throw new oa(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${data}`);o=data}else{if(e.length>1)throw new oa(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${data.shape}`);o=[data]}if(o=To(o),null!=t)for(let i=0;i<e.length;++i){if(null==t[i])continue;const c=o[i];if(c.shape.length!==t[i].length)throw new oa(`Error when checking ${r}: expected ${e[i]} to have ${t[i].length} dimension(s). but got array with shape ${c.shape}`);for(let e=0;e<t[i].length;++e){if(0===e&&!n)continue;const o=c.shape[e],l=t[i][e];if(null!=l&&l>=0&&o!==l)throw new oa(`${r} expected a batch of elements where each example has shape [${t[i].slice(1,t[i].length)}] (i.e.,tensor shape [*,${t[i].slice(1,t[i].length)}]) but the ${r} received an input with ${c.shape[0]} examples, each with shape [${c.shape.slice(1,c.shape.length)}] (tensor shape [${c.shape}])`)}}return o}function Ro(data,e,t,n=!0,r=""){let o;if(Array.isArray(data)){if(data.length!==e.length)throw new oa(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${data.length} Tensors(s).`);o=data}else{if(e.length>1)throw new oa(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(data.shape)}.`);o=[data]}if(null!=t)for(let i=0;i<e.length;++i){if(null==t[i])continue;const c=o[i];if(c.shape.length!==t[i].length)throw new oa(`Error when checking ${r}: expected ${e[i]} to have ${t[i].length} dimension(s), but got array with shape ${JSON.stringify(c.shape)}`);for(let o=0;o<t[i].length;++o){if(0===o&&!n)continue;const l=c.shape[o],d=t[i][o];if(null!=d&&d!==l)throw new oa(`Error when checking ${r}: expected ${e[i]} to have shape ${JSON.stringify(t[i])} but got array with shape ${JSON.stringify(c.shape)}.`)}}}class _o extends fo{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new oa("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");io(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>o.train.adagrad(.01),Adadelta:()=>o.train.adadelta(1,.95,ts()),Adam:()=>o.train.adam(.001,.9,.999,ts()),Adamax:()=>o.train.adamax(.002,.9,.999,ts(),0),RMSProp:()=>o.train.rmsprop(.001,.9,0,ts()),SGD:()=>o.train.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new oa(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof o.Optimizer))throw new oa("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new oa(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Gi(e)))}else{const n=Gi(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new oa(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Gi(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const e=this.internalOutputShapes[i],t=this.outputNames[i];this.feedOutputNames.push(t),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[i])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Ga("loss",(()=>{for(let i=0;i<this.outputs.length;++i){if(-1!==n.indexOf(i))continue;const e=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([e,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),c=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Ga("metric",(()=>{for(let i=0;i<this.outputs.length;++i){if(-1!==n.indexOf(i))continue;(e=>{let t,n,r;for(const o of e){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const e=this.internalOutputShapes[i];let c;1===e[e.length-1]||this.lossFunctions[i]===Bi?-1!==["accuracy","acc"].indexOf(o)?n=Hi:-1!==["crossentropy","ce"].indexOf(o)&&(n=Yi):this.lossFunctions[i]===Pi?-1!==["accuracy","acc"].indexOf(o)?n=Zi:-1!==["crossentropy","ce"].indexOf(o)&&(n=Qi):-1!==["accuracy","acc"].indexOf(o)?n=qi:-1!==["crossentropy","ce"].indexOf(o)&&(n=Ji),-1!==["accuracy","acc"].indexOf(o)?c="acc":-1!==["crossentropy","ce"].indexOf(o)&&(c="ce"),r=n,t=""+c}else{const e=to(o);r=e,t=""+no(o)}let e;Ga(t,(()=>{e=r})),c(i,t,e)}})(r[i])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;wo(r);const o=this.standardizeUserDataXY(e,t,!0,r);try{const ins=o[0].concat(o[1]);this.makeTestFunction();const c=this.testFunction;return ma(this.testLoop(c,ins,r,n.verbose,n.steps))}finally{Co(o[0],e),Co(o[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,c=e.testFunction;let l=[];if(n.verbose>0)throw new ua("Verbose mode is not implemented yet.");o.util.assert(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const d="function"==typeof t.next?t:await t.iterator();let h=0,f=0;for(;!r||f<n.batches;){const t=await d.next();if(l=o.tidy((()=>{if(t.value){const{xs:n,ys:r}=xo(e,t.value),d=n.concat(r),m=o.tidy((()=>c(d)));if(o.dispose(d),0===f)for(let i=0;i<m.length;++i)l.push(Object(o.scalar)(0));const y=d[0].shape[0];for(let i=0;i<m.length;++i){const e=m[i],t=l[i];l[i]=o.tidy((()=>o.add(l[i],o.mul(y,e)))),f>0&&o.dispose(t)}o.dispose(m),h+=y,++f}return l})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let i=0;i<l.length;++i){const e=l[i];l[i]=o.div(l[i],h),o.dispose(e)}return ma(l)}(this,e,t)}checkNumSamples(ins,e,t,n="steps"){let r;if(null!=t){if(r=null,null!=e)throw new oa(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else{if(null==ins)throw new oa(`Either the input data should have a defined shape, or ${n} shoud be specified.`);r=Array.isArray(ins)?ins[0].shape[0]:ins.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new oa("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],c=this.retrieveSymbolicTensors(r),l=new ai;if(e instanceof o.Tensor&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new oa(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let i=0;i<this.inputs.length;++i)l.add(this.inputs[i],e[i])}else for(const input of this.inputs){const t=e[input.name];if(null==t)throw new oa(`No value is provided for the model's input ${input.name}`);l.add(input,t)}const d=oi(c,l);return n?d:d[0]}retrieveSymbolicTensors(e){const t=ha(null,e.length);let n=e.length;for(const r of this.layers){const o=Array.isArray(r.output)?r.output:[r.output],c=o.map((output=>output.name));for(let i=0;i<e.length;++i){const r=c.indexOf(e[i]);if(-1!==r&&(t[i]=o[r],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,i)=>{null==t&&n.push(e[i])})),new oa(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(ins,e=32,t=!1){return o.tidy((()=>{const n=this.checkNumSamples(ins);if(t)throw new ua("Verbose predictLoop() is not implemented yet.");const r=No(n,e),c=this.outputs.map((output=>[]));for(let e=0;e<r.length;++e){o.tidy((()=>{const t=r[e][0],n=r[e][1],o=So(ins,t,n),c=[];if(Array.isArray(o))for(let i=0;i<o.length;++i)c.push({key:this.inputs[i],value:o[i]});else c.push({key:this.inputs[0],value:o});const l=new ai(c);return oi(this.outputs,l)})).forEach(((e,i)=>c[i].push(e)))}return ma(c.map((e=>o.concat(e,0))))}))}predict(e,t={}){const n=To(e);Ro(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return wo(r),this.predictLoop(n,r)}finally{Co(n,e)}}predictOnBatch(e){Ro(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new ia("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const c=[];for(let i=0;i<this.feedOutputShapes.length;++i){const e=this.feedOutputShapes[i];this.feedLossFns[i]===Pi?c.push(e.slice(0,e.length-1).concat([1])):c.push(e)}if(function(e,t,n){const r=Sa(e.map((input=>input.shape[0])));r.sort();const c=Sa(t.map((e=>e.shape[0])));if(c.sort(),r.length>1)throw new oa(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((input=>input.shape)))}`);if(c.length>1)throw new oa(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&c.length>0&&!o.util.arraysEqual(r,c))throw new oa(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${c[0]} target sample(s).`)}(e=Ao(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Ao(t,this.feedOutputNames,c,!1,"target")),function(e,t,n){const r=[Fi,Bi,Li];for(let i=0;i<e.length;++i){const o=e[i],c=t[i],l=n[i];if(null!=c){if(c===Li&&1===o.shape[o.shape.length-1])throw new oa(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(c)){const e=o.shape.slice(1),t=l.slice(1);for(let n=0;n<e.length;++n){const r=e[n],c=t[n];if(null!=c&&r!==c)throw new oa(`A target Tensor with shape ${o.shape} was passed for an output of shape ${l}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new oa(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,o=!0,c){const[l,d]=this.standardizeUserDataXY(e,t,o,c);if(null!=n)throw new Error("sample weight is not supported yet.");let h=null;if(null!=r){const e=bo(r,this.outputNames);h=[];for(let i=0;i<e.length;++i)h.push(await go(d[i],null,e[i]))}return[l,d,h]}testLoop(e,ins,t,n=0,r){return o.tidy((()=>{const c=this.checkNumSamples(ins,t,r,"steps"),l=[];if(n>0)throw new ua("Verbose mode is not implemented yet.");if(null!=r)throw new ua("steps mode in testLoop() is not implemented yet");{const n=No(c,t),r=Object(o.tensor1d)(Qa(0,c));for(let t=0;t<n.length;++t){const c=n[t][0],d=n[t][1],h=as(r,c,d-c),f=Io(ins,h),m=e(f);if(0===t)for(let i=0;i<m.length;++i)l.push(Object(o.scalar)(0));for(let i=0;i<m.length;++i){const e=m[i];l[i]=o.add(l[i],o.mul(d-c,e))}}for(let i=0;i<l.length;++i)l[i]=o.div(l[i],c)}return l}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let i=0;i<e.length;++i){const label=e[i];let n=label;if(fa(e,label)>1){n+=`_${fa(e.slice(0,i),label)}`}t.push(n)}return t}makeTrainFunction(){return data=>{const e=[],t=data.slice(0,this.inputs.length),n=data.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=data.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),c=[],l=this.collectedTrainableWeights.map((param=>param.read()));return[this.optimizer_.minimize((()=>{const l=[];for(let i=0;i<this.inputs.length;++i)l.push({key:this.inputs[i],value:t[i]});const d=new ai(l),h=oi(this.outputs,d,{training:!0});let f;for(let i=0;i<this.lossFunctions.length;++i){let t=(0,this.lossFunctions[i])(n[i],h[i]);null!=r[i]&&(t=yo(t,r[i]));const c=o.mean(t);e.push(c),f=0===i?t:o.add(f,t)}for(let i=0;i<this.metricsTensors.length;++i){let t;if(this.outputs.length>1&&i<this.outputs.length)t=e[i];else{const e=this.metricsTensors[i][0],r=this.metricsTensors[i][1];t=o.mean(e(n[r],h[r]))}o.keep(t),c.push(t)}return f=o.mean(f),this.calculateLosses().forEach((e=>{f=o.add(f,e)})),f}),!0,l)].concat(c)}}makeTestFunction(){this.testFunction=data=>o.tidy((()=>{const e=[];let t;const n=data.slice(0,this.inputs.length),r=data.slice(this.inputs.length,this.inputs.length+this.outputs.length),c=[];for(let i=0;i<this.inputs.length;++i)c.push({key:this.inputs[i],value:n[i]});const l=new ai(c),d=oi(this.outputs,l);for(let i=0;i<this.lossFunctions.length;++i){const n=this.lossFunctions[i],c=o.mean(n(r[i],d[i]));t=0===i?c:o.add(t,c),e.push(t)}for(let i=0;i<this.metricsTensors.length;++i){const t=this.metricsTensors[i][0],n=this.metricsTensors[i][1],c=o.mean(t(r[n],d[n]));e.push(c)}return e}))}async fit(e,t,n={}){return jo(this,e,t,n)}async fitDataset(e,t){return vo(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],c=n[1],l=this.makeTrainFunction()(r.concat(c)),d=[];for(const e of l){const t=await e.data();d.push(t[0])}return o.dispose(l),Co(n[0],e),Co(n[1],t),ma(d)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,o=this.getWeights(n);for(let i=0;i<r.length;++i)n&&!r[i].trainable||t.push({name:r[i].originalName,tensor:o[i]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=o.memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-o.memory().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=ga(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>ga(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=ga(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[ga(no(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>ga(no(e))));{const e={};for(const t in this.metrics)e[t]=ga(no(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Ri(ho(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=ya(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>ya(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=ya(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>ya(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=ya(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=o.io.getSaveHandlers(e);if(0===t.length)throw new oa(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new oa(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new oa("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await o.io.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.20.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:c}=await o.io.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...c),n.data=o.io.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;ao(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){ao(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}_o.className="Model",o.serialization.registerClass(_o);class Fo extends _o{}async function Do(e,t){if(null==t&&(t={}),"string"==typeof e){const n=o.io.getLoadHandlers(e,t);if(0===n.length)n.push(o.io.browserHTTPRequest(e,t));else if(n.length>1)throw new oa(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new oa("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await e.load();let c=r.modelTopology;null!=c.model_config&&(c=c.model_config);const l=null==n.strict||n.strict,d=null!=r.weightData&&null!=r.weightSpecs&&l,h=Ri(ho(c),t,d),f=r.trainingConfig;null!=f&&h.loadTrainingConfig(f);null!=r.userDefinedMetadata&&h.setUserDefinedMetadata(r.userDefinedMetadata);if(null!=r.weightData){if(null==r.weightSpecs)throw new oa("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=o.io.decodeWeights(e,t),r={},c=[];return t.forEach((e=>{"optimizer"===e.group?c.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name]})),{modelWeights:r,optimizerWeights:c}}(r.weightData,r.weightSpecs);h.loadWeights(e,l),null!=h.optimizer&&t.length>0&&await h.optimizer.setWeights(t),Object(o.dispose)(e),Object(o.dispose)(t.map((e=>e.tensor)))}return h}(e,void 0,t)}Fo.className="Functional",o.serialization.registerClass(Fo);class Mo extends _o{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:_a("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new oa(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Mo||e instanceof _o;let n;if(t){if(n=e,1!==n.outputs.length)throw new oa("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new oa("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new oa("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=ri({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new oa(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new oa("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=ti(this.outputs[0])}this.inboundNodes=[],new Js({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ha(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Vs(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new _o({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new ia("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new ia("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new ia("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new ia("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let c,l={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new oa("Legacy serialization format not supported yet.");c=t}else o.util.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),c=t.layers,delete t.layers,l=t;const d=new e(l);if(!(d instanceof Mo))throw new ua(`Sequential.fromConfig called on non-Sequential input: ${d}`);for(const e of c){const t=Ri(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),d.add(t)}return d}set stopTraining(e){if(null==this.model)throw new oa("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new oa("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function zo(e,t){return null==t&&(t={}),Do(e,t)}Mo.className="Sequential",o.serialization.registerClass(Mo);class Lo extends o.serialization.Serializable{getConfig(){return{}}}class Po extends Lo{apply(e,t=1){return function(e,t=1){if(1!==t)throw new ua(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return o.elu(e)}(e,t)}}Po.className="elu",o.serialization.registerClass(Po);class Bo extends Lo{apply(e){return o.selu(e)}}Bo.className="selu",o.serialization.registerClass(Bo);class Wo extends Lo{apply(e){return o.relu(e)}}Wo.className="relu",o.serialization.registerClass(Wo);class Vo extends Lo{apply(e){return Object(o.tidy)((()=>o.minimum(6,o.relu(e))))}}Vo.className="relu6",o.serialization.registerClass(Vo);class Uo extends Lo{apply(e){return e}}Uo.className="linear",o.serialization.registerClass(Uo);class Go extends Lo{apply(e){return o.sigmoid(e)}}Go.className="sigmoid",o.serialization.registerClass(Go);class Ho extends Lo{apply(e){return function(e){return Object(o.tidy)((()=>{const t=o.add(.5,o.mul(.2,e));return o.clipByValue(t,0,1)}))}(e)}}Ho.className="hardSigmoid",o.serialization.registerClass(Ho);class qo extends Lo{apply(e){return o.softplus(e)}}qo.className="softplus",o.serialization.registerClass(qo);class Ko extends Lo{apply(e){return function(e){return Object(o.tidy)((()=>o.div(e,o.add(o.abs(e),1))))}(e)}}Ko.className="softsign",o.serialization.registerClass(Ko);class Xo extends Lo{apply(e){return o.tanh(e)}}Xo.className="tanh",o.serialization.registerClass(Xo);class Yo extends Lo{apply(e,t=-1){return o.softmax(e,t)}}Yo.className="softmax",o.serialization.registerClass(Yo);class Zo extends Lo{apply(e,t=-1){return o.logSoftmax(e,t)}}Zo.className="logSoftmax",o.serialization.registerClass(Zo);class Jo extends Lo{apply(e,t=1){return Object(o.tidy)((()=>o.mul(o.sigmoid(o.mul(e,t)),e)))}}Jo.className="swish",o.serialization.registerClass(Jo);class Qo extends Lo{apply(e){return Object(o.tidy)((()=>o.mul(e,o.tanh(o.softplus(e)))))}}function eu(e){return e.getClassName()}function tu(e,t={}){return ka(e,o.serialization.SerializationMap.getMap().classNameMap,t,"activation")}function nu(e){if(null==e){const e={className:"linear",config:{}};return tu(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},tu(t)}return e instanceof Lo?e:tu(e)}function ru(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Qo.className="mish",o.serialization.registerClass(Qo);class au extends o.serialization.Serializable{}class su extends au{constructor(e){super(),ru(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Object(o.tidy)((()=>{let t=Object(o.zeros)([1]);return this.hasL1&&(t=Object(o.add)(t,Object(o.sum)(o.mul(this.l1,Object(o.abs)(e))))),this.hasL2&&(t=Object(o.add)(t,Object(o.sum)(o.mul(this.l2,ps(e))))),o.reshape(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}su.className="L1L2",o.serialization.registerClass(su);const iu={l1l2:"L1L2"};function ou(e){return Oa(e)}function uu(e,t={}){return ka(e,o.serialization.SerializationMap.getMap().classNameMap,t,"regularizer")}function cu(e){if(null==e)return null;if("string"==typeof e){return uu({className:e in iu?iu[e]:e,config:{}})}return e instanceof au?e:uu(e)}class lu extends ei{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Ws(e);let output=Object(o.relu)(e);return null!=this.maxValue&&(output=Object(o.clipByValue)(output,0,this.maxValue)),output}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}lu.className="ReLU",o.serialization.registerClass(lu);class du extends ei{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Ws(e);return Object(o.leakyRelu)(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}du.className="LeakyReLU",o.serialization.registerClass(du);class hu extends ei{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Ls(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=cu(e.alphaRegularizer),this.alphaConstraint=vi(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new oa(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Vs(e)).slice(1);if(null!=this.sharedAxes)for(const i of this.sharedAxes)t[i-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let i=1;i<e.length;++i)n[i]=e[i];this.inputSpec=[new Xs({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Ws(e),Object(o.prelu)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:zs(this.alphaInitializer),alphaRegularizer:ou(this.alphaRegularizer),alphaConstraint:xi(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}hu.className="PReLU",o.serialization.registerClass(hu);class pu extends ei{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new ua(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Ws(e);return Object(o.elu)(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}pu.className="ELU",o.serialization.registerClass(pu);class fu extends ei{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Ws(e);return Object(o.mul)(n,Object(o.cast)(Object(o.greater)(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}fu.className="ThresholdedReLU",o.serialization.registerClass(fu);class mu extends ei{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Yo).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Ws(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function bu(e,t,n){if("number"==typeof e)return ha(e,t);if(e.length!==t)throw new oa(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let i=0;i<t;++i){const o=e[i];if((r=o)!==parseInt(r.toString(),10))throw new oa(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${o}`)}return e;var r}function gu(e,t,n,r,o=1){if(null==e)return e;let c;return c="same"===n?e:e-(t+(t-1)*(o-1))+1,Math.floor((c+r-1)/r)}function yu(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+Ja([n-t,0]);else{if("same"!==r)throw new oa(`Unsupport padding mode: ${r}.`);e*=t}return e}function xu(e,t){return Object(o.tidy)((()=>(Ba(t),"channelsFirst"===t?o.transpose(e,[0,2,3,1]):e)))}function Ou(e,t){return Object(o.tidy)((()=>(Ba(t),"channelsFirst"===t?o.transpose(e,[0,2,3,4,1]):e)))}function vu(e,t,n,r=1,c="valid",l,d=1){return Object(o.tidy)((()=>{if(null==l&&(l="channelsLast"),Ba(l),3!==e.shape.length)throw new oa(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new oa(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new oa(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===l&&(e=o.transpose(e,[0,2,1])),"causal"===c)throw new ua("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let h=o.conv1d(e,t,r,"same"===c?"same":"valid","NWC",d);return null!=n&&(h=ms(h,n)),h}))}function ku(e,t,n,r=[1,1],c="valid",l,d,h=null){return Object(o.tidy)((()=>{if(null==l&&(l="channelsLast"),Ba(l),3!==e.rank&&4!==e.rank)throw new oa(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new oa(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let f=xu(e,l);if("causal"===c)throw new ua("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return f=o.fused.conv2d({x:f,filter:t,strides:r,pad:"same"===c?"same":"valid",dilations:d,dataFormat:"NHWC",bias:n,activation:h}),"channelsFirst"===l&&(f=o.transpose(f,[0,3,1,2])),f}))}function wu(e,t,n,r=[1,1,1],c="valid",l,d){return Object(o.tidy)((()=>{if(null==l&&(l="channelsLast"),Ba(l),4!==e.rank&&5!==e.rank)throw new oa(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new oa(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let h=Ou(e,l);if("causal"===c)throw new ua("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return h=o.conv3d(h,t,r,"same"===c?"same":"valid","NDHWC",d),null!=n&&(h=ms(h,n)),"channelsFirst"===l&&(h=o.transpose(h,[0,4,1,2,3])),h}))}mu.className="Softmax",o.serialization.registerClass(mu);class Su extends ei{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Su.verifyArgs(t),this.rank=e,Ta(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new ua(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=bu(t.kernelSize,e,"kernelSize"),this.strides=bu(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Wa(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Ba(this.dataFormat),this.activation=nu(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Ls(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=vi(t.biasConstraint),this.biasRegularizer=cu(t.biasRegularizer),this.activityRegularizer=cu(t.activityRegularizer),this.dilationRate=bu(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new oa(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new oa(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new oa(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(pa("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!ja(e.kernelSize,"number",1,3))throw new oa(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:eu(this.activation),useBias:this.useBias,biasInitializer:zs(this.biasInitializer),biasRegularizer:ou(this.biasRegularizer),activityRegularizer:ou(this.activityRegularizer),biasConstraint:xi(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Iu extends Su{constructor(e,t){super(e,t),this.kernel=null,Iu.verifyArgs(t),this.filters=t.filters,Ta(this.filters,"filters"),this.kernelInitializer=Ls(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=vi(t.kernelConstraint),this.kernelRegularizer=cu(t.kernelRegularizer)}build(e){e=Vs(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new oa(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Object(o.tidy)((()=>{let t;e=Ws(e);const n=null==this.bias?null:this.bias.read(),r=$a(this.activation.getClassName());if(null!=r&&2===this.rank)t=ku(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=vu(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=ku(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new ua("convolutions greater than 3D are not implemented yet.");t=wu(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Vs(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let i=0;i<n.length;++i){const e=gu(n[i],this.kernelSize[i],this.padding,this.strides[i],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[i]);t.push(e)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:zs(this.kernelInitializer),kernelRegularizer:ou(this.kernelRegularizer),kernelConstraint:xi(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new oa(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Nu extends Iu{constructor(e){super(2,e),Nu.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!ja(e.kernelSize,"number",1,2))throw new oa(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Nu.className="Conv2D",o.serialization.registerClass(Nu);class ju extends Iu{constructor(e){super(3,e),ju.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new oa(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}ju.className="Conv3D",o.serialization.registerClass(ju);class Tu extends Nu{constructor(e){if(super(e),this.inputSpec=[new Xs({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new oa(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Vs(e)).length)throw new oa("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new oa("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xs({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return o.tidy((()=>{let input=Ws(e);if(4!==input.shape.length)throw new oa(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${input.shape.length}`);const t=input.shape,n=t[0];let r,c;"channelsFirst"===this.dataFormat?(r=2,c=3):(r=1,c=2);const l=t[r],d=t[c],h=this.kernelSize[0],f=this.kernelSize[1],m=this.strides[0],y=this.strides[1],x=[n,yu(l,m,h,this.padding),yu(d,y,f,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(input=o.transpose(input,[0,2,3,1]));let O=o.conv2dTranspose(input,this.kernel.read(),x,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(O=o.transpose(O,[0,3,1,2])),null!=this.bias&&(O=ms(O,this.bias.read(),this.dataFormat)),null!=this.activation&&(O=this.activation.apply(O)),O}))}computeOutputShape(e){const t=(e=Vs(e)).slice();let n,r,o;"channelsFirst"===this.dataFormat?(n=1,r=2,o=3):(n=3,r=1,o=2);const c=this.kernelSize[0],l=this.kernelSize[1],d=this.strides[0],h=this.strides[1];return t[n]=this.filters,t[r]=yu(t[r],d,c,this.padding),t[o]=yu(t[o],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Tu.className="Conv2DTranspose",o.serialization.registerClass(Tu);class Cu extends ju{constructor(e){if(super(e),this.inputSpec=[new Xs({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new oa(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Vs(e)).length)throw new oa("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new oa("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xs({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return o.tidy((()=>{let input=Ws(e);if(5!==input.shape.length)throw new oa(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${input.shape.length}`);const t=input.shape,n=t[0];let r,c,l;"channelsFirst"===this.dataFormat?(l=2,r=3,c=4):(l=1,r=2,c=3);const d=t[l],h=t[r],f=t[c],m=this.kernelSize[0],y=this.kernelSize[1],x=this.kernelSize[2],O=this.strides[0],v=this.strides[1],k=this.strides[2],w=[n,yu(d,O,m,this.padding),yu(h,v,y,this.padding),yu(f,k,x,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(input=o.transpose(input,[0,2,3,4,1]));let S=o.conv3dTranspose(input,this.kernel.read(),w,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(S=o.transpose(S,[0,4,1,2,3])),null!==this.bias&&(S=ms(S,this.bias.read(),this.dataFormat)),null!==this.activation&&(S=this.activation.apply(S)),S}))}computeOutputShape(e){const t=(e=Vs(e)).slice();let n,r,o,c;"channelsFirst"===this.dataFormat?(n=1,r=2,o=3,c=4):(n=4,r=1,o=2,c=3);const l=this.kernelSize[0],d=this.kernelSize[1],h=this.kernelSize[2],f=this.strides[0],m=this.strides[1],y=this.strides[2];return t[n]=this.filters,t[r]=yu(t[r],f,l,this.padding),t[o]=yu(t[o],m,d,this.padding),t[c]=yu(t[c],y,h,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Cu.className="Conv3DTranspose",o.serialization.registerClass(Cu);class $u extends Iu{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new oa("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new oa("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new oa(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Ls(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=cu(t.depthwiseRegularizer),this.depthwiseConstraint=vi(t.depthwiseConstraint),this.pointwiseInitializer=Ls(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=cu(t.pointwiseRegularizer),this.pointwiseConstraint=vi(t.pointwiseConstraint)}build(e){if((e=Vs(e)).length<this.rank+2)throw new oa(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new oa(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),o=[];for(let i=0;i<this.rank;++i)o.push(1);o.push(n*this.depthMultiplier,this.filters);const c=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,c,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",o,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,c,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,c,this.biasConstraint):this.bias=null,this.inputSpec=[new Xs({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Object(o.tidy)((()=>{let output;if(e=Ws(e),1===this.rank)throw new ua("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=o.transpose(e,[0,2,3,1])),output=o.separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(output=ms(output,this.bias.read(),this.dataFormat)),null!=this.activation&&(output=this.activation.apply(output)),"channelsFirst"===this.dataFormat&&(output=o.transpose(output,[0,3,1,2])),output}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=zs(this.depthwiseInitializer),e.pointwiseInitializer=zs(this.pointwiseInitializer),e.depthwiseRegularizer=ou(this.depthwiseRegularizer),e.pointwiseRegularizer=ou(this.pointwiseRegularizer),e.depthwiseConstraint=xi(this.depthwiseConstraint),e.pointwiseConstraint=xi(this.pointwiseConstraint),e}}$u.className="SeparableConv";class Eu extends $u{constructor(e){super(2,e)}}Eu.className="SeparableConv2D",o.serialization.registerClass(Eu);class Au extends Iu{constructor(e){super(1,e),Au.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!ja(e.kernelSize,"number",1,1))throw new oa(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Au.className="Conv1D",o.serialization.registerClass(Au);class Ru extends ei{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Object(o.tidy)((()=>{if(e=Ws(e),"channelsLast"===this.dataFormat){const t=is(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return is(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=is(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return is(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ru.className="Cropping2D",o.serialization.registerClass(Ru);class _u extends ei{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ba(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Na(Da,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return o.tidy((()=>{let input=Ws(e);const t=input.shape;if("channelsFirst"===this.dataFormat){input=o.transpose(input,[0,2,3,1]);const e=this.size[0]*t[2],n=this.size[1]*t[3],r="nearest"===this.interpolation?o.image.resizeNearestNeighbor(input,[e,n]):o.image.resizeBilinear(input,[e,n]);return o.transpose(r,[0,3,1,2])}{const e=this.size[0]*t[1],n=this.size[1]*t[2];return"nearest"===this.interpolation?o.image.resizeNearestNeighbor(input,[e,n]):o.image.resizeBilinear(input,[e,n])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}_u.className="UpSampling2D",o.serialization.registerClass(_u);class Fu extends Su{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Ls(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=vi(e.depthwiseConstraint),this.depthwiseRegularizer=cu(e.depthwiseRegularizer)}build(e){if((e=Vs(e)).length<4)throw new oa(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new oa(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Object(o.tidy)((()=>{let t=function(e,t,n=[1,1],r="valid",c,l){return Object(o.tidy)((()=>{null==c&&(c="channelsLast"),Ba(c);let d=xu(e,c);if(4!==e.rank)throw new oa(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new oa(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return d=o.depthwiseConv2d(d,t,n,"same"===r?"same":"valid","NHWC",l),"channelsFirst"===c&&(d=o.transpose(d,[0,3,1,2])),d}))}(e=Ws(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=ms(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Vs(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,o=gu(t,this.kernelSize[0],this.padding,this.strides[0]),c=gu(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,o,c]:[e[0],o,c,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=zs(this.depthwiseInitializer),e.depthwiseRegularizer=ou(this.depthwiseRegularizer),e.depthwiseConstraint=xi(this.depthwiseRegularizer),e}}function Du(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new oa("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function o(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=o(t),constants:n=o(n)}}function Mu(e,t,n,r=!1,mask,c,l=!1,d=!1){return o.tidy((()=>{const h=t.shape.length;if(h<3)throw new oa(`Input should be at least 3D, but is ${h}D.`);const f=[1,0].concat(Qa(2,h));if(t=o.transpose(t,f),null!=c)throw new ua("The rnn() functoin of the deeplearn.js backend does not support constants yet.");l&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=mask&&((mask=o.cast(o.cast(mask,"bool"),"float32")).rank===h-1&&(mask=o.expandDims(mask,-1)),mask=o.transpose(mask,f)),r&&(t=o.reverse(t,0),null!=mask&&(mask=o.reverse(mask,0)));const m=[];let y,x=n;const O=t.shape[0],v=o.unstack(t);let k,w;null!=mask&&(k=o.unstack(mask));for(let t=0;t<O;++t){const n=v[t],r=o.tidy((()=>e(n,x)));if(null==mask)y=r[0],x=r[1];else{const e=o.tidy((()=>{const e=k[t],n=o.sub(o.onesLike(e),e);return{output:o.add(o.mul(r[0],e),o.mul(x[0],n)),newStates:x.map(((t,i)=>o.add(o.mul(r[1][i],e),o.mul(t,n))))}}));y=e.output,x=e.newStates}d&&m.push(y)}if(d){const e=1;w=o.stack(m,e)}return[y,w,x]}))}Fu.className="DepthwiseConv2D",o.serialization.registerClass(Fu);class zu extends ei{constructor(e){let t;if(super(e),null==e.cell)throw new oa("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Hu({cells:e.cell}):e.cell,null==t.stateSize)throw new oa("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Xs({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Qa(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Ps(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,mask){return o.tidy((()=>{Array.isArray(mask)&&(mask=mask[0]);const e=this.returnSequences?mask:null;if(this.returnState){const t=this.states.map((s=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,output=[];for(let i=0;i<e;++i)output.push(null);return output}return this.states_}set states(s){this.states_=s}build(e){if(null!=this.numConstants)throw new ua("Constants support is not implemented in RNN yet.");Ps(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Xs({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let c;if(this.cell.build(r),c=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!o.util.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),c))throw new oa(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=c.map((e=>new Xs({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Object(o.tidy)((()=>{if(!this.stateful)throw new sa("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new oa("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>o.zeros([n,e]))):this.states_=[o.zeros([n,this.cell.stateSize])];else if(null==e)o.dispose(this.states_),null!=this.keptStates&&(o.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>o.zeros([n,e]))):this.states_[0]=o.zeros([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new oa(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):o.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],c=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,l=[n,c];if(!o.util.arraysEqual(r.shape,l))throw new oa(`State ${t} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>o.keep(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const o=Du(e,n,r,this.numConstants);e=o.inputs,n=o.initialState,r=o.constants;let c=[],l=[];if(null!=n){t.initialState=n,c=c.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Xs({shape:e.shape}));l=l.concat(this.stateSpec)}null!=r&&(t.constants=r,c=c.concat(r),this.numConstants=r.length);if(c[0]instanceof Ys){const n=[e].concat(c),r=this.inputSpec.concat(l),o=this.inputSpec;this.inputSpec=r;const output=super.apply(n,t);return this.inputSpec=o,output}return super.apply(e,t)}call(e,t){return Object(o.tidy)((()=>{const mask=null==t?null:t.mask,n=null==t?null:t.training;let r=null==t?null:t.initialState;e=Ws(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const o=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==o)throw new oa(`RNN Layer has ${o} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const c={training:n},l=Mu(((e,t)=>{const n=this.cell.call([e].concat(t),c);return[n[0],n.slice(1)]}),e,r,this.goBackwards,mask,null,this.unroll,this.returnSequences),d=l[0],h=l[1],f=l[2];this.stateful&&this.resetStates(f,n);const output=this.returnSequences?h:d;return this.returnState?[output].concat(f):output}))}getInitialState(e){return Object(o.tidy)((()=>{let t=o.zeros(e.shape);return t=o.sum(t,[1,2]),t=rs(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?cs(t,[1,e]):t)):this.cell.stateSize>1?[cs(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===zu.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=Ri(t.cell,n);return new e(Object.assign(t,{cell:r}))}}zu.className="RNN",o.serialization.registerClass(zu);class Lu extends ei{}class Pu extends Lu{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Ta(this.units,"units"),this.activation=nu(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Ls(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ls(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ls(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=cu(e.kernelRegularizer),this.recurrentRegularizer=cu(e.recurrentRegularizer),this.biasRegularizer=cu(e.biasRegularizer),this.kernelConstraint=vi(e.kernelConstraint),this.recurrentConstraint=vi(e.recurrentConstraint),this.biasConstraint=vi(e.biasConstraint),this.dropout=Za([1,Ja([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Za([1,Ja([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Vs(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Object(o.tidy)((()=>{if(2!==e.length)throw new oa(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let c;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qu({ones:()=>o.onesLike(e),rate:this.dropout,training:r,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qu({ones:()=>o.onesLike(n),rate:this.recurrentDropout,training:r,dropoutFunc:this.dropoutFunc}));const l=this.dropoutMask,d=this.recurrentDropoutMask;c=ds(null!=l?o.mul(e,l):e,this.kernel.read()),null!=this.bias&&(c=ms(c,this.bias.read())),null!=d&&(n=o.mul(n,d));let output=o.add(c,ds(n,this.recurrentKernel.read()));return null!=this.activation&&(output=this.activation.apply(output)),[output,output]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:eu(this.activation),useBias:this.useBias,kernelInitializer:zs(this.kernelInitializer),recurrentInitializer:zs(this.recurrentInitializer),biasInitializer:zs(this.biasInitializer),kernelRegularizer:ou(this.kernelRegularizer),recurrentRegularizer:ou(this.recurrentRegularizer),biasRegularizer:ou(this.biasRegularizer),activityRegularizer:ou(this.activityRegularizer),kernelConstraint:xi(this.kernelConstraint),recurrentConstraint:xi(this.recurrentConstraint),biasConstraint:xi(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Pu.className="SimpleRNNCell",o.serialization.registerClass(Pu);class Bu extends zu{constructor(e){e.cell=new Pu(e),super(e)}call(e,t){return Object(o.tidy)((()=>{null!=this.cell.dropoutMask&&(o.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(o.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const mask=null==t?null:t.mask,n=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:mask,training:n,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Bu.className="SimpleRNN",o.serialization.registerClass(Bu);class Wu extends Lu{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new oa("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Ta(this.units,"units"),this.activation=nu(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=nu(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Ls(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ls(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ls(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=cu(e.kernelRegularizer),this.recurrentRegularizer=cu(e.recurrentRegularizer),this.biasRegularizer=cu(e.biasRegularizer),this.kernelConstraint=vi(e.kernelConstraint),this.recurrentConstraint=vi(e.recurrentConstraint),this.biasConstraint=vi(e.biasConstraint),this.dropout=Za([1,Ja([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Za([1,Ja([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Vs(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Object(o.tidy)((()=>{if(2!==e.length)throw new oa(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qu({ones:()=>o.onesLike(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qu({ones:()=>o.onesLike(r),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const c=this.dropoutMask,l=this.recurrentDropoutMask;let d,h,f;0<this.dropout&&this.dropout<1&&(e=o.mul(e,c[0]));let m=ds(e,this.kernel.read());this.useBias&&(m=ms(m,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=o.mul(r,l[0]));const y=this.recurrentKernel.read(),[x,O]=o.split(y,[2*this.units,this.units],y.rank-1),v=ds(r,x),[k,w,S]=o.split(m,3,m.rank-1),[I,N]=o.split(v,2,v.rank-1);d=this.recurrentActivation.apply(o.add(k,I)),h=this.recurrentActivation.apply(o.add(w,N));const j=ds(o.mul(h,r),O);f=this.activation.apply(o.add(S,j));const T=o.add(o.mul(d,r),o.mul(o.add(1,o.neg(d)),f));return[T,T]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:eu(this.activation),recurrentActivation:eu(this.recurrentActivation),useBias:this.useBias,kernelInitializer:zs(this.kernelInitializer),recurrentInitializer:zs(this.recurrentInitializer),biasInitializer:zs(this.biasInitializer),kernelRegularizer:ou(this.kernelRegularizer),recurrentRegularizer:ou(this.recurrentRegularizer),biasRegularizer:ou(this.biasRegularizer),activityRegularizer:ou(this.activityRegularizer),kernelConstraint:xi(this.kernelConstraint),recurrentConstraint:xi(this.recurrentConstraint),biasConstraint:xi(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Wu.className="GRUCell",o.serialization.registerClass(Wu);class Vu extends zu{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Wu(e),super(e)}call(e,t){return Object(o.tidy)((()=>{null!=this.cell.dropoutMask&&(o.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(o.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const mask=null==t?null:t.mask,n=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:mask,training:n,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Vu.className="GRU",o.serialization.registerClass(Vu);class Uu extends Lu{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Ta(this.units,"units"),this.activation=nu(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=nu(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Ls(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ls(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ls(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=cu(e.kernelRegularizer),this.recurrentRegularizer=cu(e.recurrentRegularizer),this.biasRegularizer=cu(e.biasRegularizer),this.kernelConstraint=vi(e.kernelConstraint),this.recurrentConstraint=vi(e.recurrentConstraint),this.biasConstraint=vi(e.biasConstraint),this.dropout=Za([1,Ja([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Za([1,Ja([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Vs(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends Os{apply(t,r){const o=e.apply([n]),c=(new ks).apply([n]),l=e.apply([2*n]);return us(us(o,c),l)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Object(o.tidy)((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new oa(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const c=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qu({ones:()=>o.onesLike(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qu({ones:()=>o.onesLike(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const l=this.dropoutMask,d=this.recurrentDropoutMask;let i,h,f,m;0<this.dropout&&this.dropout<1&&(e=o.mul(e,l[0]));let y=ds(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=o.mul(r,d[0])),y=o.add(y,ds(r,this.recurrentKernel.read())),this.useBias&&(y=ms(y,this.bias.read()));const[x,O,v,k]=o.split(y,4,y.rank-1);i=this.recurrentActivation.apply(x),h=this.recurrentActivation.apply(O),f=o.add(o.mul(h,c),o.mul(i,this.activation.apply(v))),m=this.recurrentActivation.apply(k);const w=o.mul(m,this.activation.apply(f));return[w,w,f]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:eu(this.activation),recurrentActivation:eu(this.recurrentActivation),useBias:this.useBias,kernelInitializer:zs(this.kernelInitializer),recurrentInitializer:zs(this.recurrentInitializer),biasInitializer:zs(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ou(this.kernelRegularizer),recurrentRegularizer:ou(this.recurrentRegularizer),biasRegularizer:ou(this.biasRegularizer),activityRegularizer:ou(this.activityRegularizer),kernelConstraint:xi(this.kernelConstraint),recurrentConstraint:xi(this.recurrentConstraint),biasConstraint:xi(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Uu.className="LSTMCell",o.serialization.registerClass(Uu);class Gu extends zu{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Uu(e),super(e)}call(e,t){return Object(o.tidy)((()=>{null!=this.cell.dropoutMask&&(o.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(o.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const mask=null==t?null:t.mask,n=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:mask,training:n,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Gu.className="LSTM",o.serialization.registerClass(Gu);class Hu extends Lu{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Object(o.tidy)((()=>{let n=e.slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const o=[];let c;for(let i=0;i<this.cells.length;++i){const l=this.cells[i];n=r[i],c=0===i?[e[0]].concat(n):[c[0]].concat(n),c=l.call(c,t),o.push(c.slice(1))}n=[];for(const e of o.slice().reverse())n.push(...e);return[c[0]].concat(n)}))}build(e){let t;Ps(e)&&(e=e[0]),this.cells.forEach(((n,i)=>{Ga(`RNNCell_${i}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(Ri(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return qs(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,o=e.splice(r);for(let i=0;i<n.weights.length;++i)t.push([n.weights[i],o[i]])}Ks(t)}}function qu(e){const{ones:t,rate:n,training:r=!1,count:c=1,dropoutFunc:l}=e,d=()=>null!=l?l(t(),n):bs(t(),n),h=()=>gs(d,t,r);if(!c||c<=1)return o.keep(h().clone());return Array(c).fill(void 0).map(h).map((e=>o.keep(e.clone())))}Hu.className="StackedRNNCells",o.serialization.registerClass(Hu);var Ku=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};class Xu extends zu{constructor(e){if(e.unroll)throw new ua("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new ua("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Xs({ndim:5})]}call(e,t){return o.tidy((()=>{if(null!=this.cell.dropoutMask&&(o.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(o.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new oa("ConvRNN2D cell does not support constants");const mask=null==t?null:t.mask,n=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:mask,training:n,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return o.tidy((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),c=[r[0],...r.slice(2)],l=o.zeros(c);return Array.isArray(t)?Array(t.length).fill(l):[l]}))}resetStates(e,t=!1){o.tidy((()=>{if(!this.stateful)throw new sa("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),c=[r[0],...r.slice(2)];if(null==n[0])throw new oa("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>o.zeros(c))):this.states_=[o.zeros(c)];else if(null==e)o.dispose(this.states_),null!=this.keptStates&&(o.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>o.zeros(c))):this.states_[0]=o.zeros(c);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new oa(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):o.dispose(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=c;if(!o.util.arraysEqual(n.shape,r))throw new oa(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>o.keep(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:o,strides:c,dilationRate:l}=this.cell,d="channelsFirst"===t,h=e[d?3:2],f=e[d?4:3],m=gu(h,r[0],o,c[0],l[0]),y=gu(f,r[1],o,c[1],l[1]);return[...e.slice(0,2),...d?[n,m,y]:[m,y,n]]}}Xu.className="ConvRNN2D";class Yu extends Uu{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:o,dataFormat:c,dilationRate:l}=e;super(Object.assign({},e,{units:t})),this.filters=t,Ta(this.filters,"filters"),this.kernelSize=bu(n,2,"kernelSize"),this.kernelSize.forEach((e=>Ta(e,"kernelSize"))),this.strides=bu(r||1,2,"strides"),this.strides.forEach((e=>Ta(e,"strides"))),this.padding=o||"valid",Wa(this.padding),this.dataFormat=c||"channelsLast",Ba(this.dataFormat),this.dilationRate=bu(l||1,2,"dilationRate"),this.dilationRate.forEach((e=>Ta(e,"dilationRate")))}build(e){var t;e=Vs(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new oa(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],c=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",c,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Os{apply(e,t){return os([n.apply([r]),o.ones([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return o.tidy((()=>{if(3!==e.length)throw new oa(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],c=e[1],l=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qu({ones:()=>o.onesLike(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.dropoutMask,h=(e,mask,t)=>mask&&mask[t]?o.mul(mask[t],e):e;let f=h(r,d,0),m=h(r,d,1),y=h(r,d,2),x=h(r,d,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qu({ones:()=>o.onesLike(c),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const O=this.recurrentDropoutMask;let v=h(c,O,0),k=h(c,O,1),w=h(c,O,2),S=h(c,O,3);const[I,N,j,T]=o.split(this.kernel.read(),4,3),[C,$,E,A]=this.useBias?o.split(this.bias.read(),4):[null,null,null,null];f=this.inputConv(f,I,C,this.padding),m=this.inputConv(m,N,$,this.padding),y=this.inputConv(y,j,E,this.padding),x=this.inputConv(x,T,A,this.padding);const[R,_,F,D]=o.split(this.recurrentKernel.read(),4,3);v=this.recurrentConv(v,R),k=this.recurrentConv(k,_),w=this.recurrentConv(w,F),S=this.recurrentConv(S,D);const i=this.recurrentActivation.apply(o.add(f,v)),M=this.recurrentActivation.apply(o.add(m,k)),z=o.add(o.mul(M,l),o.mul(i,this.activation.apply(o.add(y,w)))),L=o.mul(this.recurrentActivation.apply(o.add(x,S)),this.activation.apply(z));return[L,L,z]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=Ku(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,b,n){const r=o.conv2d(e,t,this.strides,n||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return b?ms(r,b,this.dataFormat):r}recurrentConv(e,t){return o.conv2d(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Yu.className="ConvLSTM2DCell",o.serialization.registerClass(Yu);class Zu extends Xu{constructor(e){const t=new Yu(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Zu.className="ConvLSTM2D",o.serialization.registerClass(Zu);class Ju extends ei{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(input){if(null==this.noiseShape)return this.noiseShape;const e=input.shape,t=[];for(let i=0;i<this.noiseShape.length;++i)t.push(null==this.noiseShape[i]?e[i]:this.noiseShape[i]);return t}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,n=this.getNoiseShape(input);return gs((()=>bs(input,this.rate,n,this.seed)),(()=>input),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Ju.className="Dropout",o.serialization.registerClass(Ju);class Qu extends Ju{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(input){const e=input.shape;return[e[0],1,e[2]]}}Qu.className="SpatialDropout1D",o.serialization.registerClass(Qu);class ec extends ei{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Ta(this.units,"units"),this.activation=nu(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Ls(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Ls(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=vi(e.kernelConstraint),this.biasConstraint=vi(e.biasConstraint),this.kernelRegularizer=cu(e.kernelRegularizer),this.biasRegularizer=cu(e.biasRegularizer),this.activityRegularizer=cu(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Vs(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Vs(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e),n=$a(this.activation.getClassName());let output;return null!=n?output=ds(input,this.kernel.read(),n,this.bias?this.bias.read():null):(output=ds(input,this.kernel.read()),null!=this.bias&&(output=ms(output,this.bias.read())),null!=this.activation&&(output=this.activation.apply(output))),output}))}getConfig(){const e={units:this.units,activation:eu(this.activation),useBias:this.useBias,kernelInitializer:zs(this.kernelInitializer),biasInitializer:zs(this.biasInitializer),kernelRegularizer:ou(this.kernelRegularizer),biasRegularizer:ou(this.biasRegularizer),activityRegularizer:ou(this.activityRegularizer),kernelConstraint:xi(this.kernelConstraint),biasConstraint:xi(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}ec.className="Dense",o.serialization.registerClass(ec);class tc extends ei{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Vs(e);for(const t of e.slice(1))if(null==t)throw new oa(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Ya(e,1)]}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);let input=Ws(e);if("channelsFirst"===this.dataFormat&&input.rank>1){const e=[0];for(let i=2;i<input.rank;++i)e.push(i);e.push(1),input=Object(o.transpose)(input,e)}return function(e){if(e.rank<=1)throw new oa(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Ya(e.shape,1)];return o.reshape(e,t)}(input)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}tc.className="Flatten",o.serialization.registerClass(tc);class nc extends ei{constructor(e){super(e),this.supportsMasking=!0,this.activation=nu(e.activation)}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e);return this.activation.apply(input)}))}getConfig(){const e={activation:eu(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}nc.className="Activation",o.serialization.registerClass(nc);class rc extends ei{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Object(o.tidy)((()=>{return e=Ws(e),t=e,n=this.n,Object(o.tidy)((()=>{if(2!==t.shape.length)throw new oa(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return cs(rs(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}rc.className="RepeatVector",o.serialization.registerClass(rc);class ac extends ei{constructor(e){super(e),this.targetShape=e.targetShape;for(let i=0;i<this.targetShape.length;++i)this.isUnknown(this.targetShape[i])&&(this.targetShape[i]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let o=1,c=null;for(let i=0;i<r.length;++i){const e=r[i];if(this.isUnknown(e)){if(null!==c)throw new oa("Can only specifiy one unknown dimension.");c=i}else o*=e}const l=Ya(e);if(null!==c){if(0===o||l%o!=0)throw new oa(n);r[c]=l/o}else if(l!==o)throw new oa(n);return r}computeOutputShape(e){let t=!1;for(let i=0;i<e.length;++i)if(this.isUnknown(e[i])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e),n=input.shape,r=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return Object(o.reshape)(input,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}ac.className="Reshape",o.serialization.registerClass(ac);class sc extends ei{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Qa(1,e.dims.length+1);if(!o.util.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Xs({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Vs(e)).slice();return this.dims.forEach(((n,i)=>{t[i+1]=e[n]})),t}call(e,t){return Object(o.transpose)(Ws(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}sc.className="Permute",o.serialization.registerClass(sc);class ic extends ei{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,mask){const input=Ws(e);return Object(o.any)(Object(o.notEqual)(input,this.maskValue),-1)}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e),n=Object(o.any)(Object(o.notEqual)(input,this.maskValue),-1,!0);return Object(o.mul)(input,Object(o.cast)(n,input.dtype))}))}}ic.className="Masking",o.serialization.registerClass(ic);class oc extends ei{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(ba(e.inputLength))}this.inputDim=e.inputDim,Ta(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Ta(this.outputDim,"outputDim"),this.embeddingsInitializer=Ls(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=cu(e.embeddingsRegularizer),this.activityRegularizer=cu(e.activityRegularizer),this.embeddingsConstraint=vi(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,mask){return Object(o.tidy)((()=>this.maskZero?(e=Ws(e),Object(o.notEqual)(e,Object(o.zerosLike)(e))):null))}computeOutputShape(e){if(e=Vs(e),null==this.inputLength)return[...e,this.outputDim];const t=ba(this.inputLength);if(t.length!==e.length-1)throw new oa(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let i=0;for(let n=0;n<t.length;++n){const r=t[n],o=e[n+1];if(null!=r&&null!=o&&r!==o)throw new oa(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[i]=o),i++}}return[e[0],...t,this.outputDim]}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);let input=Ws(e);"int32"!==input.dtype&&(input=ns(input,"int32"));const output=hs(this.embeddings.read(),Object(o.reshape)(input,[input.size]));return Object(o.reshape)(output,Vs(this.computeOutputShape(input.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:zs(this.embeddingsInitializer),embeddingsRegularizer:ou(this.embeddingsRegularizer),activityRegularizer:ou(this.activityRegularizer),embeddingsConstraint:xi(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}oc.className="Embedding",o.serialization.registerClass(oc);class uc extends ei{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new ua}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const i=e[e.length-t.length+r],o=t[r];if(null==i||null==o||i<0||o<0)n.push(null);else if(1===i)n.push(o);else if(1===o)n.push(i);else{if(i!==o)throw new oa("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(i)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Vs(e)]),e.length<2)throw new oa(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Sa(t),t.length>1)throw new oa(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let i=1;i<e.length;++i){const t=null==e[i]?null:e[i].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Sa(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Object(o.tidy)((()=>{if(this.reshapeRequired){const t=[],n=e.map((input=>input.rank));if(-1===n.indexOf(null)){const r=Ja(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=rs(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,c=e[0],l=e.slice(1).concat([c]);let d=o.reshape(r,[c].concat(Ya(e.slice(1))));d=o.transpose(d,[1,0]),d=o.reshape(d,l),t.push(d),n=!0}else if(e>1){const c=Qa(1,e).concat([0]);t.push(o.transpose(r,c)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const c=r.rank;if(n)if(null==c){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=o.reshape(o.transpose(o.reshape(r,[-1,t]),[1,0]),n)}else if(c>1){const e=[c-1].concat(Qa(0,c-1));r=o.transpose(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let i=1;i<e.length;++i){const n=null==e[i]?null:e[i].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Sa(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,mask){return o.tidy((()=>{if(null==mask)return null;if(!Array.isArray(mask))throw new oa("`mask` should be an Array");if(!Array.isArray(e))throw new oa("`inputs` should be an Array");if(mask.length!==e.length)throw new oa(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${mask.length})`);if(mask.every((e=>null==e)))return null;let output=(mask=mask.map((e=>null==e?e:o.expandDims(e,0))))[0];for(let i=1;i<mask.length-1;++i)output=o.logicalAnd(output,mask[i]);return output}))}}class cc extends uc{constructor(e){super(e)}mergeFunction(e){return Object(o.tidy)((()=>{let output=e[0].clone();for(let i=1;i<e.length;++i)output=o.add(output,e[i]);return output}))}}cc.className="Add",o.serialization.registerClass(cc);class lc extends uc{constructor(e){super(e)}mergeFunction(e){return Object(o.tidy)((()=>{let output=e[0].clone();for(let i=1;i<e.length;++i)output=o.mul(output,e[i]);return output}))}}lc.className="Multiply",o.serialization.registerClass(lc);class dc extends uc{constructor(e){super(e)}mergeFunction(e){return Object(o.tidy)((()=>{let output=e[0].clone();for(let i=1;i<e.length;++i)output=o.add(output,e[i]);return o.mul(1/e.length,output)}))}}dc.className="Average",o.serialization.registerClass(dc);class hc extends uc{constructor(e){super(e)}mergeFunction(e){return Object(o.tidy)((()=>{let output=e[0];for(let i=1;i<e.length;++i)output=o.maximum(output,e[i]);return output}))}}hc.className="Maximum",o.serialization.registerClass(hc);class pc extends uc{constructor(e){super(e)}mergeFunction(e){return Object(o.tidy)((()=>{let output=e[0];for(let i=1;i<e.length;++i)output=o.minimum(output,e[i]);return output}))}}pc.className="Minimum",o.serialization.registerClass(pc);class fc extends uc{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new oa("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let i=0;i<e.length;++i){const t=e[i].slice();t.splice(this.axis,1);let r=!1;for(const e of n)if(o.util.arraysEqual(e,t)){r=!0;break}r||n.push(t)}if(n.length>1)throw new oa("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Object(o.tidy)((()=>os(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new oa("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,mask){if(null==mask)return null;if(!Array.isArray(mask))throw new oa("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new oa("`inputs` should be an array for Concatenate");if(mask.length!==e.length)throw new oa(`Mismatch in the length of mask (${mask.length}) and the legnth of inputs (${e.length})`);return o.tidy((()=>{let t=!0;if(mask.forEach((e=>{null==e||(t=!1)})),t)return null;const n=[];for(let i=0;i<e.length;++i)null==mask[i]?n.push(o.cast(o.onesLike(e[i]),"bool")):mask[i].rank<e[i].rank?n.push(o.expandDims(mask[i],-1)):n.push(mask[i]);const r=o.concat(n,this.axis);return o.all(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function mc(e,t){for(;e<0;)e+=t;return e}fc.className="Concatenate",o.serialization.registerClass(fc);class bc extends uc{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){o.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new ua("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new oa(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new oa(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,i)=>mc(t,e[i].shape.length))):[mc(this.axes,n.shape.length),mc(this.axes,r.shape.length)],this.normalize&&(n=_i(n,t[0]),r=_i(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new ua("batchDot is not implemented for tensors of 4D or higher rank yet");if(o.util.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),o.util.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new ua("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,c=t.shape.length;null==n&&(n=[r-1,c-2]);const l=n;return o.tidy((()=>{let n,d;if(r>c){n=r-c;const e=[];for(let i=0;i<n;++i)e.push(1);t=o.reshape(t,t.shape.concat(e))}else if(c>r){n=c-r;const t=[];for(let i=0;i<n;++i)t.push(1);e=o.reshape(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)d=l[0]===l[1]?o.sum(o.mul(e,t),l[0]):o.sum(o.mul(o.transpose(e,[1,0]),t),l[1]);else{const n=l[0]!==e.shape.length-1,r=l[1]===t.shape.length-1;d=o.matMul(e,t,n,r)}if(n>0){let e;e=r>c?r+c-3:r-1;const t=[];for(let i=e;i<e+n;++i)t.push(i);d=o.squeeze(d,t)}return 1===d.shape.length&&(d=o.expandDims(d,1)),d}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[mc(this.axes,e.length),mc(this.axes,t.length)],n}computeOutputShape(e){o.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new ua("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const c=t.concat(n);return 1===c.length&&c.push(1),c}computeMask(e,mask){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}bc.className="Dot",o.serialization.registerClass(bc);class gc extends ei{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e);return gs((()=>Object(o.add)(ls(input.shape,0,this.stddev),input)),(()=>input),t.training||!1)}))}}gc.className="GaussianNoise",o.serialization.registerClass(gc);class yc extends ei{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t);const input=Ws(e);if(this.rate>0&&this.rate<1){return gs((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Object(o.mul)(input,ls(input.shape,1,e))}),(()=>input),t.training||!1)}return input}))}}yc.className="GaussianDropout",o.serialization.registerClass(yc);class xc extends ei{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Ws(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Object(o.tidy)((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return gs((()=>{const input=Ws(e),t=-1.7580993408473766;let r=Object(o.greaterEqual)(Object(o.randomUniform)(n),this.rate);r=ns(r,"float32");const a=((1-this.rate)*(1+this.rate*t**2))**-.5,b=-a*t*this.rate,c=Object(o.add)(Object(o.mul)(input,r),Object(o.mul)(Object(o.add)(r,-1),t));return Object(o.add)(Object(o.mul)(c,a),b)}),(()=>Ws(e)),t.training||!1)}return e}))}}function Oc(e,t,n,r,c,l=.001){let d;if(2===e.rank)d=o.batchNorm2d(e,t,n,r,c,l);else if(3===e.rank)d=o.batchNorm3d(e,t,n,r,c,l);else{if(4!==e.rank)throw new ua(`batchNormalization is not implemented for array of rank ${e.rank} yet`);d=o.batchNorm4d(e,t,n,r,c,l)}return d}function vc(e,t,n,r,c=.001){return o.util.arraysEqual(r.slice().sort(),Qa(0,e.rank-1))?function(e,t,n,r,c=.001){return Object(o.tidy)((()=>{const l=o.moments(e,r),d=l.mean,h=l.variance;return[Oc(e,d,h,n,t,c),d,h]}))}(e,t,n,r,c):function(e,t,n,r,c=.001){return Object(o.tidy)((()=>{const l=o.moments(e,r),d=l.mean,h=l.variance,f=[];for(const t of Qa(0,e.rank))-1!==r.indexOf(t)?f.push(1):f.push(e.shape[t]);const m=Object(o.reshape)(d,f),y=Object(o.reshape)(h,f),x=null==t?null:Object(o.reshape)(t,f),O=null==n?null:Object(o.reshape)(n,f);return[Oc(e,m,y,O,x,c),d,h]}))}(e,t,n,r,c)}xc.className="AlphaDropout",o.serialization.registerClass(xc);class kc extends ei{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Ls(e.betaInitializer||"zeros"),this.gammaInitializer=Ls(e.gammaInitializer||"ones"),this.movingMeanInitializer=Ls(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Ls(e.movingVarianceInitializer||"ones"),this.betaConstraint=vi(e.betaConstraint),this.gammaConstraint=vi(e.gammaConstraint),this.betaRegularizer=cu(e.betaRegularizer),this.gammaRegularizer=cu(e.gammaRegularizer)}build(e){e=Vs(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new oa(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Xs({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Object(o.tidy)((()=>{const n=null!=t.training&&t.training,input=Ws(e),r=input.shape,c=r.length,l=Qa(0,c),d=this.axis>=0?this.axis:this.axis+c;l.splice(d,1);const h=ha(1,c);h[d]=r[d];const f=l.slice();f.sort();const m=!o.util.arraysEqual(f,Qa(0,c).slice(0,c-1));if(!n)return(()=>{if(m){const e=Object(o.reshape)(this.movingMean.read(),h),t=Object(o.reshape)(this.movingVariance.read(),h),n=this.center?Object(o.reshape)(this.beta.read(),h):null,r=this.scale?Object(o.reshape)(this.gamma.read(),h):null;return Oc(input,e,t,n,r,this.epsilon)}return Oc(input,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[y,x,O]=vc(input,this.gamma.read(),this.beta.read(),l,this.epsilon),v=(e,t,n)=>{o.tidy((()=>{const r=1-n,c=e.read(),l=o.mul(o.sub(c,t),r);e.write(o.sub(c,l))}))};return(()=>{v(this.movingMean,x,this.momentum),v(this.movingVariance,O,this.momentum)})(),y}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:zs(this.betaInitializer),gammaInitializer:zs(this.gammaInitializer),movingMeanInitializer:zs(this.movingMeanInitializer),movingVarianceInitializer:zs(this.movingVarianceInitializer),betaRegularizer:ou(this.betaRegularizer),gammaRegularizer:ou(this.gammaRegularizer),betaConstraint:xi(this.betaConstraint),gammaConstraint:xi(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}kc.className="BatchNormalization",o.serialization.registerClass(kc);class wc extends ei{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Ls(e.betaInitializer||"zeros"),this.gammaInitializer=Ls(e.gammaInitializer||"ones"),this.betaRegularizer=cu(e.betaRegularizer),this.gammaRegularizer=cu(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Vs(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let i=0;i<this.axis.length;++i)this.axis[i]<0&&(this.axis[i]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Sa(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const input=Ws(e),n=input.shape,r=n.length;return Object(o.tidy)((()=>{let{mean:e,variance:t}=Object(o.moments)(input,this.axis,!0);const c=ha(1,r);for(const e of this.axis)c[e]=n[e];const l=e=>null!=e&&e.shape.length!==r?o.reshape(e,c):e;let d=this.scale?l(this.gamma.read()):null,h=this.center?l(this.beta.read()):null;const f=[],m=[];for(let i=0;i<r;++i)-1!==this.axis.indexOf(i)?(f.push(n[i]),m.push(1)):(f.push(1),m.push(n[i]));return e=o.tile(e,f),t=o.tile(t,f),null!=d&&(d=o.tile(d,m)),null!=h&&(h=o.tile(h,m)),Oc(input,e,t,h,d,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:zs(this.betaInitializer),gammaInitializer:zs(this.gammaInitializer),betaRegularizer:ou(this.betaRegularizer),gammaRegularizer:ou(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}wc.className="LayerNormalization",o.serialization.registerClass(wc);class Sc extends ei{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new oa(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new oa(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new oa(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Xs({ndim:4})]}computeOutputShape(e){let t,n;return e=Vs(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Object(o.tidy)((()=>{return t=Ws(e),n=this.padding,r=this.dataFormat,Object(o.tidy)((()=>{if(4!==t.rank)throw new oa(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new oa("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new oa(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let pattern;return pattern="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],o.pad(t,pattern)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Ic(e,t,n,r,c,l){return Object(o.tidy)((()=>{let d;Ba(c),Va(l),Wa(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==c&&(c="channelsLast"),null==l&&(l="max"),e=xu(e,c);const h="same"===r?"same":"valid";return d="max"===l?o.maxPool(e,t,n,h):o.avgPool(e,t,n,h),"channelsFirst"===c&&(d=o.transpose(d,[0,3,1,2])),d}))}function Nc(e,t,n,r,c,l){return Object(o.tidy)((()=>{let d;Ba(c),Va(l),Wa(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==c&&(c="channelsLast"),null==l&&(l="max"),e=Ou(e,c);const h="same"===r?"same":"valid";return d="max"===l?o.maxPool3d(e,t,n,h):o.avgPool3d(e,t,n,h),"channelsFirst"===c&&(d=o.transpose(d,[0,4,1,2,3])),d}))}Sc.className="ZeroPadding2D",o.serialization.registerClass(Sc);class jc extends ei{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new oa(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Ta(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new oa(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Ta(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Wa(this.padding),this.inputSpec=[new Xs({ndim:3})]}computeOutputShape(e){const t=gu((e=Vs(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Object(o.tidy)((()=>{this.invokeCallHook(e,t),e=rs(Ws(e),2);const output=this.poolingFunction(Ws(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return o.squeeze(output,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Tc extends jc{constructor(e){super(e)}poolingFunction(e,t,n,r,o){return Ba(o),Wa(r),Ic(e,t,n,r,o,"max")}}Tc.className="MaxPooling1D",o.serialization.registerClass(Tc);class Cc extends jc{constructor(e){super(e)}poolingFunction(e,t,n,r,o){return Ba(o),Wa(r),Ic(e,t,n,r,o,"avg")}}Cc.className="AveragePooling1D",o.serialization.registerClass(Cc);class $c extends ei{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new oa(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Ta(this.poolSize,"poolSize"),Ta(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ba(this.dataFormat),Wa(this.padding),this.inputSpec=[new Xs({ndim:4})]}computeOutputShape(e){e=Vs(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=gu(t,this.poolSize[0],this.padding,this.strides[0]),n=gu(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Object(o.tidy)((()=>(this.invokeCallHook(e,t),this.poolingFunction(Ws(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ec extends $c{constructor(e){super(e)}poolingFunction(e,t,n,r,o){return Ba(o),Wa(r),Ic(e,t,n,r,o,"max")}}Ec.className="MaxPooling2D",o.serialization.registerClass(Ec);class Ac extends $c{constructor(e){super(e)}poolingFunction(e,t,n,r,o){return Ba(o),Wa(r),Ic(e,t,n,r,o,"avg")}}Ac.className="AveragePooling2D",o.serialization.registerClass(Ac);class Rc extends ei{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new oa(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Ta(this.poolSize,"poolSize"),Ta(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ba(this.dataFormat),Wa(this.padding),this.inputSpec=[new Xs({ndim:5})]}computeOutputShape(e){e=Vs(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=gu(t,this.poolSize[0],this.padding,this.strides[0]),n=gu(n,this.poolSize[1],this.padding,this.strides[1]),r=gu(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Object(o.tidy)((()=>(this.invokeCallHook(e,t),this.poolingFunction(Ws(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class _c extends Rc{constructor(e){super(e)}poolingFunction(e,t,n,r,o){return Ba(o),Wa(r),Nc(e,t,n,r,o,"max")}}_c.className="MaxPooling3D",o.serialization.registerClass(_c);class Fc extends Rc{constructor(e){super(e)}poolingFunction(e,t,n,r,o){return Ba(o),Wa(r),Nc(e,t,n,r,o,"avg")}}Fc.className="AveragePooling3D",o.serialization.registerClass(Fc);class Dc extends ei{constructor(e){super(e),this.inputSpec=[new Xs({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new ua}}class Mc extends Dc{constructor(e){super(e||{})}call(e,t){return Object(o.tidy)((()=>{const input=Ws(e);return o.mean(input,1)}))}}Mc.className="GlobalAveragePooling1D",o.serialization.registerClass(Mc);class zc extends Dc{constructor(e){super(e||{})}call(e,t){return Object(o.tidy)((()=>{const input=Ws(e);return o.max(input,1)}))}}zc.className="GlobalMaxPooling1D",o.serialization.registerClass(zc);class Lc extends ei{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ba(this.dataFormat),this.inputSpec=[new Xs({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new ua}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Pc extends Lc{call(e,t){return Object(o.tidy)((()=>{const input=Ws(e);return"channelsLast"===this.dataFormat?o.mean(input,[1,2]):o.mean(input,[2,3])}))}}Pc.className="GlobalAveragePooling2D",o.serialization.registerClass(Pc);class Bc extends Lc{call(e,t){return Object(o.tidy)((()=>{const input=Ws(e);return"channelsLast"===this.dataFormat?o.max(input,[1,2]):o.max(input,[2,3])}))}}Bc.className="GlobalMaxPooling2D",o.serialization.registerClass(Bc);class Wc extends ei{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=Ri(t.layer,n);delete t.layer;const o={layer:r};return Object.assign(o,t),new e(o)}}class Vc extends Wc{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Vs(e)).length<3)throw new oa(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Vs(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Object(o.tidy)((()=>Mu(((e,n)=>[Ws(this.layer.call(e,t)),[]]),e=Ws(e),[],!1,null,null,!1,!0)[1]))}}Vc.className="TimeDistributed",o.serialization.registerClass(Vc);class Uc extends Wc{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Ri(n),t.goBackwards=!0!==t.goBackwards;const r={};var o;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=Ri(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,o=this.mergeMode,Na(La,"BidirectionalMergeMode",o),e.weights)throw new ua("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,o=this.forwardLayer.computeOutputShape(e);return Array.isArray(o)&&Array.isArray(o[0])||(o=[o]),this.returnState?(r=o.slice(1),t=o[0]):t=o[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):ma(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const o=Du(e,n,r,this.numConstants);if(e=o.inputs,n=o.initialState,r=o.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const c=[],l=[];if(null!=n){const e=n.length;if(e%2>0)throw new oa("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,c.push(...n);const r=n.map((e=>new Xs({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),l.push(...r)}if(null!=r)throw new ua("Support for constants in Bidirectional layers is not implemented yet.");const d=c[0]instanceof Ys;for(const e of c)if(e instanceof Ys!==d)throw new oa("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(d){const n=[e].concat(c),r=this.inputSpec.concat(l),o=this.inputSpec;this.inputSpec=r;const output=super.apply(n,t);return this.inputSpec=o,output}return super.apply(e,t)}call(e,t){return Object(o.tidy)((()=>{const n=t.initialState;let r,c,l,output;if(null==n)r=this.forwardLayer.call(e,t),c=this.backwardLayer.call(e,t);else{const o=n.slice(0,n.length/2),l=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:o})),c=this.backwardLayer.call(e,Object.assign(t,{initialState:l}))}return this.returnState&&(Array.isArray(r)&&(l=r.slice(1).concat(c.slice(1))),r=r[0],c=c[0]),this.returnSequences&&(c=o.reverse(c,1)),"concat"===this.mergeMode?output=os([r,c]):"sum"===this.mergeMode?output=o.add(r,c):"ave"===this.mergeMode?output=o.mul(.5,o.add(r,c)):"mul"===this.mergeMode?output=o.mul(r,c):null==this.mergeMode&&(output=[r,c]),this.returnState?null==this.mergeMode?output.concat(l):[output].concat(l):output}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Ga(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Ga(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,mask){let t;if(Array.isArray(mask)&&(mask=mask[0]),t=this.returnSequences?null==this.mergeMode?[mask,mask]:mask:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(t)?t.concat(e).concat(e):[t].concat(e).concat(e)}return t}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Ri(t.layer);if(delete t.layer,null!=t.numConstants)throw new ua("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}Uc.className="Bidirectional",o.serialization.registerClass(Uc);var Gc=n(708),Hc=n(690),qc=n(638),Kc=n(751);class Xc{constructor(){this.size=null}batch(e,t=!0){const base=this;let n;return o.util.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),n=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Yc((async()=>(await base.iterator()).columnMajorBatch(e,t,Zc)),n)}concatenate(e){const base=this;let t;return t=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Yc((async()=>(await base.iterator()).concatenate(await e.iterator())),t)}filter(e){const base=this;let t;return t=this.size===1/0?1/0:null,Yc((async()=>(await base.iterator()).filter((t=>o.tidy((()=>e(t)))))),t)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const base=this;return Yc((async()=>(await base.iterator()).map((t=>o.tidy((()=>e(t)))))),this.size)}mapAsync(e){const base=this;return Yc((async()=>(await base.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const base=this;return Yc((async()=>(await base.iterator()).prefetch(e)),this.size)}repeat(e){const base=this;let t;return t=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Yc((async()=>{const t=Object(qc.e)((async()=>({value:await base.iterator(),done:!1})));return Object(qc.d)(t.take(e))}),t)}skip(e){const base=this;let t;return t=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Yc((async()=>(await base.iterator()).skip(e)),t)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const base=this,r=Hc.alea(t||o.util.now().toString());return Yc((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await base.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const base=this;let t;return t=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Yc((async()=>(await base.iterator()).take(e)),t)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Yc(e,t=null){return new class extends Xc{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Zc(e){if(null===e)return null;const t=e[0];if(Object(Kc.a)(t)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof o.Tensor?o.stack(e):o.tensor(e)}(e),recurse:!1}}return{value:null,recurse:!0}}Xc.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");class Jc extends qc.a{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(!Object(o.env)().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const t=new Jc(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((r=>{const o=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(o),r({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((data,i)=>n.set(data,i*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(o.util.sizeFromShape(t));return n.set(e,n.length-e.length),Object(o.tensor)(n,t)}}class Qc extends qc.a{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Object(o.tensor1d)([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2,c=n+e,l=t+r;this.cropBox=Object(o.tensor2d)([r,n,l,c],[1,4])}else this.cropBox=Object(o.tensor2d)([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(!Object(o.env)().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new Qc(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&o.util.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let img;try{o.browser.fromPixels(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:img,done:!1};try{return{value:this.cropAndResizeFrame(img),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{img.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(img){return Object(o.tidy)((()=>{const e=Object(o.expandDims)(Object(o.cast)(img,"float32"),0);let t;o.image.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const n=t.shape;return Object(o.reshape)(t,n.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((track=>track.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}var el=n(967);class tl extends el.a{constructor(e,t={}){super(),this.file=e,this.options=t,o.util.assert(e instanceof Uint8Array||!!Object(o.env)().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let data=r.result;if(data instanceof ArrayBuffer&&new Uint8Array(data),!(data instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(data)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const o=this.file.slice(this.offset,n);r.readAsArrayBuffer(o)}this.offset=n}));return{value:await e,done:!1}}}function nl(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const rl=o.kernel_impls.whereImpl;class al extends o.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new o.DataStorage(this,Object(o.engine)())}nextDataId(){return al.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,Object(o.env)().get("IS_NODE")&&o.backend_util.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&o.util.isString(n[0])){const c=n.map((e=>o.util.encodeString(e)));r=this.write(c,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,o){this.data.set(e,{values:t,dtype:r,refCount:o})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return o.backend_util.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const data=this.readSync(e.dataId);if("string"===e.dtype)try{const t=data.map((e=>o.util.decodeString(e)));return Object(o.buffer)(e.shape,e.dtype,t)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Object(o.buffer)(e.shape,e.dtype,data)}makeOutput(e,t,n){return Object(o.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=o.util.now();e();return{kernelMs:o.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){nl([e],"where");const t=this.readSync(e.dataId);return rl(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}al.nextDataId=0;function sl(e,t,n){return({inputs:r,attrs:c,backend:l})=>{const{x:d}=r;if(nl(d,e),"string"===d.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const h=l,f=h.data.get(d.dataId).values,m=o.util.sizeFromShape(d.shape),y=n||d.dtype,x=o.util.getArrayFromDType(y,m);for(let i=0;i<m;++i)x[i]=t(f[i],c);return h.makeTensorInfo(d.shape,y,x)}}function il(e,t,n){return({inputs:r,attrs:o,backend:c})=>{const{x:l}=r;if(nl(l,e),"string"===l.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const d=c,h=d.data.get(l.dataId).values,f=n||l.dtype,m=t(h,f,o);return d.makeTensorInfo(l.shape,f,m)}}Object(o.registerBackend)("cpu",(()=>new al),1);const cl=sl(o.Elu,(e=>e>=0?e:Math.exp(e)-1)),ll={kernelName:o.Elu,backendName:"cpu",kernelFunc:cl};function hl(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const pl={kernelName:o.Identity,backendName:"cpu",kernelFunc:hl};function fl(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{alpha:l}=r;nl([c],"leakyRelu");const d=o.util.sizeFromShape(c.shape),h=n.data.get(c.dataId).values,f=o.util.getTypedArrayFromDType("float32",d);for(let i=0;i<h.length;i++)f[i]=h[i]<0?l*h[i]:h[i];return n.makeTensorInfo(c.shape,"float32",f)}const ml={kernelName:o.LeakyRelu,backendName:"cpu",kernelFunc:fl};function bl(e){return(t,n,r,c,l)=>{const d=o.backend_util.assertAndGetBroadcastShape(t,n),h=d.length,f=o.util.computeStrides(d),m=o.util.sizeFromShape(d),y=o.util.getTypedArrayFromDType(l,m),x=t.length,O=n.length,v=o.util.computeStrides(t),k=o.util.computeStrides(n),w=o.backend_util.getBroadcastDims(t,d),S=o.backend_util.getBroadcastDims(n,d);if(w.length+S.length===0)for(let i=0;i<y.length;++i)y[i]=e(r[i%r.length],c[i%c.length]);else for(let i=0;i<y.length;++i){const t=o.util.indexToLoc(i,h,f),n=t.slice(-x);w.forEach((e=>n[e]=0));const l=o.util.locToIndex(n,x,v),d=t.slice(-O);S.forEach((e=>d[e]=0));const m=o.util.locToIndex(d,O,k);y[i]=e(r[l],c[m])}return[y,d]}}const gl=bl(((e,t)=>e<0?t*e:e));function yl(e){const{inputs:t,backend:n}=e,{x:r,alpha:o}=t;nl([r,o],"prelu");const c=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values,[d,h]=gl(r.shape,o.shape,c,l,"float32");return n.makeTensorInfo(h,"float32",d)}const xl={kernelName:o.Prelu,backendName:"cpu",kernelFunc:yl},Ol=sl(o.Relu,(e=>Math.max(0,e))),vl={kernelName:o.Relu,backendName:"cpu",kernelFunc:Ol},kl=sl(o.Relu6,(e=>Math.min(Math.max(0,e),6))),wl={kernelName:o.Relu6,backendName:"cpu",kernelFunc:kl};function Sl(e){return(t,n,r)=>{const c=o.util.getTypedArrayFromDType(n,t.length);for(let i=0;i<t.length;++i)c[i]=e(t[i],r);return c}}const Il=Sl((e=>1/(1+Math.exp(-e)))),Nl=sl(o.Sigmoid,(e=>1/(1+Math.exp(-e)))),jl={kernelName:o.Sigmoid,backendName:"cpu",kernelFunc:Nl};function Tl(e,t,n,r,o){if("linear"===n)return hl({inputs:{x:t},backend:e});if("relu"===n)return Ol({inputs:{x:t},backend:e});if("elu"===n)return cl({inputs:{x:t},backend:e});if("relu6"===n)return kl({inputs:{x:t},backend:e});if("prelu"===n)return yl({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return fl({inputs:{x:t},backend:e,attrs:{alpha:o}});if("sigmoid"===n)return Nl({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Cl(e){const{inputs:t,backend:n}=e,{real:r,imag:o}=t,c=n.data.get(r.dataId).values,l=n.data.get(o.dataId).values,d=n.makeTensorInfo(r.shape,"complex64");return n.data.get(d.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",c),imag:n.makeTensorInfo(o.shape,"float32",l)},d}const $l={kernelName:o.Complex,backendName:"cpu",kernelFunc:Cl};function El(e,t,n="float32"){if("complex64"===n){return Cl({inputs:{real:El(e,t,"float32"),imag:El(e,t,"float32")},backend:e})}const r=o.util.makeZerosTypedArray(o.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function Al(e){const{inputs:t,backend:n}=e,{input:input}=t,r=n.data.get(input.dataId).complexTensorInfos.real,o=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,o)}const Rl={kernelName:o.Real,backendName:"cpu",kernelFunc:Al};function _l(e,t,n,r){if("int32"===r){return[t,"int32",Int32Array.from(e)]}if("bool"===r){const r=o.util.toTypedArray([0],n),[c,l]=bl(((a,b)=>a!==b?1:0))(t,[],e,r,"bool");return[l,"bool",c]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function Fl(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{dtype:l}=r;if("complex64"===l){if("complex64"===c.dtype)return hl({inputs:{x:c},backend:n});const e=El(n,c.shape,c.dtype),t=Fl({inputs:{x:c},backend:n,attrs:{dtype:"float32"}}),r=Cl({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===c.dtype){const e=Al({inputs:{input:c},backend:n}),t=Fl({inputs:{x:e},backend:n,attrs:{dtype:l}});return n.disposeIntermediateTensorInfo(e),t}if(!o.util.hasEncodingLoss(c.dtype,l)){const e=hl({inputs:{x:c},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:l}}const d=n.data.get(c.dataId).values,[h,f,m]=_l(d,c.shape,c.dtype,l);return n.makeTensorInfo(h,f,m)}const Dl={kernelName:o.Cast,backendName:"cpu",kernelFunc:Fl};function Ml(e,t,n,r){return null==n?({inputs:n,backend:c})=>{const{a:a,b:b}=n,l=c;nl([a,b],e);const d=l.data.get(a.dataId).values,h=l.data.get(b.dataId).values,f="string"===a.dtype?o.backend_util.fromUint8ToStringArray(d):d,m="string"===a.dtype?o.backend_util.fromUint8ToStringArray(h):h,y=r||a.dtype,[x,O]=t(a.shape,b.shape,f,m,y);return l.makeTensorInfo(O,y,x)}:({inputs:e,backend:o})=>{const{a:a,b:b}=e,c=o;if("complex64"===a.dtype||"complex64"===b.dtype){const e=Fl({inputs:{x:a},backend:c,attrs:{dtype:"complex64"}}),t=c.data.get(e.dataId),r=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=c.data.get(r.dataId).values,d=c.data.get(o.dataId).values,h=Fl({inputs:{x:b},backend:c,attrs:{dtype:"complex64"}}),f=c.data.get(h.dataId),m=f.complexTensorInfos.real,y=f.complexTensorInfos.imag,x=c.data.get(m.dataId).values,O=c.data.get(y.dataId).values,[v,k,w]=n(a.shape,b.shape,l,d,x,O),S=c.makeTensorInfo(w,"float32",v),I=c.makeTensorInfo(w,"float32",k),N=Cl({inputs:{real:S,imag:I},backend:c});return c.disposeIntermediateTensorInfo(e),c.disposeIntermediateTensorInfo(h),c.disposeIntermediateTensorInfo(S),c.disposeIntermediateTensorInfo(I),N}{const e=c.data.get(a.dataId).values,n=c.data.get(b.dataId).values,o=r||a.dtype,[l,d]=t(a.shape,b.shape,e,n,o);return c.makeTensorInfo(d,o,l)}}}function zl(e){return(t,n,r,c,l,d)=>{const h=o.backend_util.assertAndGetBroadcastShape(t,n),f=o.util.sizeFromShape(h),m=h.length,y=o.util.computeStrides(h),x=o.util.getTypedArrayFromDType("float32",f),O=o.util.getTypedArrayFromDType("float32",f),v=o.backend_util.getBroadcastDims(t,h),k=o.backend_util.getBroadcastDims(n,h),w=o.backend_util.mergeRealAndImagArrays(r,c),S=o.backend_util.mergeRealAndImagArrays(l,d),I=t.length,N=o.util.computeStrides(t),j=n.length,T=o.util.computeStrides(n);if(v.length+k.length===0)for(let i=0;i<x.length;i++){const t=i%w.length,n=i%S.length,r=e(w[2*t],w[2*t+1],S[2*n],S[2*n+1]);x[i]=r.real,O[i]=r.imag}else for(let i=0;i<x.length;i++){const t=o.util.indexToLoc(i,m,y),n=t.slice(-I);v.forEach((e=>n[e]=0));const r=o.util.locToIndex(n,I,N),c=t.slice(-j);k.forEach((e=>c[e]=0));const l=o.util.locToIndex(c,j,T),d=e(w[2*r],w[2*r+1],S[2*l],S[2*l+1]);x[i]=d.real,O[i]=d.imag}return[x,O,h]}}const Ll=bl(((a,b)=>a+b)),Pl=zl(((e,t,n,r)=>({real:e+n,imag:t+r}))),Bl=Ml(o.Add,Ll,Pl),Wl={kernelName:o.Add,backendName:"cpu",kernelFunc:Bl};function Vl(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{shape:l}=r,d=o.util.sizeFromShape(c.shape),h=o.util.inferFromImplicitShape(l,d),f=o.util.sizeFromShape(h);o.util.assert(d===f,(()=>`The new shape (${h}) has ${f} elements and the old shape (${c.shape}) has ${d} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(c.dataId);const m=n.data.get(c.dataId);if(null!=m.complexTensorInfos){const e=m.complexTensorInfos.real,t=m.complexTensorInfos.imag;e.shape=h,t.shape=h}return{dataId:c.dataId,shape:h,dtype:c.dtype}}const Ul={kernelName:o.Reshape,backendName:"cpu",kernelFunc:Vl};function Gl(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b}=t,{transposeA:c,transposeB:l}=r;nl([a,b],"matMul");const d=a.shape.length,h=b.shape.length,f=c?a.shape[d-2]:a.shape[d-1],m=l?b.shape[h-1]:b.shape[h-2],y=c?a.shape[d-1]:a.shape[d-2],x=l?b.shape[h-2]:b.shape[h-1],O=a.shape.slice(0,-2),v=b.shape.slice(0,-2),k=o.util.sizeFromShape(O),w=o.util.sizeFromShape(v),S=o.broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0,-2),b.shape.slice(0,-2)).concat([y,x]);o.util.assert(f===m,(()=>`Error in matMul: inner shapes (${f}) and (${m}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${c} and transposeB=${l} must match.`));const I=l?[w,x,m]:[w,m,x],N=Vl({inputs:{x:a},backend:n,attrs:{shape:c?[k,f,y]:[k,y,f]}}),j=Vl({inputs:{x:b},backend:n,attrs:{shape:I}}),T=c?N.shape[1]:N.shape[2],C=c?N.shape[2]:N.shape[1],$=l?j.shape[1]:j.shape[2],E=Math.max(k,w),A=n.data.get(N.dataId).values,R=n.data.get(j.dataId).values,_=o.util.computeStrides(N.shape),F=o.util.computeStrides(j.shape),[D,M,z]=c?[_[0],1,_[1]]:[_[0],_[1],1],[L,P,B]=l?[1,F[1],F[0]]:[F[1],1,F[0]],W=C*$,V=Object(o.buffer)([E,C,$],N.dtype),U=V.values,G=n.blockSize;for(let e=0;e<E;e++)for(let t=0;t<C;t+=G)for(let n=0;n<$;n+=G)for(let r=0;r<T;r+=G){const o=Math.min(t+G,C),c=Math.min(n+G,$),l=Math.min(r+G,T);for(let i=t;i<o;i++)for(let t=n;t<c;t++){let n=0;for(let o=r;o<l;o++){const r=Math.min(e,k-1)*D,c=Math.min(e,w-1)*B;n+=A[r+i*M+o*z]*R[o*L+t*P+c]}U[e*W+(i*$+t)]+=n}}return n.disposeIntermediateTensorInfo(N),n.disposeIntermediateTensorInfo(j),n.makeTensorInfo(S,V.dtype,V.values)}const Hl={kernelName:o.BatchMatMul,backendName:"cpu",kernelFunc:Gl};const ql={kernelName:o._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b,bias:o,preluActivationWeights:c}=t,{transposeA:l,transposeB:d,activation:h,leakyreluAlpha:f}=r;let m,y,x;const O=[];m=Gl({inputs:{a:a,b:b},attrs:{transposeA:l,transposeB:d},backend:n}),o&&(y=Bl({inputs:{a:m,b:o},backend:n}),O.push(m),m=y),h&&(x=Tl(n,m,h,c,f),O.push(m),m=x);for(const i of O)n.disposeIntermediateTensorInfo(i);return m}};function Kl(e){const t=new Float32Array(e.length);for(let i=0;i<e.length;++i)t[i]=Math.abs(e[i]);return t}const Xl={kernelName:o.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;nl(t,"abs");let r=new Float32Array(o.util.sizeFromShape(t.shape));return r=Kl(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},Yl=sl(o.Acos,(e=>Math.acos(e))),Zl={kernelName:o.Acos,backendName:"cpu",kernelFunc:Yl},Jl=sl(o.Acosh,(e=>Math.acosh(e))),Ql={kernelName:o.Acosh,backendName:"cpu",kernelFunc:Jl};const ed={kernelName:o.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;nl(t,"addN");const c=r.map((e=>n.data.get(e.dataId).values)),l=Object(o.buffer)(r[0].shape,r[0].dtype),d=l.values;for(let i=0;i<r.length;i++){const e=c[i];for(let t=0;t<d.length;t++)d[t]+=e[t]}return n.makeTensorInfo(l.shape,l.dtype,l.values)}};function nd(e,t,n,r,c){const l=t.length,d=o.util.sizeFromShape(t),h=o.util.computeStrides(t),f=o.util.computeStrides(c),m=o.util.getTypedArrayFromDType(n,o.util.sizeFromShape(c));for(let i=0;i<d;++i){const t=o.util.indexToLoc(i,l,h),n=new Array(t.length);for(let i=0;i<n.length;i++)n[i]=t[r[i]];m[o.util.locToIndex(n,l,f)]=e[i]}return m}function rd(e){const{inputs:t,attrs:n,backend:r}=e,{x:o}=t,{perm:c}=n;nl(o,"transpose");const l=o.shape.length,d=new Array(l);for(let i=0;i<d.length;i++)d[i]=o.shape[c[i]];const h=nd(r.data.get(o.dataId).values,o.shape,o.dtype,c,d);return{dataId:r.write(h,d,o.dtype),shape:d,dtype:o.dtype}}const ad={kernelName:o.Transpose,backendName:"cpu",kernelFunc:rd};const sd={kernelName:o.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r;nl(c,"all");const h=o.util.parseAxisParam(l,c.shape);let f=h;const m=o.backend_util.getAxesPermutation(f,c.shape.length);let y=c;null!=m&&(y=rd({inputs:{x:c},backend:n,attrs:{perm:m}}),f=o.backend_util.getInnerMostAxes(f.length,c.shape.length)),o.backend_util.assertAxesAreInnerMostDims("all",f,y.shape.length);const[x,O]=o.backend_util.computeOutAndReduceShapes(y.shape,f),v=o.util.sizeFromShape(O),k=o.util.makeZerosTypedArray(o.util.sizeFromShape(x),y.dtype),w=n.data.get(y.dataId).values;for(let i=0;i<k.length;++i){const e=i*v;let t=w[e];for(let n=0;n<v;++n){const r=w[e+n];t=t&&r}k[i]=t}null!=m&&n.disposeIntermediateTensorInfo(y);const S=n.makeTensorInfo(x,y.dtype,k);if(d){const e=Vl({inputs:{x:S},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(x,h)}});return n.disposeIntermediateTensorInfo(S),e}return S}};const id={kernelName:o.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r;nl(c,"any");const h=o.util.parseAxisParam(l,c.shape);let f=h;const m=o.backend_util.getAxesPermutation(f,c.shape.length);let y=c;null!=m&&(y=rd({inputs:{x:c},backend:n,attrs:{perm:m}}),f=o.backend_util.getInnerMostAxes(f.length,c.shape.length)),o.backend_util.assertAxesAreInnerMostDims("any",f,y.shape.length);const[x,O]=o.backend_util.computeOutAndReduceShapes(y.shape,f),v=o.util.sizeFromShape(O),k=o.util.makeZerosTypedArray(o.util.sizeFromShape(x),y.dtype),w=n.data.get(y.dataId).values;for(let i=0;i<k.length;++i){const e=i*v;let t=w[e];for(let n=0;n<v;++n){const r=w[e+n];t=t||r}k[i]=t}null!=m&&n.disposeIntermediateTensorInfo(y);const S=n.makeTensorInfo(x,y.dtype,k);if(d){const e=Vl({inputs:{x:S},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(x,h)}});return n.disposeIntermediateTensorInfo(S),e}return S}};const od={kernelName:o.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l}=r;nl(c,"argMax");let d=o.util.parseAxisParam(l,c.shape);const h=o.backend_util.getAxesPermutation(d,c.shape.length);let f=c;const m=[];null!=h&&(f=rd({inputs:{x:c},backend:n,attrs:{perm:h}}),m.push(f),d=o.backend_util.getInnerMostAxes(d.length,f.shape.length)),d=[d[0]],o.backend_util.assertAxesAreInnerMostDims("argMax",d,f.shape.length);const[y,x]=o.backend_util.computeOutAndReduceShapes(f.shape,d),O=o.util.sizeFromShape(y),v=o.util.makeZerosTypedArray(O,"int32"),k=o.util.sizeFromShape(x),w=n.data.get(f.dataId).values;for(let i=0;i<v.length;++i){const e=i*k;let t=w[e],n=0;for(let r=0;r<k;++r){const o=w[e+r];o>t&&(t=o,n=r)}v[i]=n}return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,"int32",v)}};const ud={kernelName:o.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l}=r;nl(c,"argMin");let d=o.util.parseAxisParam(l,c.shape);const h=o.backend_util.getAxesPermutation(d,c.shape.length);let f=c;const m=[];null!=h&&(f=rd({inputs:{x:c},backend:n,attrs:{perm:h}}),m.push(f),d=o.backend_util.getInnerMostAxes(d.length,f.shape.length)),d=[d[0]],o.backend_util.assertAxesAreInnerMostDims("argMin",d,f.shape.length);const[y,x]=o.backend_util.computeOutAndReduceShapes(f.shape,d),O=o.util.sizeFromShape(y),v=o.util.makeZerosTypedArray(O,"int32"),k=o.util.sizeFromShape(x),w=n.data.get(f.dataId).values;for(let i=0;i<v.length;++i){const e=i*k;let t=w[e],n=0;for(let r=0;r<k;++r){const o=w[e+r];o<t&&(t=o,n=r)}v[i]=n}return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,"int32",v)}},cd=sl(o.Asin,(e=>Math.asin(e))),ld={kernelName:o.Asin,backendName:"cpu",kernelFunc:cd},hd=sl(o.Asinh,(e=>Math.asinh(e))),pd={kernelName:o.Asinh,backendName:"cpu",kernelFunc:hd},fd=sl(o.Atan,(e=>Math.atan(e))),md={kernelName:o.Atan,backendName:"cpu",kernelFunc:fd},bd=bl(((e,t)=>Math.atan2(e,t))),gd=Ml(o.Atan2,bd),yd={kernelName:o.Atan2,backendName:"cpu",kernelFunc:gd},xd=sl(o.Atanh,(e=>Math.atanh(e))),Od={kernelName:o.Atanh,backendName:"cpu",kernelFunc:xd};function vd(e,t,n,r,c,l){const d=c.strideHeight,h=c.strideWidth,f=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,O=c.padInfo.top,v=c.padInfo.left,k="max"===l?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,output=Object(o.buffer)(c.outShape,n),w=output.values,S=c.outShape[1]*c.outShape[2]*c.outShape[3],I=c.outShape[2]*c.outShape[3],N=c.outShape[3];for(let b=0;b<c.batchSize;++b){const t=b*S,n=b*r[0];for(let o=0;o<c.inChannels;++o)for(let S=0;S<c.outHeight;++S){const j=S*d-O,T=Math.max(0,j),C=Math.min(c.inHeight,y+j),$=t+S*I;for(let t=0;t<c.outWidth;++t){const d=t*h-v,y=Math.max(0,d),O=Math.min(c.inWidth,x+d);let S=k,I=0,j=0;for(let t=T;t<C;t+=f){const c=n+t*r[1];for(let t=y;t<O;t+=m){const n=e[c+t*r[2]+o];"max"===l&&n>S?S=n:"avg"===l&&(I+=n,j++)}if(isNaN(S))break}w[$+t*N+o]="avg"===l?I/j:S}}}return output}function kd(e,t,n,r,c=!1,l=!1){const d=Object(o.buffer)(r.outShape,"int32"),h=r.strideHeight,f=r.strideWidth,m=r.dilationHeight,y=r.dilationWidth,x=r.effectiveFilterHeight,O=r.effectiveFilterWidth,v=r.padInfo.top,k=r.padInfo.left,w=Object(o.buffer)(t,n,e);for(let b=0;b<r.batchSize;++b)for(let e=0;e<r.inChannels;++e)for(let t=0;t<r.outHeight;++t){const n=t*h-v;let o=n;for(;o<0;)o+=m;const S=Math.min(r.inHeight,x+n);for(let h=0;h<r.outWidth;++h){const x=h*f-k;let v=x;for(;v<0;)v+=y;const I=Math.min(r.inWidth,O+x);let N=Number.NEGATIVE_INFINITY,j=-1;for(let t=o;t<S;t+=m){const o=t-n;for(let n=v;n<I;n+=y){const d=n-x,h=w.get(b,t,n,e);h>N&&(N=h,j=c?l?((b*r.inHeight+t)*r.inWidth+n)*r.inChannels+e:(t*r.inWidth+n)*r.inChannels+e:o*O+d)}}d.set(j,b,t,h,e)}}return d}function wd(e,t,n,r,c,l){const d=c.strideDepth,h=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,O=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,w=c.padInfo.front,S=c.padInfo.top,I=c.padInfo.left,N="max"===l?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,output=Object(o.buffer)(c.outShape,n),j=output.values,T=c.outShape[1]*c.outShape[2]*c.outShape[3]*c.outShape[4],C=c.outShape[2]*c.outShape[3]*c.outShape[4],$=c.outShape[3]*c.outShape[4],E=c.outShape[4];for(let t=0;t<c.batchSize;++t){const n=t*T,o=t*r[0];for(let t=0;t<c.inChannels;++t)for(let T=0;T<c.outDepth;++T){const A=T*d-w;let R=A;for(;R<0;)R+=m;const _=Math.min(c.inDepth,O+A),F=n+T*C;for(let n=0;n<c.outHeight;++n){const d=n*h-S;let O=d;for(;O<0;)O+=y;const w=Math.min(c.inHeight,v+d),T=F+n*$;for(let n=0;n<c.outWidth;++n){const d=n*f-I;let h=d;for(;h<0;)h+=x;const v=Math.min(c.inWidth,k+d),S=T+n*E;let C=N,$=0,A=0;for(let n=R;n<_;n+=m){const c=o+n*r[1];for(let n=O;n<w;n+=y){const o=c+n*r[2];for(let n=h;n<v;n+=x){const c=e[o+n*r[3]+t];if("max"===l&&c>C?C=c:"avg"===l&&($+=c,A++),isNaN(C))break}if(isNaN(C))break}if(isNaN(C))break}j[S+t]="avg"===l?$/A:C}}}}return output}const Sd={kernelName:o.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t;nl(c,"avgPool");const{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=r;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(d,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`));const m=o.backend_util.computePool2DInfo(c.shape,l,d,1,h,f);let y;if(1===m.filterWidth&&1===m.filterHeight&&o.util.arraysEqual(m.inShape,m.outShape))y=hl({inputs:{x:c},backend:n});else{const e=n.data.get(c.dataId).values,t=o.util.computeStrides(c.shape),r=vd(e,c.shape,c.dtype,t,m,"avg");y=n.makeTensorInfo(m.outShape,c.dtype,r.values)}return y}};const Id={kernelName:o.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{filterSize:l,strides:d,pad:h,dimRoundingMode:f,dataFormat:m}=r;nl(c,"avgPool3d");const y=o.backend_util.computePool3DInfo(c.shape,l,d,1,h,f,m),x=wd(n.data.get(c.dataId).values,c.shape,c.dtype,o.util.computeStrides(c.shape),y,"avg");return n.makeTensorInfo(x.shape,"float32",x.values)}};const Nd={kernelName:o.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input}=t,{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=r;nl([c,input],"avgPool3DGrad");const m=o.backend_util.computePool3DInfo(input.shape,l,d,1,h,f),y=m.strideDepth,x=m.strideHeight,O=m.strideWidth,v=m.filterDepth,k=m.filterHeight,w=m.filterWidth,S=m.dilationDepth,I=m.dilationHeight,N=m.dilationWidth,j=m.effectiveFilterDepth,T=m.effectiveFilterHeight,C=m.effectiveFilterWidth,$=j-1-m.padInfo.front,E=C-1-m.padInfo.left,A=T-1-m.padInfo.top,R=Object(o.buffer)(input.shape,"float32"),_=1/(v*k*w),F=n.bufferSync(c);for(let e=0;e<m.batchSize;++e)for(let t=0;t<m.inChannels;++t)for(let n=0;n<m.inDepth;++n)for(let r=0;r<m.inHeight;++r)for(let o=0;o<m.inWidth;++o){const c=n-$,l=r-A,d=o-E;let h=0;for(let n=0;n<j;n+=S){const r=(c+n)/y;if(!(r<0||r>=m.outDepth||Math.floor(r)!==r))for(let n=0;n<T;n+=I){const o=(l+n)/x;if(!(o<0||o>=m.outHeight||Math.floor(o)!==o))for(let n=0;n<C;n+=N){const c=(d+n)/O;if(c<0||c>=m.outWidth||Math.floor(c)!==c)continue;h+=F.get(e,r,o,c,t)}}}R.set(h*_,e,n,r,o,t)}return n.makeTensorInfo(R.shape,R.dtype,R.values)}};const jd={kernelName:o.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input}=t,l=input;nl([c,input],"avgPoolGrad");const{filterSize:d,strides:h,pad:f}=r,m=o.backend_util.computePool2DInfo(l.shape,d,h,1,f),y=m.strideHeight,x=m.strideWidth,O=m.filterHeight,v=m.filterWidth,k=m.dilationHeight,w=m.dilationWidth,S=m.effectiveFilterHeight,I=m.effectiveFilterWidth,N=I-1-m.padInfo.left,j=S-1-m.padInfo.top,T=Object(o.buffer)(l.shape,"float32"),C=1/(O*v),$=n.data.get(c.dataId).values,E=Object(o.buffer)(c.shape,"float32",$);for(let b=0;b<m.batchSize;++b)for(let e=0;e<m.inChannels;++e)for(let t=0;t<m.inHeight;++t)for(let n=0;n<m.inWidth;++n){const r=t-j,o=n-N;let c=0;for(let t=0;t<S;t+=k){const n=(r+t)/y;if(!(n<0||n>=m.outHeight||Math.floor(n)!==n))for(let t=0;t<I;t+=w){const r=(o+t)/x;if(r<0||r>=m.outWidth||Math.floor(r)!==r)continue;c+=E.get(b,n,r,e)}}T.set(c*C,b,t,n,e)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Td={kernelName:o.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,scale:l,offset:d,mean:h,variance:f}=t;o.util.assert(h.shape.length===f.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.util.assert(null==d||h.shape.length===d.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.util.assert(null==l||h.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),nl([c,h,f,l,d],"batchNorm");let{varianceEpsilon:m}=r;null==m&&(m=.001);const y=n.data.get(c.dataId).values,x=n.data.get(h.dataId).values,O=n.data.get(f.dataId).values,v=l?n.data.get(l.dataId).values:new Float32Array([1]),k=d?n.data.get(d.dataId).values:new Float32Array([0]),w=new Float32Array(y.length),S=k.length,I=v.length,N=O.length,j=x.length;let T=0,C=0,$=0,E=0;for(let i=0;i<y.length;++i)w[i]=k[T++]+(y[i]-x[C++])*v[$++]/Math.sqrt(O[E++]+m),T>=S&&(T=0),C>=j&&(C=0),$>=I&&($=0),E>=N&&(E=0);return n.makeTensorInfo(c.shape,c.dtype,w)}};function Cd(e,t,n,r,c){const l=o.slice_util.isSliceContinous(r,t,n),d=o.util.sizeFromShape(n),h=o.util.computeStrides(r);if(l){const n=o.slice_util.computeFlatOffset(t,h);return"string"===c?e.slice(n,n+d):e.subarray(n,n+d)}const f="string"===c?o.backend_util.fromUint8ToStringArray(e):e,m=Object(o.buffer)(r,c,f),y=Object(o.buffer)(n,c);for(let i=0;i<y.size;++i){const e=y.indexToLoc(i),n=e.map(((e,n)=>e+t[n]));y.set(m.get(...n),...e)}return"string"===c?o.backend_util.fromStringArrayToUint8(y.values):y.values}function $d(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{begin:l,size:d}=r;nl(c,"slice");const[h,f]=o.slice_util.parseSliceParams(c,l,d);o.slice_util.assertParamsValid(c,h,f);const m=Cd(n.data.get(c.dataId).values,h,f,c.shape,c.dtype);return n.makeTensorInfo(f,c.dtype,m)}const Ed={kernelName:o.Slice,backendName:"cpu",kernelFunc:$d};const Ad={kernelName:o.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{blockShape:l,crops:d}=r;nl([c],"batchToSpaceND");const h=l.reduce(((a,b)=>a*b)),f=o.backend_util.getReshaped(c.shape,l,h),m=o.backend_util.getPermuted(f.length,l.length),y=o.backend_util.getReshapedPermuted(c.shape,l,h),x=o.backend_util.getSliceBeginCoords(d,l.length),O=o.backend_util.getSliceSize(y,d,l.length),v=Vl({inputs:{x:c},backend:n,attrs:{shape:f}}),k=rd({inputs:{x:v},backend:n,attrs:{perm:m}}),w=Vl({inputs:{x:k},backend:n,attrs:{shape:y}}),S=$d({inputs:{x:w},backend:n,attrs:{begin:x,size:O}});return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),S}};function Rd(e,t,n,r,c){const l=o.util.sizeFromShape(r),d=o.util.makeZerosTypedArray(c,n);for(let i=0;i<e.length;i++){const n=e[i];if(n<0)throw new Error("Input x must be non-negative!");n>=c||(d[n]+=l>0?t[i]:1)}return d}function _d(e,t,n,r=!1){const c=e.shape[0],l=e.shape[1],d=Object(o.buffer)([c,n],t.dtype);for(let i=0;i<c;i++)for(let o=0;o<l;o++){const c=e.get(i,o);if(c<0)throw new Error("Input x must be non-negative!");c>=n||(r?d.set(1,i,c):t.size>0?d.set(d.get(i,c)+t.get(i,o),i,c):d.set(d.get(i,c)+1,i,c))}return d}const Fd={kernelName:o.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:l}=r,d=Rd(n.data.get(o.dataId).values,n.data.get(c.dataId).values,c.dtype,c.shape,l);return n.makeTensorInfo([l],c.dtype,d)}};const Dd={kernelName:o.BroadcastArgs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:c}=t,l=n.data.get(r.dataId).values,d=n.data.get(c.dataId).values,h=o.backend_util.assertAndGetBroadcastShape(Array.from(l),Array.from(d));return n.makeTensorInfo([h.length],"int32",Int32Array.from(h))}},Md=Sl((e=>Math.ceil(e))),zd=il(o.Ceil,Md),Ld={kernelName:o.Ceil,backendName:"cpu",kernelFunc:zd},Pd=sl(o.ClipByValue,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),Bd={kernelName:o.ClipByValue,backendName:"cpu",kernelFunc:Pd},Wd={kernelName:o.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(o.util.sizeFromShape(t.shape)),c=n.data.get(t.dataId),l=c.complexTensorInfos.real,d=c.complexTensorInfos.imag,h=n.data.get(l.dataId).values,f=n.data.get(d.dataId).values;for(let i=0;i<h.length;i++){const e=h[i],t=f[i];r[i]=Math.hypot(e,t)}return n.makeOutput(r,t.shape,"float32")}};function Vd(e,t,n,r){const c=o.util.getArrayFromDType(n,o.util.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((input=>{const e=o.util.sizeFromShape(input.shape);c.set(input.vals,t),t+=e}))}else{let r=0;e.forEach((input=>{const e="string"===n?o.backend_util.fromUint8ToStringArray(input.vals):input.vals;let l=0;for(let n=0;n<input.shape[0];++n){const o=n*t[1]+r;for(let col=0;col<input.shape[1];++col)c[o+col]=e[l++]}r+=input.shape[1]}))}return c}function Ud(e){const{inputs:t,backend:n}=e,{input:input}=t,r=n.data.get(input.dataId).complexTensorInfos.imag,o=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,o)}const Gd={kernelName:o.Imag,backendName:"cpu",kernelFunc:Ud};function Hd(e){const{inputs:t,backend:n,attrs:r}=e,{axis:c}=r,l=o.util.parseAxisParam(c,t[0].shape)[0];let d=o.backend_util.computeOutShape(t.map((e=>e.shape)),l);if(0===o.util.sizeFromShape(d))return n.makeTensorInfo(d,t[0].dtype,[]);const h=t.filter((e=>o.util.sizeFromShape(e.shape)>0));if(1===h.length)return hl({inputs:{x:h[0]},backend:n});const f=h.map((e=>e.shape));if(o.backend_util.assertParamsConsistent(f,l),"complex64"===h[0].dtype){const e=h.map((e=>Al({inputs:{input:e},backend:n}))),t=h.map((e=>Ud({inputs:{input:e},backend:n}))),r=Hd({inputs:e,backend:n,attrs:{axis:l}}),o=Hd({inputs:t,backend:n,attrs:{axis:l}}),c=Cl({inputs:{real:r,imag:o},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((i=>n.disposeIntermediateTensorInfo(i))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),c}const m=h.map((e=>{const t=o.util.sizeFromShape(e.shape.slice(l));return Vl({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),y=m.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));d=o.backend_util.computeOutShape(m.map((e=>e.shape)),1);const x=1===m[0].shape[0],O=Vd(y,d,t[0].dtype,x),v=o.backend_util.computeOutShape(h.map((e=>e.shape)),l),k=n.makeTensorInfo(v,t[0].dtype,O);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),k}const qd={kernelName:o.Concat,backendName:"cpu",kernelFunc:Hd};function Kd(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dataFormat:h,dilations:f,dimRoundingMode:m}=r;nl([c,filter],"conv2d");const y=o.backend_util.convertConv2DDataFormat(h),x=o.backend_util.computeConv2DInfo(c.shape,filter.shape,l,f,d,m,!1,y),O=x.filterHeight,v=x.filterWidth,k=x.dilationHeight,w=x.dilationWidth,S=x.padInfo.left,I=x.padInfo.top,N="channelsLast"===x.dataFormat,j=new o.TensorBuffer(x.outShape,c.dtype),T=o.util.computeStrides(c.shape),C=o.util.computeStrides(filter.shape),$=T[0],E=N?T[1]:T[2],A=N?T[2]:1,R=N?1:T[1],_=j.strides[0],F=N?j.strides[1]:j.strides[2],D=N?j.strides[2]:1,M=N?1:j.strides[1],z=n.data.get(c.dataId).values,L=n.data.get(filter.dataId).values,P=j.values;for(let b=0;b<x.batchSize;++b){const e=b*$,t=b*_;for(let n=0;n<x.outHeight;++n){const r=t+n*F,o=n*x.strideHeight-I;for(let t=0;t<O;++t){const n=o+t*k;if(n<0||n>=x.inHeight)continue;const c=t*C[0],l=e+n*E;for(let e=0;e<x.outWidth;++e){const t=r+e*D,n=e*x.strideWidth-S;for(let e=0;e<v;++e){const r=n+e*w;if(r<0||r>=x.inWidth)continue;const o=l+r*A;let d=c+e*C[1];for(let e=0;e<x.inChannels;++e){const n=z[o+e*R];for(let e=0;e<x.outChannels;++e)P[t+e*M]+=n*L[d+e];d+=x.outChannels}}}}}}return n.makeTensorInfo(j.shape,j.dtype,P)}const Xd={kernelName:o.Conv2D,backendName:"cpu",kernelFunc:Kd};const Yd={kernelName:o.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,dy:l}=t,{strides:d,pad:h,dataFormat:f,dimRoundingMode:m,filterShape:y}=r;nl([c,l],"conv2dBackpropFilter");const x=o.backend_util.convertConv2DDataFormat(f),O=o.backend_util.computeConv2DInfo(c.shape,y,d,1,h,m,!1,x),{strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:S}=O,I="channelsLast"===O.dataFormat,N=new o.TensorBuffer(O.filterShape,"float32"),j=O.padInfo.left,T=O.padInfo.top,C=n.data.get(c.dataId).values,$=n.data.get(l.dataId).values,E=new o.TensorBuffer(c.shape,c.dtype,C),A=new o.TensorBuffer(l.shape,l.dtype,$);for(let e=0;e<w;++e){const t=Math.max(0,Math.ceil((T-e)/v)),n=Math.min(O.outHeight,(O.inHeight+T-e)/v);for(let r=0;r<S;++r){const o=Math.max(0,Math.ceil((j-r)/k)),c=Math.min(O.outWidth,(O.inWidth+j-r)/k);for(let l=0;l<O.inChannels;++l)for(let d=0;d<O.outChannels;++d){let h=0;for(let b=0;b<O.batchSize;++b)for(let f=t;f<n;++f){const t=e+f*v-T;for(let e=o;e<c;++e){const n=r+e*k-j;h+=I?E.get(b,t,n,l)*A.get(b,f,e,d):E.get(b,l,t,n)*A.get(b,d,f,e)}}N.set(h,e,r,l,d)}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Zd={kernelName:o.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,filter:filter}=t,{inputShape:l,strides:d,pad:h,dataFormat:f,dimRoundingMode:m}=r;nl([c,filter],"conv2dBackpropInput");const y=o.util.computeStrides(filter.shape),x=o.util.computeStrides(c.shape);let O=o.backend_util.convertConv2DDataFormat(f);const v=o.backend_util.computeConv2DInfo(l,filter.shape,d,1,h,m,!1,O),k=new o.TensorBuffer(v.inShape,"float32"),w=k.values,S=n.data.get(c.dataId).values,I=n.data.get(filter.dataId).values,[N,j,T]=y,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:_,outChannels:F,outHeight:D,outWidth:M,strideHeight:z,strideWidth:L}=v;O=v.dataFormat;const P=$-1-v.padInfo.top,B=E-1-v.padInfo.left,W="channelsLast"===O,V=k.strides[0],U=W?k.strides[1]:k.strides[2],G=W?k.strides[2]:1,H=W?1:k.strides[1],K=x[0],X=W?x[1]:x[2],Y=W?x[2]:1,Z=W?1:x[1];for(let b=0;b<C;++b)for(let e=0;e<A;++e)for(let t=0;t<R;++t){const n=t-P,r=Math.max(0,Math.ceil(n/z)),o=Math.min(D,($+n)/z);for(let c=0;c<_;++c){const l=c-B,d=Math.max(0,Math.ceil(l/L)),h=Math.min(M,(E+l)/L);let f=0;for(let t=r;t<o;++t){const r=t*z-n;for(let n=d;n<h;++n){const o=K*b+X*t+Y*n,c=N*($-1-r)+j*(E-1-(n*L-l))+T*e;for(let e=0;e<F;++e){f+=S[o+Z*e]*I[c+e]}}}w[V*b+U*t+G*c+H*e]=f}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const Jd={kernelName:o.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dilations:h}=r;nl([c,filter],"conv3d");const f=o.backend_util.computeConv3DInfo(c.shape,filter.shape,l,h,d),{filterDepth:m,filterHeight:y,filterWidth:x,dilationDepth:O,dilationHeight:v,dilationWidth:k,padInfo:w}=f,S=w.front,I=w.left,N=w.top,j=new o.TensorBuffer(f.outShape,c.dtype),T=n.data.get(c.dataId).values,C=n.data.get(filter.dataId).values,$=j.values,E=o.util.computeStrides(c.shape),A=o.util.computeStrides(filter.shape);for(let b=0;b<f.batchSize;++b){const e=b*E[0],t=b*j.strides[0];for(let n=0;n<f.outDepth;++n){const r=t+n*j.strides[1],o=n*f.strideDepth-S;for(let t=0;t<m;++t){const n=o+t*O;if(n<0||n>=f.inDepth)continue;const c=t*A[0],l=e+n*E[1];for(let e=0;e<f.outHeight;++e){const t=r+e*j.strides[2],n=e*f.strideHeight-N;for(let e=0;e<y;++e){const r=n+e*v;if(r<0||r>=f.inHeight)continue;const o=c+e*A[1],d=l+r*E[2];for(let e=0;e<f.outWidth;++e){const n=t+e*f.outChannels,r=e*f.strideWidth-I;for(let e=0;e<x;++e){const t=r+e*k;if(t<0||t>=f.inWidth)continue;const c=o+e*A[2],l=d+t*f.inChannels;let h=c;for(let e=0;e<f.inChannels;++e){const t=T[l+e];for(let e=0;e<f.outChannels;++e)$[n+e]+=t*C[h+e];h+=f.outChannels}}}}}}}}return n.makeTensorInfo(j.shape,j.dtype,j.values)}};const Qd={kernelName:o.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,dy:l}=t,{strides:d,pad:h,filterShape:f}=r;nl([c,l],"conv3dBackpropFilterV2");const m=o.util.computeStrides(c.shape),y=o.util.computeStrides(l.shape),x=o.backend_util.computeConv3DInfo(c.shape,f,d,1,h),O=x.strideDepth,v=x.strideHeight,k=x.strideWidth,w=x.filterDepth,S=x.filterHeight,I=x.filterWidth,N=new o.TensorBuffer(x.filterShape,"float32"),j=N.values,[T,C,$,E]=N.strides,A=n.data.get(l.dataId).values,[R,_,F,D]=y,M=n.data.get(c.dataId).values,[z,L,P,B]=m,W=x.padInfo.front,V=x.padInfo.left,U=x.padInfo.top;for(let e=0;e<w;++e){const t=Math.max(0,Math.ceil((W-e)/O)),n=Math.min(x.outDepth,(x.inDepth+W-e)/O),r=e*T;for(let o=0;o<S;++o){const c=Math.max(0,Math.ceil((U-o)/v)),l=Math.min(x.outHeight,(x.inHeight+U-o)/v),d=o*C+r;for(let r=0;r<I;++r){const h=Math.max(0,Math.ceil((V-r)/k)),f=Math.min(x.outWidth,(x.inWidth+V-r)/k),m=r*$+d;for(let d=0;d<x.inChannels;++d){const y=d*E+m;for(let m=0;m<x.outChannels;++m){let w=0;for(let b=0;b<x.batchSize;++b){const y=b*z,x=b*R;for(let S=t;S<n;++S){const t=(e+S*O-W)*L+y,n=S*_+x;for(let e=c;e<l;++e){const c=(o+e*v-U)*P+t,l=e*F+n;for(let e=h;e<f;++e){const t=e*D+l;w+=M[(r+e*k-V)*B+c+d]*A[t+m]}}}}j[y+m]=w}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const eh={kernelName:o.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,filter:filter}=t,{pad:l,strides:d,inputShape:h}=r;nl([c],"conv3dBackpropInputV2");const f=o.util.computeStrides(c.shape),m=o.util.computeStrides(filter.shape),y=o.backend_util.computeConv3DInfo(h,filter.shape,d,1,l),x=new o.TensorBuffer(y.inShape,"float32"),O=x.values,[v,k,w,S]=x.strides,I=n.data.get(c.dataId).values,[N,j,T,C]=f,$=n.data.get(filter.dataId).values,[E,A,R,_]=m,{batchSize:F,filterDepth:D,filterHeight:M,filterWidth:z,inChannels:L,inDepth:P,inHeight:B,inWidth:W,outChannels:V,outDepth:U,outHeight:G,outWidth:H,strideDepth:K,strideHeight:X,strideWidth:Y}=y,Z=D-1-y.padInfo.front,J=M-1-y.padInfo.top,Q=z-1-y.padInfo.left;for(let b=0;b<F;++b)for(let e=0;e<L;++e)for(let t=0;t<P;++t){const n=t-Z,r=Math.max(0,Math.ceil(n/K)),o=Math.min(U,(D+n)/K);for(let c=0;c<B;++c){const l=c-J,d=Math.max(0,Math.ceil(l/X)),h=Math.min(G,(M+l)/X);for(let f=0;f<W;++f){const m=f-Q,y=Math.max(0,Math.ceil(m/Y)),x=Math.min(H,(z+m)/Y);let F=0;for(let t=r;t<o;++t){const r=t*K-n;for(let n=d;n<h;++n){const o=n*X-l;for(let c=y;c<x;++c){const l=N*b+j*t+T*n+C*c,d=E*(D-1-r)+A*(M-1-o)+R*(z-1-(c*Y-m))+_*e;for(let e=0;e<V;++e){F+=I[l+e]*$[d+e]}}}}O[v*b+k*t+w*c+S*f+e]=F}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},nh=sl(o.Cos,(e=>Math.cos(e))),rh={kernelName:o.Cos,backendName:"cpu",kernelFunc:nh},ah=sl(o.Cosh,(e=>Math.cosh(e))),sh={kernelName:o.Cosh,backendName:"cpu",kernelFunc:ah};const ih={kernelName:o.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:image,boxes:c,boxInd:l}=t,{cropSize:d,method:h,extrapolationValue:f}=r,[m,y,x,O]=image.shape,v=c.shape[0],[k,w]=d,output=Object(o.buffer)([v,k,w,O],"float32"),S=n.data.get(c.dataId).values,I=n.data.get(l.dataId).values,N=n.data.get(image.dataId).values,j=o.util.computeStrides(image.shape),T=o.util.computeStrides(output.shape);for(let b=0;b<v;b++){const e=4*b,t=S[e],n=S[e+1],r=S[e+2],o=S[e+3],c=I[b];if(c>=m)continue;const l=k>1?(r-t)*(y-1)/(k-1):0,d=w>1?(o-n)*(x-1)/(w-1):0;for(let e=0;e<k;e++){const m=k>1?t*(y-1)+e*l:.5*(t+r)*(y-1);if(m<0||m>y-1)for(let t=0;t<w;t++)for(let n=0;n<O;n++){const r=n+t*T[2]+e*T[1]+b*T[0];output.values[r]=f}else if("bilinear"===h){const t=Math.floor(m),r=Math.ceil(m),l=m-t;for(let h=0;h<w;h++){const m=w>1?n*(x-1)+h*d:.5*(n+o)*(x-1);if(m<0||m>x-1){for(let t=0;t<O;t++){const n=t+h*T[2]+e*T[1]+b*T[0];output.values[n]=f}continue}const y=Math.floor(m),v=Math.ceil(m),k=m-y;for(let n=0;n<O;n++){let o=n+y*j[2]+t*j[1]+c*j[0];const d=N[o];o=n+v*j[2]+t*j[1]+c*j[0];const f=N[o];o=n+y*j[2]+r*j[1]+c*j[0];const m=N[o];o=n+v*j[2]+r*j[1]+c*j[0];const x=d+(f-d)*k,O=m+(N[o]-m)*k;o=n+h*T[2]+e*T[1]+b*T[0],output.values[o]=x+(O-x)*l}}}else for(let t=0;t<w;++t){const r=w>1?n*(x-1)+t*d:.5*(n+o)*(x-1);if(r<0||r>x-1){for(let n=0;n<O;n++){const r=n+t*T[2]+e*T[1]+b*T[0];output.values[r]=f}continue}const l=Math.round(r),h=Math.round(m);for(let n=0;n<O;n++){const r=n+l*j[2]+h*j[1]+c*j[0],o=n+t*T[2]+e*T[1]+b*T[0];output.values[o]=N[r]}}}}return n.makeTensorInfo(output.shape,output.dtype,output.values)}};const oh={kernelName:o.Cumprod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,exclusive:d,reverse:h}=r;nl(c,"cumprod");const f=o.backend_util.getAxesPermutation([l],c.shape.length);let m=c;null!=f&&(m=rd({inputs:{x:c},backend:n,attrs:{perm:f}}));const y=o.backend_util.getInnerMostAxes(1,c.shape.length)[0];if(y!==m.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${m.shape.length-1} but got axis=${y}`);const x=Object(o.upcastType)(m.dtype,"int32"),O=o.util.makeOnesTypedArray(o.util.sizeFromShape(m.shape),x),v=n.data.get(m.dataId).values,k=m.shape[m.shape.length-1],w=h?(i,e)=>i+k-e-1:(i,e)=>i+e;for(let i=0;i<v.length;i+=k)for(let e=0;e<k;e++){const t=w(i,e);if(0===e)O[t]=d?1:v[t];else{const n=w(i,e-1);O[t]=d?v[n]*O[n]:v[t]*O[n]}}const S=n.makeTensorInfo(m.shape,x,O);if(null!=f){const e=rd({inputs:{x:S},backend:n,attrs:{perm:o.backend_util.getUndoAxesPermutation(f)}});return n.disposeIntermediateTensorInfo(S),n.disposeIntermediateTensorInfo(m),e}return S}};const uh={kernelName:o.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,exclusive:d,reverse:h}=r;nl(c,"cumsum");const f=o.backend_util.getAxesPermutation([l],c.shape.length);let m=c;null!=f&&(m=rd({inputs:{x:c},backend:n,attrs:{perm:f}}));const y=o.backend_util.getInnerMostAxes(1,c.shape.length)[0];if(y!==m.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${m.shape.length-1} but got axis=${y}`);const x=Object(o.upcastType)(m.dtype,"int32"),O=o.util.makeZerosTypedArray(o.util.sizeFromShape(m.shape),x),v=n.data.get(m.dataId).values,k=m.shape[m.shape.length-1],w=h?(i,e)=>i+k-e-1:(i,e)=>i+e;for(let i=0;i<v.length;i+=k)for(let e=0;e<k;e++){const t=w(i,e);if(0===e)O[t]=d?0:v[t];else{const n=w(i,e-1);O[t]=d?v[n]+O[n]:v[t]+O[n]}}const S=n.makeTensorInfo(m.shape,x,O);if(null!=f){const e=rd({inputs:{x:S},backend:n,attrs:{perm:o.backend_util.getUndoAxesPermutation(f)}});return n.disposeIntermediateTensorInfo(S),n.disposeIntermediateTensorInfo(m),e}return S}};const ch={kernelName:o.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:l,binaryOutput:d}=r;if(1===o.shape.length){const e=Rd(n.data.get(o.dataId).values,n.data.get(c.dataId).values,c.dtype,c.shape,l);return n.makeTensorInfo([l],c.dtype,e)}if(2===o.shape.length){const e=_d(n.bufferSync(o),n.bufferSync(c),l,d);return n.makeTensorInfo(e.shape,c.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`)}};const lh={kernelName:o.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{blockSize:l,dataFormat:d}=r;o.util.assert("NHWC"===d,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${d}`));const h=c.shape[0],f=c.shape[1],m=c.shape[2],y=c.shape[3],x=f*l,O=m*l,v=y/(l*l),k=n.data.get(c.dataId).values,w=new Float32Array(h*x*O*v);let S=0;for(let b=0;b<h;++b)for(let e=0;e<x;++e){const t=Math.floor(e/l),n=e%l;for(let e=0;e<O;++e){const r=Math.floor(e/l),o=(n*l+e%l)*v;for(let e=0;e<v;++e){const n=e+o+y*(r+m*(t+f*b));w[S++]=k[n]}}}return n.makeTensorInfo([h,x,O,v],c.dtype,w)}};function dh(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dilations:h,dimRoundingMode:f}=r;nl([c,filter],"depthwiseConv2DNative");const m=o.util.computeStrides(c.shape),y=o.util.computeStrides(filter.shape);let x=h;null==x&&(x=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(l,x),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${x}'`));const O=o.backend_util.computeConv2DInfo(c.shape,filter.shape,l,x,d,f,!0),{filterHeight:v,filterWidth:k,dilationHeight:w,dilationWidth:S,padInfo:I}=O,N=I.left,j=I.top,T=O.outChannels/O.inChannels,C=new o.TensorBuffer(O.outShape,c.dtype),$=n.data.get(c.dataId).values,E=n.data.get(filter.dataId).values,A=C.values;for(let b=0;b<O.batchSize;++b){const e=b*m[0],t=b*C.strides[0];for(let n=0;n<O.outHeight;++n){const r=t+n*C.strides[1],o=n*O.strideHeight-j;for(let t=0;t<v;++t){const n=o+t*w;if(n<0||n>=O.inHeight)continue;const c=t*y[0],l=e+n*m[1];for(let e=0;e<O.outWidth;++e){const t=r+e*C.strides[2],n=e*O.strideWidth-N;for(let e=0;e<k;++e){const r=n+e*S;if(r<0||r>=O.inWidth)continue;const o=c+e*y[1],d=l+r*O.inChannels;let h=t,f=o;for(let e=0;e<O.inChannels;++e){const t=$[d+e];for(let q=0;q<T;++q)A[h+q]+=t*E[f+q];h+=T,f+=T}}}}}}return n.makeTensorInfo(C.shape,C.dtype,C.values)}const hh={kernelName:o.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:dh};const ph={kernelName:o.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,dy:l}=t,{strides:d,dilations:h,pad:f,dimRoundingMode:m,filterShape:y}=r;nl([c,l],"depthwiseConv2dNativeBackpropFilter");const x=o.backend_util.computeConv2DInfo(c.shape,y,d,h,f,m,!0),{strideHeight:O,strideWidth:v,filterHeight:k,filterWidth:w}=x,S=new o.TensorBuffer(x.filterShape,"float32"),I=x.padInfo.left,N=x.padInfo.top,j=x.outChannels/x.inChannels,T=n.data.get(c.dataId).values,C=new o.TensorBuffer(c.shape,c.dtype,T),$=n.data.get(l.dataId).values,E=new o.TensorBuffer(l.shape,l.dtype,$);for(let e=0;e<k;++e){const t=Math.max(0,Math.ceil((N-e)/O)),n=Math.min(x.outHeight,(x.inHeight+N-e)/O);for(let r=0;r<w;++r){const o=Math.max(0,Math.ceil((I-r)/v)),c=Math.min(x.outWidth,(x.inWidth+I-r)/v);for(let l=0;l<x.outChannels;++l){const d=Math.trunc(l/j),h=l%j;let f=0;for(let b=0;b<x.batchSize;++b)for(let h=t;h<n;++h){const t=e+h*O-N;for(let e=o;e<c;++e){const n=r+e*v-I;f+=C.get(b,t,n,d)*E.get(b,h,e,l)}}S.set(f,e,r,d,h)}}}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const fh={kernelName:o.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,filter:filter}=t,{strides:l,dilations:d,pad:h,dimRoundingMode:f,inputShape:m}=r;nl([c,filter],"depthwiseConv2DNativeBackpropInput");const y=o.util.computeStrides(c.shape),x=o.util.computeStrides(filter.shape),O=o.backend_util.computeConv2DInfo(m,filter.shape,l,d,h,f,!0),v=new o.TensorBuffer(O.inShape,"float32"),k=v.values,[w,S,I]=v.strides,N=n.data.get(c.dataId).values,[j,T,C]=y,$=n.data.get(filter.dataId).values,[E,A,R]=x,{batchSize:_,filterHeight:F,filterWidth:D,inChannels:M,inHeight:z,inWidth:L,outChannels:P,outHeight:B,outWidth:W,strideHeight:V,strideWidth:U}=O,G=F-1-O.padInfo.top,H=D-1-O.padInfo.left,K=P/M;for(let b=0;b<_;++b)for(let e=0;e<M;++e)for(let t=0;t<z;++t){const n=t-G,r=Math.max(0,Math.ceil(n/V)),o=Math.min(B,(F+n)/V);for(let c=0;c<L;++c){const l=c-H,d=Math.max(0,Math.ceil(l/U)),h=Math.min(W,(D+l)/U);let f=0;for(let t=r;t<o;++t){const r=t*V-n;for(let n=d;n<h;++n){const o=j*b+T*t+C*n,c=E*(F-1-r)+A*(D-1-(n*U-l))+R*e;for(let t=0;t<K;++t){f+=N[o+(e*K+t)]*$[c+t]}}}k[w*b+S*t+I*c+e]=f}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const mh={kernelName:o.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,c=o.util.sizeFromShape(r.shape),l=n.data.get(r.dataId).values,d=Object(o.buffer)([c,c],r.dtype),h=d.values;for(let i=0;i<l.length;i++)h[i*c+i]=l[i];const f=[...r.shape,...r.shape];return n.makeTensorInfo(f,d.dtype,d.values)}},bh={kernelName:o.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:filter}=e,{strides:c,pad:l,dilations:d}=n,h=t,f=h.data.get(r.dataId).values,m=r.shape.length,y=h.data.get(filter.dataId).values,x=filter.shape.length,{batchSize:O,inHeight:v,inWidth:k,inChannels:w,outHeight:S,outWidth:I,padInfo:N,strideHeight:j,strideWidth:T,filterHeight:C,filterWidth:$,dilationHeight:E,dilationWidth:A,outShape:R}=o.backend_util.computeDilation2DInfo(r.shape,filter.shape,c,l,"NHWC",d),_=o.util.sizeFromShape(R),F=R.length,D=o.util.getArrayFromDType(r.dtype,_);for(let b=0;b<O;++b)for(let e=0;e<S;++e){const t=e*j-N.top;for(let n=0;n<I;++n){const c=n*T-N.left;for(let l=0;l<w;++l){let d=Number.MIN_SAFE_INTEGER;for(let e=0;e<C;++e){const n=t+e*E;if(n>=0&&n<v)for(let t=0;t<$;++t){const h=c+t*A;if(h>=0&&h<k){const c=o.util.locToIndex([b,n,h,l],m,o.util.computeStrides(r.shape)),O=o.util.locToIndex([e,t,l],x,o.util.computeStrides(filter.shape)),v=f[c]+y[O];v>d&&(d=v)}}}D[o.util.locToIndex([b,e,n,l],F,o.util.computeStrides(R))]=d}}}return{dataId:h.write(o.util.toTypedArray(D,r.dtype),R,r.dtype),shape:R,dtype:r.dtype}}},gh={kernelName:o.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:filter,dy:c}=e,{strides:l,pad:d,dilations:h}=n,f=t,m=o.util.toNestedArray(r.shape,f.data.get(r.dataId).values),y=o.util.toNestedArray(filter.shape,f.data.get(filter.dataId).values),{batchSize:x,inHeight:O,inWidth:v,inChannels:k,outHeight:w,outWidth:S,padInfo:I,strideHeight:N,strideWidth:j,filterHeight:T,filterWidth:C,dilationHeight:$,dilationWidth:E,outShape:A}=o.backend_util.computeDilation2DInfo(r.shape,filter.shape,l,d,"NHWC",h);o.util.assert(c.rank===A.length,(()=>`Error in ${o.Dilation2DBackpropFilter}, dy must have the same rank as output ${A.length}, but got ${c.rank}`));const R=o.util.toNestedArray(A,f.data.get(c.dataId).values),_=o.util.makeZerosNestedTypedArray(filter.shape,filter.dtype);for(let b=0;b<x;++b)for(let e=0;e<w;++e){const t=e*N-I.top;for(let n=0;n<S;++n){const r=n*j-I.left;for(let o=0;o<k;++o){let c=Number.MIN_SAFE_INTEGER,l=0,d=0;for(let e=0;e<T;++e){const n=t+e*$;if(n>=0&&n<O)for(let t=0;t<C;++t){const h=r+t*E;if(h>=0&&h<v){const r=m[b][n][h][o]+y[e][t][o];r>c&&(c=r,l=e,d=t)}}}_[l][d][o]+=R[b][e][n][o]}}}return{dataId:f.write(o.util.toTypedArray(_,r.dtype),filter.shape,filter.dtype),shape:filter.shape,dtype:filter.dtype}}},yh={kernelName:o.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:filter,dy:c}=e,{strides:l,pad:d,dilations:h}=n,f=t,m=o.util.toNestedArray(r.shape,f.data.get(r.dataId).values),y=o.util.toNestedArray(filter.shape,f.data.get(filter.dataId).values),{batchSize:x,inHeight:O,inWidth:v,inChannels:k,outHeight:w,outWidth:S,padInfo:I,strideHeight:N,strideWidth:j,filterHeight:T,filterWidth:C,dilationHeight:$,dilationWidth:E,outShape:A}=o.backend_util.computeDilation2DInfo(r.shape,filter.shape,l,d,"NHWC",h);o.util.assert(c.rank===A.length,(()=>`Error in ${o.Dilation2DBackpropInput}, dy must have the same rank as output ${A.length}, but got ${c.rank}`));const R=o.util.toNestedArray(A,f.data.get(c.dataId).values),_=o.util.makeZerosNestedTypedArray(r.shape,r.dtype);for(let b=0;b<x;++b)for(let e=0;e<w;++e){const t=e*N-I.top;for(let n=0;n<S;++n){const r=n*j-I.left;for(let o=0;o<k;++o){let c=Number.MIN_SAFE_INTEGER,l=t<0?0:t,d=r<0?0:r;for(let e=0;e<T;++e){const n=t+e*$;if(n>=0&&n<O)for(let t=0;t<C;++t){const h=r+t*E;if(h>=0&&h<v){const r=m[b][n][h][o]+y[e][t][o];r>c&&(c=r,l=n,d=h)}}}_[b][l][d][o]+=R[b][e][n][o]}}}return{dataId:f.write(o.util.toTypedArray(_,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},xh=bl(((e,t)=>e*t)),Oh=zl(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),vh=Ml(o.Multiply,xh,Oh),kh={kernelName:o.Multiply,backendName:"cpu",kernelFunc:vh};function wh(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r;let h;nl(c,"sum"),h="bool"===c.dtype?Fl({inputs:{x:c},backend:n,attrs:{dtype:"int32"}}):hl({inputs:{x:c},backend:n});const f=h.shape.length,m=o.util.parseAxisParam(l,h.shape),y=o.backend_util.getAxesPermutation(m,f);let x=m,O=h;null!=y&&(O=rd({inputs:{x:h},backend:n,attrs:{perm:y}}),x=o.backend_util.getInnerMostAxes(x.length,f)),o.backend_util.assertAxesAreInnerMostDims("sum",x,O.shape.length);const[v,k]=o.backend_util.computeOutAndReduceShapes(O.shape,x);let w=El(n,v,o.backend_util.upcastType(O.dtype,"int32"));const S=o.util.sizeFromShape(k),I=n.data.get(w.dataId).values,N=n.data.get(O.dataId).values;for(let i=0;i<I.length;++i){const e=i*S;let t=0;for(let n=0;n<S;++n)t+=N[e+n];I[i]=t}if(d){const e=w;w=Vl({inputs:{x:w},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(w.shape,m)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(h),null!=y&&n.disposeIntermediateTensorInfo(O),w}const Sh={kernelName:o.Sum,backendName:"cpu",kernelFunc:wh};const Ih={kernelName:o.Einsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:c}=r,l=t,{allDims:d,summedDims:h,idDims:f}=o.backend_util.decodeEinsumEquation(c,l.length);o.backend_util.checkEinsumDimSizes(d.length,f,l);const{path:path,steps:m}=o.backend_util.getEinsumComputePath(h,f),y=m.length;let x=null,O=d.length;const v=[];for(let i=0;i<y;++i){for(const e of m[i]){const{permutationIndices:t,expandDims:r}=o.backend_util.getEinsumPermutation(O,f[e]);let c;o.backend_util.isIdentityPermutation(t)?c=l[e]:(c=rd({inputs:{x:l[e]},backend:n,attrs:{perm:t}}),v.push(c));const d=c.shape.slice();for(let e=0;e<r.length;++e)d.splice(r[e],0,1);o.util.arraysEqual(c.shape,d)||(c=Vl({inputs:{x:c},backend:n,attrs:{shape:d}}),v.push(c)),null===x?x=c:(x=vh({inputs:{a:c,b:x},backend:n}),v.push(x))}i<y-1&&(path[i]>=0&&(x=wh({inputs:{x:x},backend:n,attrs:{axis:path[i]-(d.length-O),keepDims:!1}}),v.push(x)),O--)}for(const e of v)e!==x&&n.disposeIntermediateTensorInfo(e);return x}};const Nh={kernelName:o.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:c}=t;nl([r,c],"eluGrad");const l=new Float32Array(o.util.sizeFromShape(c.shape)),d=n.data.get(c.dataId).values,h=n.data.get(r.dataId).values;for(let i=0;i<d.length;++i){const e=d[i];l[i]=e>=1?h[i]:h[i]*(e+1)}return n.makeTensorInfo(c.shape,"float32",l)}},jh=bl(((a,b)=>a===b?1:0)),Th=Ml(o.Equal,jh,null,"bool"),Ch={kernelName:o.Equal,backendName:"cpu",kernelFunc:Th},$h=o.backend_util.ERF_P,Eh=o.backend_util.ERF_A1,Ah=o.backend_util.ERF_A2,Rh=o.backend_util.ERF_A3,_h=o.backend_util.ERF_A4,Fh=o.backend_util.ERF_A5,Dh=sl(o.Erf,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+$h*n);return t*(1-((((Fh*r+_h)*r+Rh)*r+Ah)*r+Eh)*r*Math.exp(-n*n))})),Mh={kernelName:o.Erf,backendName:"cpu",kernelFunc:Dh},zh=Sl((e=>Math.exp(e))),Lh=il(o.Exp,zh,"float32"),Ph={kernelName:o.Exp,backendName:"cpu",kernelFunc:Lh};function Bh(e){const{inputs:t,backend:n,attrs:r}=e,{input:input}=t,{dim:c}=r,l=input.shape.length,d=input.shape.slice();let h=c;return c<0&&(o.util.assert(-(l+1)<=c,(()=>`Axis must be in the interval [${-(l+1)}, ${l}]`)),h=l+c+1),d.splice(h,0,1),Vl({inputs:{x:input},backend:n,attrs:{shape:d}})}const Wh={kernelName:o.ExpandDims,backendName:"cpu",kernelFunc:Bh},Vh=Sl((e=>Math.expm1(e))),Uh=il(o.Expm1,Vh),Gh={kernelName:o.Expm1,backendName:"cpu",kernelFunc:Uh},Hh=bl(((a,b)=>a/b)),qh=Ml(o.RealDiv,Hh),Kh={kernelName:o.RealDiv,backendName:"cpu",kernelFunc:qh},Xh=bl(((e,t)=>e-t)),Yh=zl(((e,t,n,r)=>({real:e-n,imag:t-r}))),Zh=Ml(o.Sub,Xh,Yh),Jh={kernelName:o.Sub,backendName:"cpu",kernelFunc:Zh};function Qh(input,e,t){const n=input.shape,r=n[0],c=n[1],l=t.data.get(input.dataId),d=l.complexTensorInfos.real,h=l.complexTensorInfos.imag,f=[r,c],m=o.util.sizeFromShape(f),y=o.util.getTypedArrayFromDType("float32",m),x=o.util.getTypedArrayFromDType("float32",m);for(let b=0;b<r;b++){const n=$d({inputs:{x:d},backend:t,attrs:{begin:[b,0],size:[1,c]}}),i=$d({inputs:{x:h},backend:t,attrs:{begin:[b,0],size:[1,c]}}),input=Cl({inputs:{real:n,imag:i},backend:t}),{real:r,imag:l}=ep(input,e,t),f=o.backend_util.mergeRealAndImagArrays(r,l);for(let e=0;e<c;e++){const t=o.backend_util.getComplexWithIndex(f,e);y[b*c+e]=t.real,x[b*c+e]=t.imag}t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(i),t.disposeIntermediateTensorInfo(input)}const O=t.makeTensorInfo(f,"float32",y),v=t.makeTensorInfo(f,"float32",x),k=Cl({inputs:{real:O,imag:v},backend:t});return t.disposeIntermediateTensorInfo(O),t.disposeIntermediateTensorInfo(v),k}function ep(input,e,t){const n=o.util.sizeFromShape(input.shape),r=t.data.get(input.dataId),c=t.data.get(r.complexTensorInfos.real.dataId).values,l=t.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((d=n)&d-1)){const r=tp(c,l,n,e,t),d=[input.shape[0],input.shape[1]];if(e){const e=t.makeTensorInfo(d,"float32",r.real),c=t.makeTensorInfo(d,"float32",r.imag),l=t.makeTensorInfo([],"float32",o.util.createScalarValue(n,"float32")),h=hl({inputs:{x:l},backend:t}),f=Kh.kernelFunc({inputs:{a:e,b:l},backend:t}),m=Kh.kernelFunc({inputs:{a:c,b:h},backend:t}),y=t.data.get(f.dataId).values,x=t.data.get(m.dataId).values;return t.disposeIntermediateTensorInfo(e),t.disposeIntermediateTensorInfo(c),t.disposeIntermediateTensorInfo(l),t.disposeIntermediateTensorInfo(h),t.disposeIntermediateTensorInfo(f),t.disposeIntermediateTensorInfo(m),{real:y,imag:x}}return r}{const t=function(data,e,t){const n=new Float32Array(2*e);for(let r=0;r<e;r++){let c=0,l=0;for(let n=0;n<e;n++){const d=o.backend_util.exponent(r*n,e,t),h=o.backend_util.getComplexWithIndex(data,n);c+=h.real*d.real-h.imag*d.imag,l+=h.real*d.imag+h.imag*d.real}t&&(c/=e,l/=e),o.backend_util.assignToTypedArray(n,c,l,r)}return n}(o.backend_util.mergeRealAndImagArrays(c,l),n,e);return o.backend_util.splitRealAndImagArrays(t)}var d}function tp(e,t,n,r,c){if(1===n)return{real:e,imag:t};const data=o.backend_util.mergeRealAndImagArrays(e,t),l=n/2,d=o.backend_util.complexWithEvenIndex(data),h=d.real,f=d.imag,m=[h.length],y=c.makeTensorInfo(m,"float32",h),x=c.makeTensorInfo(m,"float32",f),O=Cl({inputs:{real:y,imag:x},backend:c}),v=o.backend_util.complexWithOddIndex(data),k=v.real,w=v.imag,S=[k.length],I=c.makeTensorInfo(S,"float32",k),N=c.makeTensorInfo(S,"float32",w),j=Cl({inputs:{real:I,imag:N},backend:c}),T=tp(h,f,l,r,c),C=T.real,$=T.imag,E=[C.length],A=c.makeTensorInfo(E,"float32",C),R=c.makeTensorInfo(E,"float32",$),_=Cl({inputs:{real:A,imag:R},backend:c}),F=tp(k,w,l,r,c),D=F.real,M=F.imag,z=[D.length],L=c.makeTensorInfo(z,"float32",D),P=c.makeTensorInfo(z,"float32",M),B=Cl({inputs:{real:L,imag:P},backend:c}),W=o.backend_util.exponents(n,r),V=[W.real.length],U=c.makeTensorInfo(V,"float32",W.real),G=c.makeTensorInfo(V,"float32",W.imag),H=Cl({inputs:{real:U,imag:G},backend:c}),K=vh({inputs:{a:H,b:B},backend:c}),X=Bl({inputs:{a:_,b:K},backend:c}),Y=Zh({inputs:{a:_,b:K},backend:c}),Z=Al({inputs:{input:X},backend:c}),J=Al({inputs:{input:Y},backend:c}),Q=Ud({inputs:{input:X},backend:c}),ee=Ud({inputs:{input:Y},backend:c}),te=Hd({inputs:[Z,J],backend:c,attrs:{axis:0}}),ne=Hd({inputs:[Q,ee],backend:c,attrs:{axis:0}}),re=c.data.get(te.dataId).values,ae=c.data.get(ne.dataId).values;return c.disposeIntermediateTensorInfo(y),c.disposeIntermediateTensorInfo(x),c.disposeIntermediateTensorInfo(O),c.disposeIntermediateTensorInfo(I),c.disposeIntermediateTensorInfo(N),c.disposeIntermediateTensorInfo(j),c.disposeIntermediateTensorInfo(A),c.disposeIntermediateTensorInfo(R),c.disposeIntermediateTensorInfo(_),c.disposeIntermediateTensorInfo(L),c.disposeIntermediateTensorInfo(P),c.disposeIntermediateTensorInfo(B),c.disposeIntermediateTensorInfo(U),c.disposeIntermediateTensorInfo(G),c.disposeIntermediateTensorInfo(H),c.disposeIntermediateTensorInfo(K),c.disposeIntermediateTensorInfo(X),c.disposeIntermediateTensorInfo(Y),c.disposeIntermediateTensorInfo(Z),c.disposeIntermediateTensorInfo(Q),c.disposeIntermediateTensorInfo(J),c.disposeIntermediateTensorInfo(ee),c.disposeIntermediateTensorInfo(te),c.disposeIntermediateTensorInfo(ne),{real:re,imag:ae}}const np={kernelName:o.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t,r=o.util.sizeFromShape(input.shape),c=input.shape[input.shape.length-1],l=Vl({inputs:{x:input},backend:n,attrs:{shape:[r/c,c]}}),d=Qh(l,!1,n),h=Vl({inputs:{x:d},backend:n,attrs:{shape:input.shape}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),h}};function ap(e){const{backend:t,attrs:n}=e,{shape:r,value:c,dtype:l}=n,d=l||o.util.inferDtype(c),h=o.util.getArrayFromDType(d,o.util.sizeFromShape(r));return function(e,t,n){e.fill(t)}(h,c),t.makeTensorInfo(r,d,h)}const sp={kernelName:o.Fill,backendName:"cpu",kernelFunc:ap};const ip={kernelName:o.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:image}=e,r=n,output=o.util.getTypedArrayFromDType(image.dtype,o.util.sizeFromShape(image.shape)),[c,l,d,h]=image.shape,f=r.data.get(image.dataId).values;for(let e=0;e<c;e++){const t=e*d*l*h;for(let e=0;e<l;e++){const n=e*(d*h);for(let col=0;col<d;col++){const e=col*h;for(let r=0;r<h;r++){const o=Math.round(d-col-1),c=t+n+e+r;let l=f[c];if(o>=0&&o<d){l=f[t+n+o*h+r]}output[c]=l}}}}return{dataId:r.write(output,image.shape,image.dtype),shape:image.shape,dtype:image.dtype}}},op=Sl((e=>Math.floor(e))),up=il(o.Floor,op),cp={kernelName:o.Floor,backendName:"cpu",kernelFunc:up},lp=bl(((a,b)=>Math.floor(a/b))),dp=Ml(o.FloorDiv,lp,null,"int32"),hp={kernelName:o.FloorDiv,backendName:"cpu",kernelFunc:dp};const pp={kernelName:o.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,filter:filter,bias:c,preluActivationWeights:l}=t,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y,activation:x,leakyreluAlpha:O}=r;let v=Kd({inputs:{x:o,filter:filter},backend:n,attrs:{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}});if(c){const e=v;if("NCHW"===f&&1===c.shape.length&&1!==c.shape[0]){const e=Vl({inputs:{x:c},backend:n,attrs:{shape:[c.shape[0],1,1]}});v=Bl({inputs:{a:v,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else v=Bl({inputs:{a:v,b:c},backend:n});n.disposeIntermediateTensorInfo(e)}if(x){const e=v;if("NCHW"===f&&"prelu"===x&&1===l.shape.length&&1!==l.shape[0]){const e=Vl({inputs:{x:l},backend:n,attrs:{shape:[l.shape[0],1,1]}});v=Tl(n,v,x,e,O),n.disposeIntermediateTensorInfo(e)}else v=Tl(n,v,x,l,O);n.disposeIntermediateTensorInfo(e)}return v}};const fp={kernelName:o.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,filter:filter,bias:c,preluActivationWeights:l}=t,{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y,activation:x,leakyreluAlpha:O}=r;let v=dh({inputs:{x:o,filter:filter},backend:n,attrs:{strides:d,pad:h,dataFormat:f,dilations:m,dimRoundingMode:y}});if(c){const e=v;v=Bl({inputs:{a:v,b:c},backend:n}),n.disposeIntermediateTensorInfo(e)}if(x){const e=v;v=Tl(n,v,x,l,O),n.disposeIntermediateTensorInfo(e)}return v}};function mp(e,t,n,r,c,l,d,h,f){const m=Object(o.buffer)([r,l],n);for(let i=0;i<r;i++){const n=[];let r=0;for(let t=0;t<c;t++){const o=e[i*c+t];r+=o*d[t],n.push(o)}if(r<0||r>=f/l)throw new Error(`Invalid indices: ${n} does not index into ${h}`);for(let e=0;e<l;e++)m.values[i*l+e]=t.get(...t.indexToLoc(r*l+e))}return m}const bp={kernelName:o.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:c}=t,l=o.util.sizeFromShape(r.shape),d=c.shape,h=d[d.length-1],[f,m,y,x]=o.backend_util.prepareAndValidate(r,c);if(0===m)return n.makeTensorInfo(f,r.dtype,[]);const O=mp(n.data.get(c.dataId).values,n.bufferSync(r),r.dtype,m,h,y,x,r.shape,l);return n.makeTensorInfo(f,r.dtype,O.values)}};function gp(e,t,n){const r=Object(o.buffer)(n,e.dtype);for(let i=0;i<r.size;++i){const n=r.indexToLoc(i).slice(),o=n[0],c=n[2],l=t.locToIndex([o,c]);n[2]=t.values[l];const d=e.locToIndex(n);0<=d&&d<e.values.length&&(r.values[i]=e.values[d])}return r}const yp={kernelName:o.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,indices:l}=t,{axis:d,batchDims:h}=r;nl([c,l],"gatherV2");const f=o.util.parseAxisParam(d,c.shape)[0],m=n.data.get(l.dataId).values,y=c.shape[f];for(let i=0;i<m.length;++i){const e=m[i];o.util.assert(e<=y-1&&e>=0,(()=>`GatherV2: the index value ${e} is not in [0, ${y-1}]`))}let x=h;null==h&&(x=0);const O=o.util.sizeFromShape(l.shape),v=o.backend_util.segment_util.collectGatherOpShapeInfo(c,l,f,x),k=Vl({inputs:{x:c},backend:n,attrs:{shape:[v.batchSize,v.outerSize,v.dimSize,v.sliceSize]}}),w=Vl({inputs:{x:l},backend:n,attrs:{shape:[v.batchSize,O/v.batchSize]}}),S=[v.batchSize,v.outerSize,O/v.batchSize,v.sliceSize],I=n.bufferSync(w),N=gp(n.bufferSync(k),I,S);return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),n.makeTensorInfo(v.outputShape,N.dtype,N.values)}},xp=bl(((a,b)=>a>b?1:0)),Op=Ml(o.Greater,xp,null,"bool"),vp={kernelName:o.Greater,backendName:"cpu",kernelFunc:Op},kp=bl(((a,b)=>a>=b?1:0)),wp=Ml(o.GreaterEqual,kp,null,"bool"),Sp={kernelName:o.GreaterEqual,backendName:"cpu",kernelFunc:wp};const Ip={kernelName:o.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t,r=o.util.sizeFromShape(input.shape),c=input.shape[input.shape.length-1],l=Vl({inputs:{x:input},backend:n,attrs:{shape:[r/c,c]}}),d=Qh(l,!0,n),h=Vl({inputs:{x:d},backend:n,attrs:{shape:input.shape}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),h}},Np=sl(o.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),jp={kernelName:o.IsFinite,backendName:"cpu",kernelFunc:Np},Tp=sl(o.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),Cp={kernelName:o.IsInf,backendName:"cpu",kernelFunc:Tp},$p=sl(o.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),Ep={kernelName:o.IsNan,backendName:"cpu",kernelFunc:$p},Ap=bl(((a,b)=>a<b?1:0)),Rp=Ml(o.Less,Ap,null,"bool"),_p={kernelName:o.Less,backendName:"cpu",kernelFunc:Rp},Fp=bl(((a,b)=>a<=b?1:0)),Dp=Ml(o.LessEqual,Fp,null,"bool"),Mp={kernelName:o.LessEqual,backendName:"cpu",kernelFunc:Dp};function zp(e,t,n){const r=(t-e)/(n-1),c=o.util.makeZerosTypedArray(n,"float32");c[0]=e;for(let i=1;i<c.length;i++)c[i]=c[i-1]+r;return c}const Lp={kernelName:o.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:o,num:c}=n,l=zp(r,o,c);return t.makeTensorInfo([l.length],"float32",l)}},Pp=Sl((e=>Math.log(e))),Bp=il(o.Log,Pp),Wp={kernelName:o.Log,backendName:"cpu",kernelFunc:Bp},Vp=sl(o.Log1p,(e=>Math.log1p(e))),Up={kernelName:o.Log1p,backendName:"cpu",kernelFunc:Vp},Gp=bl(((a,b)=>a&&b)),Hp=Ml(o.LogicalAnd,Gp,null,"bool"),qp={kernelName:o.LogicalAnd,backendName:"cpu",kernelFunc:Hp},Kp=sl(o.LogicalNot,(e=>e?0:1),"bool"),Xp={kernelName:o.LogicalNot,backendName:"cpu",kernelFunc:Kp},Yp=bl(((a,b)=>a||b)),Zp=Ml(o.LogicalOr,Yp,null,"bool"),Jp={kernelName:o.LogicalOr,backendName:"cpu",kernelFunc:Zp};const Qp={kernelName:o.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{depthRadius:l,bias:d,alpha:h,beta:f}=r;nl(c,"LRN");const m=c.shape[3],y=m-1,x=n.data.get(c.dataId).values,O=o.util.sizeFromShape(c.shape),v=new Float32Array(O);function k(e){const t=e%m;let n=e-t+Math.max(0,t-l);const r=e-t+Math.min(t+l,y);let o=0;for(;n<=r;n++){const e=x[n];o+=e*e}return o}for(let e=0;e<O;e++){const t=k(e),n=x[e]*Math.pow(d+h*t,-f);v[e]=n}return n.makeTensorInfo(c.shape,c.dtype,v)}};const ef={kernelName:o.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,y:l,dy:d}=t,{depthRadius:h,bias:f,alpha:m,beta:y}=r;nl(d,"LRNGrad");const x=o.util.sizeFromShape(d.shape),O=d.shape[3],v=n.data.get(d.dataId).values,k=n.data.get(c.dataId).values,w=n.data.get(l.dataId).values,S=new Float32Array(x),I=x;for(let e=0;e<I;e++){const t=e%O,n=e-t+Math.max(0,t-h),r=e-t+Math.min(O,t+h+1);let o=0;for(let e=n;e<r;e++)o+=Math.pow(k[e],2);o=m*o+f;for(let t=n;t<r;t++){let n=-2*m*y*k[t]*w[e]/o;e===t&&(n+=Math.pow(o,-y)),n*=v[e],S[t]+=n}}return n.makeTensorInfo(d.shape,c.dtype,S)}};function tf(e,t,n,r){const c=o.util.getTypedArrayFromDType(r,o.util.sizeFromShape(n));for(let i=0;i<c.length;++i){const n=i*t;let r=e[n];for(let o=0;o<t;++o){const t=e[n+o];(Number.isNaN(t)||t>r)&&(r=t)}c[i]=r}return c}function nf(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{reductionIndices:l,keepDims:d}=r,h=n;let f=c.shape;const m=f.length,y=o.util.parseAxisParam(l,f);let x=y;const O=o.backend_util.getAxesPermutation(x,m);let v=h.data.get(c.dataId).values;if(null!=O){const e=new Array(m);for(let i=0;i<e.length;i++)e[i]=f[O[i]];v=nd(v,f,c.dtype,O,e),x=o.backend_util.getInnerMostAxes(x.length,m),f=e}nl(c,"max"),o.backend_util.assertAxesAreInnerMostDims("max",x,m);const[k,w]=o.backend_util.computeOutAndReduceShapes(f,x),S=tf(v,o.util.sizeFromShape(w),k,c.dtype),I=h.write(S,k,c.dtype);let N=k;if(d){N=o.backend_util.expandShapeToKeepDim(k,y)}return{dataId:I,shape:N,dtype:c.dtype}}const rf={kernelName:o.Max,backendName:"cpu",kernelFunc:nf},af=bl(((e,t)=>Math.max(e,t))),sf=Ml(o.Maximum,af),of={kernelName:o.Maximum,backendName:"cpu",kernelFunc:sf};const uf={kernelName:o.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t;nl(c,"maxPool");const{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=r;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(d,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`));const m=o.backend_util.computePool2DInfo(c.shape,l,d,1,h,f);let y;if(1===m.filterWidth&&1===m.filterHeight&&o.util.arraysEqual(m.inShape,m.outShape))y=hl({inputs:{x:c},backend:n});else{const e=n.data.get(c.dataId).values,t=o.util.computeStrides(c.shape),r=vd(e,c.shape,c.dtype,t,m,"max");y=n.makeTensorInfo(m.outShape,c.dtype,r.values)}return y}};const cf={kernelName:o.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{filterSize:l,strides:d,pad:h,dimRoundingMode:f,dataFormat:m}=r;nl(c,"maxPool3d");const y=o.backend_util.computePool3DInfo(c.shape,l,d,1,h,f,m),x=wd(n.data.get(c.dataId).values,c.shape,c.dtype,o.util.computeStrides(c.shape),y,"max");return n.makeTensorInfo(x.shape,"float32",x.values)}};const lf={kernelName:o.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input}=t,{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=r;nl([c,input],"maxPool3DGrad");const m=o.backend_util.computePool3DInfo(input.shape,l,d,1,h,f),y=function(e,t){const n=Object(o.buffer)(t.outShape,"int32"),r=t.strideDepth,c=t.strideHeight,l=t.strideWidth,d=t.dilationDepth,h=t.dilationHeight,f=t.dilationWidth,m=t.effectiveFilterDepth,y=t.effectiveFilterHeight,x=t.effectiveFilterWidth,O=t.padInfo.front,v=t.padInfo.top,k=t.padInfo.left;for(let o=0;o<t.batchSize;++o)for(let w=0;w<t.inChannels;++w)for(let S=0;S<t.outDepth;++S){const I=S*r-O;let N=I;for(;N<0;)N+=d;const j=Math.min(t.inDepth,m+I);for(let r=0;r<t.outHeight;++r){const m=r*c-v;let O=m;for(;O<0;)O+=h;const T=Math.min(t.inHeight,y+m);for(let c=0;c<t.outWidth;++c){const v=c*l-k;let C=v;for(;C<0;)C+=f;const $=Math.min(t.inWidth,x+v);let E=Number.NEGATIVE_INFINITY,A=-1;for(let t=N;t<j;t+=d){const n=t-I;for(let r=O;r<T;r+=h){const c=r-m;for(let l=C;l<$;l+=f){const d=l-v,h=e.get(o,t,r,l,w);h>=E&&(E=h,A=n*y*x+c*y+d)}}}n.set(A,o,S,r,c,w)}}}return n}(n.bufferSync(input),m),x=m.strideDepth,O=m.strideHeight,v=m.strideWidth,k=m.dilationDepth,w=m.dilationHeight,S=m.dilationWidth,I=m.effectiveFilterDepth,N=m.effectiveFilterHeight,j=m.effectiveFilterWidth,T=I-1-m.padInfo.front,C=j-1-m.padInfo.left,$=N-1-m.padInfo.top,E=Object(o.buffer)(input.shape,"float32"),A=n.bufferSync(c);for(let e=0;e<m.batchSize;++e)for(let t=0;t<m.inChannels;++t)for(let n=0;n<m.inDepth;++n)for(let r=0;r<m.inHeight;++r)for(let o=0;o<m.inWidth;++o){const c=n-T,l=r-$,d=o-C;let h=0;for(let n=0;n<I;n+=k){const r=(c+n)/x;if(!(r<0||r>=m.outDepth||Math.floor(r)!==r))for(let o=0;o<N;o+=w){const c=(l+o)/O;if(!(c<0||c>=m.outHeight||Math.floor(c)!==c))for(let l=0;l<j;l+=S){const f=(d+l)/v;if(f<0||f>=m.outWidth||Math.floor(f)!==f)continue;const mask=I*N*j-1-y.get(e,r,c,f,t)===n*N*j+o*j+l?1:0;if(0===mask)continue;h+=A.get(e,r,c,f,t)*mask}}}E.set(h,e,n,r,o,t)}return n.makeTensorInfo(E.shape,E.dtype,E.values)}};const df={kernelName:o.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input,output:output}=t,l=input;nl([input,output],"maxPoolGrad");const{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=r,y=o.backend_util.computePool2DInfo(l.shape,d,h,1,f,m),x=n.data.get(l.dataId).values,O=Object(o.buffer)(y.outShape,l.dtype,kd(x,l.shape,l.dtype,y).values),v=y.strideHeight,k=y.strideWidth,w=y.dilationHeight,S=y.dilationWidth,I=y.effectiveFilterHeight,N=y.effectiveFilterWidth,j=N-1-y.padInfo.left,T=I-1-y.padInfo.top,C=Object(o.buffer)(l.shape,"float32"),$=n.data.get(c.dataId).values,E=Object(o.buffer)(c.shape,"float32",$);for(let b=0;b<y.batchSize;++b)for(let e=0;e<y.inChannels;++e)for(let t=0;t<y.inHeight;++t)for(let n=0;n<y.inWidth;++n){const r=t-T,o=n-j;let c=0;for(let t=0;t<I;t+=w){const n=(r+t)/v;if(!(n<0||n>=y.outHeight||Math.floor(n)!==n))for(let r=0;r<N;r+=S){const l=(o+r)/k;if(l<0||l>=y.outWidth||Math.floor(l)!==l)continue;const mask=I*N-1-O.get(b,n,l,e)===t*N+r?1:0;if(0===mask)continue;c+=E.get(b,n,l,e)*mask}}C.set(c,b,t,n,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const hf={kernelName:o.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:c,strides:l,pad:d,includeBatchInIndex:h}=t,f=n;nl(r,"MaxPoolWithArgmax");const m=f.data.get(r.dataId).values,y=o.backend_util.computePool2DInfo(r.shape,c,l,[1,1],d),[x,O]=function(e,t,n,r,c){const l=vd(e,0,n,o.util.computeStrides(t),c,"max"),d=kd(e,t,n,c,!0,r);return[l.values,d.values]}(m,r.shape,r.dtype,h,y),v=f.write(x,y.outShape,r.dtype),k=f.write(O,y.outShape,r.dtype);return[{dataId:v,shape:y.outShape,dtype:r.dtype},{dataId:k,shape:y.outShape,dtype:"int32"}]}};const pf={kernelName:o.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r,h=o.util.parseAxisParam(l,c.shape),f=o.backend_util.computeOutAndReduceShapes(c.shape,h)[1],m=o.util.sizeFromShape(f),y=[],x=n.makeTensorInfo([],"float32",new Float32Array([m]));y.push(x);const O=Fl({inputs:{x:c},backend:n,attrs:{dtype:"float32"}});y.push(O);const v=qh({inputs:{a:O,b:x},backend:n});y.push(v);const k=wh({inputs:{x:v},backend:n,attrs:{axis:l,keepDims:d}});return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),k}};const ff={kernelName:o.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r;nl(c,"min");const h=o.util.parseAxisParam(l,c.shape);let f=h;const m=o.backend_util.getAxesPermutation(f,c.shape.length);let y=c;null!=m&&(y=rd({inputs:{x:c},backend:n,attrs:{perm:m}}),f=o.backend_util.getInnerMostAxes(f.length,c.shape.length)),o.backend_util.assertAxesAreInnerMostDims("min",f,y.shape.length);const[x,O]=o.backend_util.computeOutAndReduceShapes(y.shape,f),v=o.util.sizeFromShape(O),k=o.util.makeZerosTypedArray(o.util.sizeFromShape(x),y.dtype),w=n.data.get(y.dataId).values;for(let i=0;i<k.length;++i){const e=i*v;let t=w[e];for(let n=0;n<v;++n){const r=w[e+n];(Number.isNaN(r)||r<t)&&(t=r)}k[i]=t}null!=m&&n.disposeIntermediateTensorInfo(y);const S=n.makeTensorInfo(x,y.dtype,k);if(d){const e=Vl({inputs:{x:S},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(x,h)}});return n.disposeIntermediateTensorInfo(S),e}return S}},mf=bl(((e,t)=>Math.min(e,t))),bf=Ml(o.Minimum,mf),gf={kernelName:o.Minimum,backendName:"cpu",kernelFunc:bf};const yf={kernelName:o.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{paddings:l,mode:d}=r;nl(c,"mirrorPad");const h=l.map(((p,i)=>p[0]+c.shape[i]+p[1])),f=l.map((p=>p[0])),m=l.map(((p,i)=>p[0]+c.shape[i])),y="reflect"===d?0:1,x=n.data.get(c.dataId).values,O=c.shape.length,v=o.util.computeStrides(c.shape),k=o.util.sizeFromShape(h),w=h.length,S=o.util.computeStrides(h),I=o.util.getTypedArrayFromDType(c.dtype,k);for(let i=0;i<k;i++){let e=o.util.indexToLoc(i,w,S);for(let i=0;i<w;i++)e[i]<f[i]?e[i]=2*f[i]-e[i]-y:e[i]>=m[i]&&(e[i]=2*(m[i]-1)-e[i]+y);e=e.map(((e,i)=>e-f[i]));const t=o.util.locToIndex(e,O,v);I[i]=x[t]}return{dataId:n.write(I,h,c.dtype),shape:h,dtype:c.dtype}}},xf=bl(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Of=Ml(o.Mod,xf),vf={kernelName:o.Mod,backendName:"cpu",kernelFunc:Of};function kf(e){const{inputs:t,backend:n,attrs:r}=e,{logits:c}=t,{dim:l}=r,d=c.shape.length;let h=l;if(-1===h&&(h=d-1),h!==d-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${d} and dim was ${h}`);const f=o.util.parseAxisParam([h],c.shape),m=nf({inputs:{x:c},backend:n,attrs:{reductionIndices:f,keepDims:!1}}),y=o.backend_util.expandShapeToKeepDim(m.shape,f),x=Vl({inputs:{x:m},backend:n,attrs:{shape:y}}),a=Zh({inputs:{a:c,b:x},backend:n}),b=Lh({inputs:{x:a},backend:n}),O=wh({inputs:{x:b},backend:n,attrs:{axis:f,keepDims:!1}}),v=Vl({inputs:{x:O},backend:n,attrs:{shape:y}}),k=qh({inputs:{a:b,b:v},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(v),k}const wf={kernelName:o.Softmax,backendName:"cpu",kernelFunc:kf};const Sf={kernelName:o.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:c}=t,{numSamples:l,seed:d,normalized:h}=r;nl(c,"multinomial");const f=h?c:kf({inputs:{logits:c},backend:n,attrs:{dim:-1}}),m=f.shape[0],y=f.shape[1],x=n.data.get(f.dataId).values,O=[m,l],v=o.util.makeZerosTypedArray(o.util.sizeFromShape(O),"int32");for(let b=0;b<m;++b){const e=b*y,t=new Float32Array(y-1);t[0]=x[e];for(let n=1;n<t.length;++n)t[n]=t[n-1]+x[e+n];const n=Hc.alea(d.toString()),r=b*l;for(let e=0;e<l;++e){const o=n();v[r+e]=t.length;for(let n=0;n<t.length;n++)if(o<t[n]){v[r+e]=n;break}}}return h||n.disposeIntermediateTensorInfo(f),n.makeTensorInfo(O,"int32",v)}};function If(e,t,n){const r=o.util.createScalarValue(-1,n);return xh([],t,r,e,n)}const Nf={kernelName:o.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;nl(r,"neg");const o=n.data.get(r.dataId).values,[c,l]=If(o,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,c)}},jf=o.kernel_impls.nonMaxSuppressionV3Impl;const Tf={kernelName:o.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:o,scores:c}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h}=r;nl(o,"NonMaxSuppression");const f=n.data.get(o.dataId).values,m=n.data.get(c.dataId).values,{selectedIndices:y}=jf(f,m,l,d,h);return n.makeTensorInfo([y.length],"int32",new Int32Array(y))}},Cf=o.kernel_impls.nonMaxSuppressionV4Impl;const $f={kernelName:o.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:o,scores:c}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h,padToMaxOutputSize:f}=r;nl(o,"NonMaxSuppressionPadded");const m=n.data.get(o.dataId).values,y=n.data.get(c.dataId).values,{selectedIndices:x,validOutputs:O}=Cf(m,y,l,d,h,f);return[n.makeTensorInfo([x.length],"int32",new Int32Array(x)),n.makeTensorInfo([],"int32",new Int32Array([O]))]}},Ef=o.kernel_impls.nonMaxSuppressionV5Impl;const Af={kernelName:o.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:o,scores:c}=t,{maxOutputSize:l,iouThreshold:d,scoreThreshold:h,softNmsSigma:f}=r;nl(o,"NonMaxSuppressionWithScore");const m=n.data.get(o.dataId).values,y=n.data.get(c.dataId).values,x=l,O=d,v=h,k=f,{selectedIndices:w,selectedScores:S}=Ef(m,y,x,O,v,k);return[n.makeTensorInfo([w.length],"int32",new Int32Array(w)),n.makeTensorInfo([S.length],"float32",new Float32Array(S))]}},Rf=bl(((a,b)=>a!==b?1:0)),_f=Ml(o.NotEqual,Rf,null,"bool"),Ff={kernelName:o.NotEqual,backendName:"cpu",kernelFunc:_f};const Df={kernelName:o.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:c}=t,{dtype:l,depth:d,onValue:h,offValue:f}=r;nl(c,"oneHot");const m=o.util.sizeFromShape(c.shape),y=new Float32Array(m*d);y.fill(f);const x=n.data.get(c.dataId).values;for(let e=0;e<m;++e)x[e]>=0&&x[e]<d&&(y[e*d+x[e]]=h);return n.makeTensorInfo([...c.shape,d],l,y)}};function Mf(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=Al({inputs:{input:r},backend:n}),t=Mf({inputs:{x:e},backend:n}),o=Ud({inputs:{input:r},backend:n}),i=Mf({inputs:{x:o},backend:n}),c=Cl({inputs:{real:t,imag:i},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),c}return ap({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const zf={kernelName:o.ZerosLike,backendName:"cpu",kernelFunc:Mf};const Lf={kernelName:o.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:o}=n;if("string"===o.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===o.dtype){const t=Al({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r}),c=Ud({inputs:{input:o},backend:r}),i=Mf({inputs:{x:c},backend:r}),l=Cl({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(i),l}return ap({backend:r,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}};function Pf(e){const{inputs:t,backend:n,attrs:r}=e,{axis:c}=r;if(1===t.length)return Bh({inputs:{input:t[0]},backend:n,attrs:{dim:c}});const l=t[0].shape,d=t[0].dtype;t.forEach((e=>{o.util.assertShapesMatch(l,e.shape,"All tensors passed to stack must have matching shapes"),o.util.assert(d===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const h=[],f=Hd({inputs:t.map((e=>{const t=Bh({inputs:{input:e},backend:n,attrs:{dim:c}});return h.push(t),t})),backend:n,attrs:{axis:c}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Bf={kernelName:o.Pack,backendName:"cpu",kernelFunc:Pf};const Wf={kernelName:o.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{paddings:l,constantValue:d}=r;nl(c,"pad");const h=l.map(((p,i)=>p[0]+c.shape[i]+p[1])),f=l.map((p=>p[0])),m=n.data.get(c.dataId).values,y=o.util.sizeFromShape(c.shape),x=c.shape.length,O=o.util.computeStrides(c.shape),v=o.util.sizeFromShape(h),k=h.length,w=o.util.computeStrides(h),S=o.util.getTypedArrayFromDType(c.dtype,v);0!==d&&S.fill(d);for(let i=0;i<y;i++){const e=o.util.indexToLoc(i,x,O).map(((e,i)=>e+f[i]));S[o.util.locToIndex(e,k,w)]=m[i]}return{dataId:n.write(S,h,c.dtype),shape:h,dtype:c.dtype}}},Vf=bl(((a,b)=>Math.pow(a,b))),Uf=Ml(o.Pow,Vf),Gf={kernelName:o.Pow,backendName:"cpu",kernelFunc:Uf};function Hf(e,t,n,r){const[c,l]=o.backend_util.computeOutAndReduceShapes(e,r),d=Object(o.upcastType)(t,"int32"),h=o.util.makeZerosTypedArray(o.util.sizeFromShape(c),d),f=o.util.sizeFromShape(l);for(let i=0;i<h.length;++i){const e=i*f;let t=1;for(let r=0;r<f;++r)t*=n[e+r];h[i]=t}return{outVals:h,outShape:c,outDtype:d}}const qf={kernelName:o.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r;nl(c,"prod");const h=c.shape.length,f=o.util.parseAxisParam(l,c.shape),m=o.backend_util.getAxesPermutation(f,h);let y=f,x=c;const O=[];null!=m&&(x=rd({inputs:{x:c},backend:n,attrs:{perm:m}}),O.push(x),y=o.backend_util.getInnerMostAxes(y.length,h));const v=n.data.get(x.dataId).values,{outVals:k,outShape:w,outDtype:S}=Hf(x.shape,x.dtype,v,y);let I=w;return d&&(I=o.backend_util.expandShapeToKeepDim(w,f)),O.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(I,S,k)}};var Kf=o.backend_util.RowPartitionType;class Xf{constructor(e,t,n,r,c,l,d,h,f,m){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=c,this.defaultValue=l,this.defaultValueShape=d,this.rowPartitionValues=h,this.rowPartitionValuesShapes=f,this.rowPartitionTypes=o.backend_util.getRowPartitionTypesHelper(m),this.raggedRank=o.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Kf.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Kf.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Kf.VALUE_ROWIDS:return Xf.getMaxWidthValueRowID(t);case Kf.ROW_SPLITS:return Xf.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Kf[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let i=0;i<t-1;++i){const t=e[i+1]-e[i];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],o=0;for(let i=1;i<t;++i){const t=e[i];t!==r&&(r=t,o=Math.max(i-n,o),n=i)}return Math.max(t-n,o)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Zf(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;o.backend_util.validateDefaultValueShape(n,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),c=o.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);c[0]<0&&(c[0]=e);for(let i=1;i<=this.raggedRank;++i)c[i]<0&&(c[i]=this.getMaxWidth(i));return c}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),c=[];let l=0;for(let i=0;i<r;++i,l+=t)c.push(l);for(let i=r;i<e;++i)c.push(-1);return o.util.assert(c.length===e,(()=>"Final length of result must be equal to firstDimension.")),c}calculateOutputIndexRowSplit(e,t,n,r){const o=e.length,c=[];for(let i=0;i<o-1;++i){const o=e[i+1]-e[i];let l=Math.min(r,o),d=t[i];-1===d&&(l=0);for(let e=0;e<l;++e)c.push(d),d+=n;for(let e=0;e<o-l;++e)c.push(-1)}if(o>0&&c.length!==e[o-1])throw new Error("Invalid row split size.");return c}calculateOutputIndexValueRowID(e,t,n,r){const o=e.length,c=[];if(0===o)return[];let l=0,d=e[0];if(d>=t.length)throw new Error(`Got currentValueRowId=${d}, which is not less than ${t.length}`);let h=t[d];c.push(h);for(let i=1;i<o;++i){const o=e[i];if(o===d)h>=0&&(++l,l<r?h+=n:h=-1);else{if(l=0,d=o,o>=t.length)throw new Error(`Got nextValueRowId=${o} which is not less than ${t.length}`);h=t[o]}c.push(h)}if(c.length!==e.length)throw new Error("Invalid row ids.");return c}calculateOutputIndex(e,t,n,r){const o=this.getRowPartitionTensor(e),c=this.getRowPartitionTypeByDimension(e);switch(c){case Kf.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,t,n,r);case Kf.ROW_SPLITS:if(o.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(o,t,n,r);default:throw new Error(`Unsupported partition type: ${Kf[c]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Kf.FIRST_DIM_SIZE:return e[0];case Kf.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Kf.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Kf[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let i=n.length-2;i>=0;--i)n[i]=n[i+1]*t[i+1];const r=Zf(t,!1),c=o.util.getArrayFromDType(this.valuesDType,o.util.sizeFromShape(r));if(n[0]*t[0]>0){let o=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let i=1;i<=this.raggedRank;++i){o=this.calculateOutputIndex(i-1,o,n[i],t[i])}this.setOutput(this.raggedRank,o,c,r)}return[r,c]}setOutput(e,t,n,r){if(0===n.length)return;const c=this.values,l=n;let d=r.slice();d=d.slice(e+1);const h=o.util.sizeFromShape(d),f=t.length;let m=this.defaultValue;if(m.length!==h&&1!==m.length){const e=this.defaultValueShape;Object(o.tidy)((()=>{const t=Object(o.reshape)(m,e),n=Object(o.broadcastTo)(t,d);m=n.dataSync()}))}let y=0,x=0,O=0;for(let e=0;e<=f;++e){let r=e<f?t[e]:-1;if(r!==O){if(x<O){const e=c.subarray(y*h);Yf(l.subarray(x*h),e,(O-x)*h)}if(e>=f){const e=n.length;r=Math.floor(e/h)}if(r>O)if(1===this.defaultValue.length)l.subarray(O*h,r*h).fill(this.defaultValue[0]),O=r;else for(;r>O;){Yf(l.slice(O*h),m,h),++O}r<0?(y=e+1,x=O):(y=e,x=O,O=x+1)}else++O}}}function Yf(e,t,n){for(let i=0;i<n;i++)e[i]=t[i]}function Zf(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function Jf(e,t,n,r,o,c,l,d,h,f){return new Xf(e,t,n,r,o,c,l,d,h,f).compute()}const Qf={kernelName:o.RaggedTensorToTensor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:o,values:c,defaultValue:l,rowPartitionTensors:d}=t,{rowPartitionTypes:h}=r,f=n.data.get(o.dataId).values,m=n.data.get(c.dataId).values,y=n.data.get(l.dataId).values,x=d.map((e=>n.data.get(e.dataId).values)),O=d.map((e=>e.shape)),[v,output]=Jf(f,o.shape,m,c.shape,c.dtype,y,l.shape,x,O,h);return n.makeTensorInfo(v,c.dtype,output)}};function tm(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return o.util.makeZerosTypedArray(0,r);const c=Math.abs(Math.ceil((t-e)/n)),l=o.util.makeZerosTypedArray(c,r);t<e&&1===n&&(n=-1),l[0]=e;for(let i=1;i<l.length;i++)l[i]=l[i-1]+n;return l}const nm={kernelName:o.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:o,dtype:c,step:l}=n,d=tm(r,o,l,c);return t.makeTensorInfo([d.length],c,d)}},rm=sl(o.Reciprocal,(e=>1/e)),am={kernelName:o.Reciprocal,backendName:"cpu",kernelFunc:rm};const sm={kernelName:o.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:c}=t,{alignCorners:l,halfPixelCenters:d,size:h}=r;nl(c,"resizeBilinear");const f=o.util.computeStrides(c.shape),[m,y]=h,[x,O,v,k]=c.shape,w=n.data.get(c.dataId).values,S=new Float32Array(o.util.sizeFromShape([x,m,y,k])),I=[l&&m>1?O-1:O,l&&y>1?v-1:v],N=[l&&m>1?m-1:m,l&&y>1?y-1:y];let j=0;const T=I[0]/N[0],C=I[1]/N[1];for(let b=0;b<x;b++)for(let e=0;e<m;e++){let t;t=d?T*(e+.5)-.5:T*e;const n=Math.max(0,Math.floor(t)),r=t-n,o=Math.min(O-1,Math.ceil(t)),c=b*f[0]+n*f[1],l=b*f[0]+o*f[1];for(let e=0;e<y;e++){let t;t=d?C*(e+.5)-.5:C*e;const n=Math.max(0,Math.floor(t)),o=t-n,h=Math.min(v-1,Math.ceil(t)),m=c+n*f[2],y=l+n*f[2],x=c+h*f[2],O=l+h*f[2];for(let e=0;e<k;e++){const t=w[m+e],n=w[y+e],c=t+(w[x+e]-t)*o,l=c+(n+(w[O+e]-n)*o-c)*r;S[j++]=l}}}return n.makeTensorInfo([x,m,y,k],"float32",S)}};const im={kernelName:o.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:c,dy:l}=t,{alignCorners:d}=r;nl([l,c],"resizeBilinearGrad");const h=o.util.computeStrides(c.shape),[f,m,y,x]=c.shape,[,O,v]=l.shape,output=new Float32Array(f*m*y*x),k=[d&&O>1?m-1:m,d&&v>1?y-1:y],w=[d&&O>1?O-1:O,d&&v>1?v-1:v],S=k[0]/w[0],I=k[1]/w[1],N=n.data.get(l.dataId).values;let j=0;for(let b=0;b<f;b++){const e=b*h[0];for(let t=0;t<O;t++){const n=t*S,r=Math.floor(n),o=Math.min(Math.ceil(n),m-1),c=e+r*h[1],l=e+o*h[1],d=n-r,f=1-d;for(let e=0;e<v;e++){const t=e*I,n=Math.floor(t),r=Math.min(Math.ceil(t),y-1),o=t-n,m=1-o,O=c+n*h[2],v=c+r*h[2],k=l+n*h[2],w=l+r*h[2],S=f*m,T=f*o,C=d*m,$=d*o;for(let e=0;e<x;e++){const t=N[j++];output[O+e]+=t*S,output[v+e]+=t*T,output[k+e]+=t*C,output[w+e]+=t*$}}}}return n.makeTensorInfo([f,y,m,x],"float32",output)}};const om={kernelName:o.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:c}=t,{alignCorners:l,halfPixelCenters:d,size:h}=r;nl(c,"resizeNearestNeighbor");const f=o.util.computeStrides(c.shape),[m,y]=h,[x,O,v,k]=c.shape,w=n.data.get(c.dataId).values,output=new Float32Array(x*m*y*k),S=[l&&m>1?O-1:O,l&&y>1?v-1:v],I=[l&&m>1?m-1:m,l&&y>1?y-1:y],N=S[0]/I[0],j=S[1]/I[1];let T=0;for(let b=0;b<x;b++){const e=b*f[0];for(let t=0;t<m;t++){const n=d?N*(t+.5):N*t;let r=Math.min(O-1,l?Math.round(n):Math.floor(n));d&&(r=Math.max(0,r));const o=e+r*f[1];for(let e=0;e<y;e++){const t=d?j*(e+.5):j*e;let n=Math.min(v-1,l?Math.round(t):Math.floor(t));d&&(n=Math.max(0,n));const r=o+n*f[2];for(let e=0;e<k;e++){const t=w[r+e];output[T++]=t}}}}return n.makeTensorInfo([x,m,y,k],c.dtype,output)}};const um={kernelName:o.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:c,dy:l}=t,{alignCorners:d}=r;nl([l,c],"resizeNearestNeighborGrad");const h=o.util.computeStrides(c.shape),f=o.util.computeStrides(l.shape),[m,y,x,O]=c.shape,[,v,k]=l.shape,output=new Float32Array(m*y*x*O),w=n.data.get(l.dataId).values,S=[d&&v>1?y-1:y,d&&k>1?x-1:x],I=[d&&v>1?v-1:v,d&&k>1?k-1:k],N=S[0]/I[0],j=S[1]/I[1],T=1/N,C=1/j,$=2*Math.ceil(T)+2,E=2*Math.ceil(C)+2;for(let b=0;b<m;b++){const e=b*h[0];for(let t=0;t<y;t++){const n=e+t*h[1],r=Math.floor(t*T),o=Math.floor(r-$/2);for(let r=0;r<x;r++){const c=n+r*h[2],l=Math.floor(r*C),m=Math.floor(l-E/2);for(let n=0;n<O;n++){let l=0;for(let c=0;c<$;c++){const h=c+o;if(h<0||h>=v)continue;const O=e+h*f[1],S=h*N;if(t===Math.min(y-1,d?Math.round(S):Math.floor(S)))for(let e=0;e<E;e++){const t=e+m;if(t<0||t>=k)continue;const o=O+t*f[2],c=t*j;r===Math.min(x-1,d?Math.round(c):Math.floor(c))&&(l+=w[o+n])}}output[c+n]=l}}}}return n.makeTensorInfo(c.shape,c.dtype,output)}};const cm={kernelName:o.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{dims:l}=r;nl(c,"reverse");const d=c.shape.length,h=o.util.parseAxisParam(l,c.shape);if(0===d)return hl({inputs:{x:c},backend:n});const f=new o.TensorBuffer(c.shape,c.dtype),m=n.bufferSync(c);for(let i=0;i<f.size;i++){const e=f.indexToLoc(i),t=e.slice();h.forEach((e=>t[e]=c.shape[e]-1-t[e])),f.set(m.get(...t),...e)}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},lm={kernelName:o.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:image}=e,{radians:r,fillValue:c,center:l}=t,d=n,output=o.util.getTypedArrayFromDType(image.dtype,o.util.sizeFromShape(image.shape)),[h,f,m,y]=image.shape,[x,O]=o.backend_util.getImageCenter(l,f,m),v=Math.sin(r),k=Math.cos(r),w=d.data.get(image.dataId).values;for(let e=0;e<h;e++){const t=e*m*f*y;for(let e=0;e<f;e++){const n=e*(m*y);for(let col=0;col<m;col++){const r=col*y;for(let o=0;o<y;o++){const l=[h,e,col,o],d=l[2],S=l[1];let I=(d-x)*k-(S-O)*v,N=(d-x)*v+(S-O)*k;I=Math.round(I+x),N=Math.round(N+O);let j=c;if("number"!=typeof c&&(j=3===o?255:c[o]),I>=0&&I<m&&N>=0&&N<f){j=w[t+N*(m*y)+I*y+o]}output[t+n+r+o]=j}}}}return{dataId:d.write(output,image.shape,image.dtype),shape:image.shape,dtype:image.dtype}}},dm=sl(o.Round,(e=>{const base=Math.floor(e);return e-base<.5?Math.floor(e):e-base>.5?Math.ceil(e):base%2==0?base:base+1})),hm={kernelName:o.Round,backendName:"cpu",kernelFunc:dm},pm=Sl((e=>1/Math.sqrt(e))),fm=il(o.Rsqrt,pm),mm={kernelName:o.Rsqrt,backendName:"cpu",kernelFunc:fm};function bm(e,t,n,r,c,l,d,h,f,m){const y=[r/c,c],x=e.values,O=t.values;if(0===r)return Object(o.buffer)(n,t.dtype);const v=Object(o.buffer)(y,t.dtype);"string"==typeof f||"number"==typeof f?v.values.fill(f):"boolean"==typeof f&&v.values.fill(+f);for(let i=0;i<l;i++){const e=[];let o=0;for(let t=0;t<d;t++){const n=x[i*d+t];e.push(n),o+=n*h[t]}if(o<0||o>=r/c)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let e=0;e<c;e++)m?v.values[o*c+e]+=O[i*c+e]:v.values[o*c+e]=0===t.rank?O[0]:O[i*c+e]}return v}const gm={kernelName:o.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:c,updates:l}=t,{shape:d}=r,{sliceRank:h,numUpdates:f,sliceSize:m,strides:y,outputSize:x}=o.backend_util.calculateShapes(l,c,d),O=bm(n.bufferSync(c),n.bufferSync(l),d,x,m,f,h,y,0,!0);return n.makeTensorInfo(d,O.dtype,O.values)}};function ym(e,t){let n=0,r=e.length,o=0;for(;n<r;)o=Math.floor((n+r)/2),e[o]<t?n=o+1:r=o;return r}function xm(e,t){let n=0,r=e.length,o=0;for(;n<r;)o=Math.floor((n+r)/2),e[o]<=t?n=o+1:r=o;return r}const Om={kernelName:o.SearchSorted,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:c,values:l}=t,{side:d}=r,output=function(e,t,n,r,c,l){const output=o.util.getArrayFromDType("int32",n*c);for(let b=0;b<n;++b){const n=e.slice(b*r,(b+1)*r),o=b*c;for(let i=0;i<c;++i)output[o+i]="left"===l?ym(n,t[i+o]):xm(n,t[i+o])}return output}(n.data.get(c.dataId).values,n.data.get(l.dataId).values,c.shape[0],c.shape[1],l.shape[1],d);return n.makeTensorInfo(l.shape,"int32",output)}};const vm={kernelName:o.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:c,e:l}=t;nl([r,c,l],"select");const d=r.shape.length,h=n.data.get(r.dataId).values,f=n.data.get(c.dataId).values,m=n.data.get(l.dataId).values,y=Object(o.upcastType)(c.dtype,l.dtype),x=o.util.makeZerosTypedArray(o.util.sizeFromShape(c.shape),y);let O=0;const v=0===d||d>1||1===c.shape.length?1:o.util.sizeFromShape(c.shape.slice(1));for(let i=0;i<h.length;i++)for(let e=0;e<v;e++)1===h[i]?x[O++]=f[i]:x[O++]=m[i];return n.makeTensorInfo(c.shape,y,x)}},km=o.backend_util.SELU_SCALEALPHA,wm=o.backend_util.SELU_SCALE,Sm=sl(o.Selu,(e=>e>=0?wm*e:km*(Math.exp(e)-1))),Im={kernelName:o.Selu,backendName:"cpu",kernelFunc:Sm},Nm=sl(o.Sign,(e=>e<0?-1:e>0?1:0)),jm={kernelName:o.Sign,backendName:"cpu",kernelFunc:Nm},Tm=sl(o.Sin,(e=>Math.sin(e))),Cm={kernelName:o.Sin,backendName:"cpu",kernelFunc:Tm},$m=sl(o.Sinh,(e=>Math.sinh(e))),Em={kernelName:o.Sinh,backendName:"cpu",kernelFunc:$m},Am=Math.log(1.1920928955078125e-7)+2,Rm=sl(o.Softplus,(e=>{const t=e>-Am,n=e<Am,r=Math.exp(e);let o;return o=n?r:t?e:Math.log(1+r),o})),_m={kernelName:o.Softplus,backendName:"cpu",kernelFunc:Rm};const Fm={kernelName:o.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{blockShape:l,paddings:d}=r;nl([c],"spaceToBatchND");const h=o.util.sizeFromShape(l),f=[[0,0]];f.push(...d);for(let i=1+l.length;i<c.shape.length;++i)f.push([0,0]);const m=Wf.kernelFunc({inputs:{x:c},backend:n,attrs:{paddings:f,constantValue:0}}),y=o.backend_util.getReshaped(m.shape,l,h,!1),x=o.backend_util.getPermuted(y.length,l.length,!1),O=o.backend_util.getReshapedPermuted(m.shape,l,h,!1),v=Vl({inputs:{x:m},backend:n,attrs:{shape:y}}),k=rd({inputs:{x:v},backend:n,attrs:{perm:x}}),w=Vl({inputs:{x:k},backend:n,attrs:{shape:O}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),w}};function Dm(e,t,n,r,c,l,d){const h=t[0],f=l[0],m=new Array(f),y=new Array(h),x=t[1];if(0===f){if(0!==h)throw new Error(o.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(h));return[o.util.getArrayFromDType(n,0),[0,x],o.util.getArrayFromDType(c,0),m,y]}let O=!0,v=0;const k=new Array(f).fill(0);for(let i=0;i<h;++i){const t=e[i*x];if(t<0)throw new Error(o.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i,t));if(t>=f)throw new Error(o.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i,t,f));++k[t],O=O&&t>=v,v=t}let w=!0;for(let e=0;e<f;++e){const t=0===k[e];m[e]=t,w=w&&!t,k[e]=Math.max(k[e],1),e>0&&(k[e]+=k[e-1])}if(w&&O){const t=e,n=r;for(let i=0;i<h;++i)y[i]=i;return[t,[h,x],n,m,y]}{const t=k[f-1],l=o.util.getArrayFromDType(n,t*x),O=o.util.getArrayFromDType(c,t),v=new Array(f).fill(0);for(let i=0;i<h;++i){const t=e[i*x],n=v[t],o=(0===t?0:k[t-1])+n;v[t]++;for(let t=0;t<x;++t)l[o*x+t]=e[i*x+t];O[o]=r[i],y[i]=o}for(let e=0;e<f;++e){if(0===v[e]){const t=0===e?0:k[e-1];l[t*x+0]=e;for(let col=1;col<x;++col)l[t*x+col]=0;O[t]=d}}return[l,[t,x],O,m,y]}}const Mm={kernelName:o.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:o,denseShape:c,defaultValue:l}=t;if(1!==c.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${c.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Values must be a vector, saw:\n        ${o.shape}`);if(0!==l.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${l.shape}`);const d=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,f=n.data.get(c.dataId).values,m=n.data.get(l.dataId).values[0],[y,x,O,v,k]=Dm(d,r.shape,r.dtype,h,o.dtype,f,m);return[n.makeTensorInfo(x,r.dtype,y),n.makeTensorInfo([x[0]],o.dtype,O),n.makeTensorInfo([v.length],"bool",new Uint8Array(v.map((e=>Number(e))))),n.makeTensorInfo([k.length],r.dtype,new Int32Array(k))]}};function zm(e,t,n,r,c){const l=o.util.sizeFromShape(r),d=t[0],h=c.length,f=[];let m=1,y=-1;for(let e=0;e<h;++e){const t=c[e];if(-1===t){if(-1!==y)throw new Error(o.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(y,e));y=e,f.push(1)}else{if(t<0)throw new Error(o.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));m*=t,f.push(t)}}if(-1!==y){if(m<=0)throw new Error(o.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(l/m);if(m*e!==l)throw new Error(o.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(r,f));f[y]=e}if(o.util.sizeFromShape(f)!==l)throw new Error(o.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(r,f));const x=r.length,O=[];if(x>0){O[x-1]=1;for(let e=x-2;e>=0;--e)O[e]=O[e+1]*r[e+1]}const v=[];if(h>0){v[h-1]=1;for(let e=h-2;e>=0;--e)v[e]=v[e+1]*f[e+1]}const k=o.util.getArrayFromDType(n,d*h);for(let i=0;i<d;++i){let t=0;for(let n=0;n<x;++n)t+=e[i*x+n]*O[n];for(let e=0;e<h;++e)k[i*h+e]=Math.trunc(t/v[e]),t%=v[e]}return[k,[d,h],f]}const Lm={kernelName:o.SparseReshape,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:o,newShape:c}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${o.shape}`);if(1!==c.shape.length)throw new Error(`Target shape should be a vector but received shape ${c.shape}`);const l=Array.from(n.data.get(o.dataId).values),d=n.data.get(r.dataId).values,h=Array.from(n.data.get(c.dataId).values),[f,m,y]=zm(d,r.shape,r.dtype,l,h);return[n.makeTensorInfo(m,r.dtype,f),n.makeTensorInfo([y.length],c.dtype,new Int32Array(y))]}};function Pm(input,e,t,n,r,c=!1,l=0){const d=n.length,h=[e[0],input.length/e[0]],f=h[1],m=d>0?r[d-1]+1:0;if(m<0)throw new Error(o.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const y=e.slice();y[0]=m;const x=y.reduce(((e,t)=>e*t),1),output=o.util.getArrayFromDType(t,x);if(0===d)return m>0&&output.fill(l),[output,y];if(m<=0)throw new Error(o.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let O=0,v=1,k=0,w=r[O];for(;;){let e=0;if(v<d){if(e=r[v],w===e){++v;continue}if(w>=e)throw new Error(o.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(w<0||w>=m)throw new Error(o.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(w,m));w>k&&output.fill(l,k*f,w*f);for(let i=O;i<v;++i){const e=n[i];if(e<0||e>=h[0])throw new Error(o.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i,n[i],h[0]));for(let t=0;t<f;t++)output[w*f+t]+=input[e*f+t]}if(c)for(let e=0;e<f;e++)output[w*f+e]/=v-O;if(O=v,++v,k=w+1,w=e,v>d)break}return k<m&&output.fill(l,k*f,m*f),[output,y]}const Bm={kernelName:o.SparseSegmentMean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const c=n.data.get(data.dataId).values,l=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,[h,f]=Pm(c,data.shape,data.dtype,l,d,!0);return n.makeTensorInfo(f,data.dtype,h)}};const Wm={kernelName:o.SparseSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const c=n.data.get(data.dataId).values,l=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,[h,f]=Pm(c,data.shape,data.dtype,l,d);return n.makeTensorInfo(f,data.dtype,h)}};const Vm={kernelName:o.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:c,sparseValues:l,defaultValue:d}=t,{outputShape:h}=r,{sliceRank:f,numUpdates:m,sliceSize:y,strides:x,outputSize:O}=o.backend_util.calculateShapes(l,c,h),v=!1,k=n.bufferSync(c);let w;switch(l.dtype){case"bool":w=bm(k,n.bufferSync(l),h,O,y,m,f,x,Boolean(n.data.get(d.dataId).values[0]),v);break;case"float32":w=bm(k,n.bufferSync(l),h,O,y,m,f,x,n.data.get(d.dataId).values[0],v);break;case"int32":w=bm(k,n.bufferSync(l),h,O,y,m,f,x,n.data.get(d.dataId).values[0],v);break;case"string":w=bm(k,n.bufferSync(l),h,O,y,m,f,x,o.util.decodeString(n.data.get(d.dataId).values[0]),v);break;default:throw new Error(`Unsupported type ${l.dtype}`)}return n.makeTensorInfo(h,w.dtype,w.values)}};const Um={kernelName:o.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{numOrSizeSplits:l,axis:d}=r,h=o.util.parseAxisParam(d,c.shape)[0],f=o.backend_util.prepareSplitSize(c,l,h),m=new Array(c.shape.length).fill(0),y=c.shape.slice();return f.map((s=>{const e=[...y];e[h]=s;const t=$d({inputs:{x:c},backend:n,attrs:{begin:m,size:e}});return m[h]+=s,t}))}},Gm=Sl((e=>Math.sqrt(e))),Hm=sl(o.Sqrt,(e=>Math.sqrt(e))),qm={kernelName:o.Sqrt,backendName:"cpu",kernelFunc:Hm},Km={kernelName:o.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;nl(n,"square");const o=r.data.get(n.dataId).values,c=new Float32Array(o.length);for(let i=0;i<o.length;++i){const e=o[i];c[i]=e*e}return{dataId:r.write(c,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Xm=bl(((a,b)=>{const e=a-b;return e*e})),Ym=Ml(o.SquaredDifference,Xm),Zm={kernelName:o.SquaredDifference,backendName:"cpu",kernelFunc:Ym},Jm=sl(o.Step,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Qm={kernelName:o.Step,backendName:"cpu",kernelFunc:Jm};function eb(e,t,n,r){const c=Object(o.buffer)(e,t.dtype);for(let i=0;i<c.size;i++){const e=c.indexToLoc(i),o=new Array(e.length);for(let t=0;t<o.length;t++)o[t]=e[t]*n[t]+r[t];c.set(t.get(...o),...e)}return c}const tb={kernelName:o.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{begin:l,end:d,strides:h,beginMask:f,endMask:m,ellipsisMask:y,newAxisMask:x,shrinkAxisMask:O}=r;nl(c,"stridedSlice");const{finalShapeSparse:v,finalShape:k,isIdentity:w,sliceDim0:S,isSimpleSlice:I,begin:N,end:j,strides:T}=o.slice_util.sliceInfo(c.shape,l,d,h,f,m,y,x,O);let C;if(w)C=Vl({inputs:{x:c},backend:n,attrs:{shape:k}});else if(S||I){o.util.assert(c.shape.length>=1,(()=>`Input must have rank at least 1, got: ${c.shape.length}`));const e=o.slice_util.computeOutShape(N,j,T),t=$d({inputs:{x:c},backend:n,attrs:{begin:N,size:e}});C=Vl({inputs:{x:t},backend:n,attrs:{shape:k}}),n.disposeIntermediateTensorInfo(t)}else{const e=eb(v,n.bufferSync(c),T,N);C=n.makeTensorInfo(k,e.dtype,e.values)}return C}};class nb{constructor(e,t,n,r,c,l){this.separator=o.util.encodeString(e),this.nGramWidths=t,this.leftPad=o.util.encodeString(n),this.rightPad=o.util.encodeString(r),this.padWidth=c,this.preserveShort=l}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(data,e,output,t,n,r){for(let o=0;o<n;++o){const c=this.getPadWidth(r),l=Math.max(0,c-o),d=Math.max(0,c-(n-(o+1))),h=r-(l+d),f=e+(l>0?0:o-c);let m=0;m+=l*this.leftPad.length;for(let e=0;e<h;++e)m+=data[f+e].length;m+=d*this.rightPad.length;m+=(l+d+h-1)*this.separator.length,output[t+o]=new Uint8Array(m);const y=output[t+o];let x=0;const O=e=>e.forEach((e=>y[x++]=e));for(let e=0;e<l;++e)O(this.leftPad),O(this.separator);for(let e=0;e<h-1;++e)O(data[f+e]),O(this.separator);if(h>0){O(data[f+h-1]);for(let e=0;e<d;++e)O(this.separator),O(this.rightPad)}else{for(let e=0;e<d-1;++e)O(this.rightPad),O(this.separator);O(this.rightPad)}}}compute(data,e){const t=data.length,n=e.length;if(n>0){let r=e[0];if(0!==r)throw new Error(`First split value must be 0, got ${r}`);for(let i=1;i<n;++i){let n=e[i]>=r;if(n=n&&e[i]<=t,!n)throw new Error(`Invalid split value ${e[i]}, must be in [${r}, ${t}]`);r=e[i]}if(r!==t)throw new Error(`Last split value must be data size. Expected ${t}, got ${r}`)}const r=n-1,c=o.util.getArrayFromDType("int32",n);if(0===t||0===n){const e=new Array(t);for(let i=0;i<=r;++i)c[i]=0;return[e,c]}c[0]=0;for(let i=1;i<=r;++i){const t=e[i]-e[i-1];let n=0;this.nGramWidths.forEach((e=>{n+=this.getNumNGrams(t,e)})),this.preserveShort&&t>0&&0===n&&(n=1),c[i]=c[i-1]+n}const l=new Array(c[r]);for(let i=0;i<r;++i){const t=e[i];let n=c[i];if(this.nGramWidths.forEach((r=>{const o=e[i+1]-e[i],c=this.getNumNGrams(o,r);this.createNGrams(data,t,l,n,c,r),n+=c})),this.preserveShort&&n===c[i]){const r=e[i+1]-e[i];if(0===r)continue;const o=r+2*this.padWidth,c=1;this.createNGrams(data,t,l,n,c,o)}}return[l,c]}}function rb(data,e,t,n,r,o,c,l){return new nb(t,n,r,o,c,l).compute(data,e)}const ab={kernelName:o.StringNGrams,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:o,nGramWidths:c,leftPad:l,rightPad:d,padWidth:h,preserveShortSequences:f}=r,{data:data,dataSplits:m}=t,y=n.data.get(data.dataId).values,x=n.data.get(m.dataId).values,[O,v]=rb(y,x,o,c,l,d,h,f);return[n.makeTensorInfo([O.length],"string",O),n.makeTensorInfo(m.shape,"int32",v)]}};function sb(e,t,n,r){if(!e.length)return;if(0===t.length){for(let i=0;i<e.length;++i)r.push(e.subarray(i,i+1));return}if(1===t.length){const o=t[0];let c=e.indexOf(o);for(;-1!==c;){const t=e.subarray(0,c);n&&0===t.length||r.push(t),c=(e=e.subarray(c+1)).indexOf(o)}return void(n&&0===e.length||r.push(e))}let o=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==t.indexOf(e[i])){const t=e.subarray(o,i);n&&0===t.length||r.push(t),o=i+1}}function ib(input,e,t){const n=input.length,r=[];let c=0,l=0;const d=new Array(n);for(let i=0;i<n;++i){const n=r.length;sb(input[i],e,t,r);const o=r.length-n;d[i]=o,c+=o,l=Math.max(l,o)}const h=o.util.getArrayFromDType("int32",2*c),f=new Array(c),m=[n,l];let y=0;for(let i=0;i<n;++i)for(let e=0;e<d[i];++e)h[2*y]=i,h[2*y+1]=e,f[y]=r[y],++y;return[h,f,m]}const ob={kernelName:o.StringSplit,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:o}=r,{input:input,delimiter:c}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(1!==input.shape.length)throw new Error(`Input must be a vector, got shape: ${input.shape}`);if(0!==c.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${c.shape}`);const l=n.data.get(input.dataId).values,d=n.data.get(c.dataId).values[0],[h,f,m]=ib(l,d,o),y=f.length;return[n.makeTensorInfo([y,2],"int32",h),n.makeTensorInfo([y],"string",f),n.makeTensorInfo([2],"int32",new Int32Array(m))]}};function ub(input,e){const output=o.util.getArrayFromDType("int32",input.length);for(let i=0;i<input.length;++i)output[i]=o.util.fingerPrint64(input[i]).modulo(e).getLowBitsUnsigned();return output}const cb={kernelName:o.StringToHashBucketFast,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:o}=r,{input:input}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(o<=0)throw new Error("Number of buckets must be at least 1");const output=ub(n.data.get(input.dataId).values,o);return n.makeTensorInfo(input.shape,"int32",output)}},lb=sl(o.Tan,(e=>Math.tan(e))),db={kernelName:o.Tan,backendName:"cpu",kernelFunc:lb},hb=sl(o.Tanh,(e=>Math.tanh(e))),pb={kernelName:o.Tanh,backendName:"cpu",kernelFunc:hb};function fb(e,t){const n=new Array(e.rank);for(let i=0;i<n.length;i++)n[i]=e.shape[i]*t[i];const r=Object(o.buffer)(n,e.dtype);for(let i=0;i<r.values.length;++i){const t=r.indexToLoc(i),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const o=e.locToIndex(n);r.values[i]=e.values[o]}return r}const mb={kernelName:o.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{reps:c}=r;nl(o,"tile");const l=fb(n.bufferSync(o),c);return n.makeTensorInfo(l.shape,l.dtype,l.values)}},bb=(a,b)=>{const e=b.value-a.value;return 0===e?a.index-b.index:e};function gb(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const o=r-n+1,i=t-n+1,c=Math.log(o),s=.5*Math.exp(2*c/3),l=.5*Math.sqrt(c*s*(o-s)/o)*Math.sign(i-o/2);gb(e,t,Math.max(n,Math.floor(t-i*s/o+l)),Math.min(r,Math.floor(t+(o-i)*s/o+l)))}const c=e[t];let i=n,l=r;for(o.util.swap(e,n,t),bb(e[r],c)>0&&o.util.swap(e,n,r);i<l;){for(o.util.swap(e,i,l),i++,l--;bb(e[i],c)<0;)i+=1;for(;bb(e[l],c)>0;)l-=1}0===bb(e[n],c)?o.util.swap(e,n,l):(l+=1,o.util.swap(e,l,r)),l<=t&&(n=l+1),t<=l&&(r=l-1)}}function yb(e,t,n,r,c){const l=t[t.length-1],[d,h]=[e.length/l,l],f=o.util.getTypedArrayFromDType(n,d*r),m=o.util.getTypedArrayFromDType("int32",d*r);for(let b=0;b<d;b++){const t=b*h,n=e.subarray(t,t+h);let o=new Array(n.length);n.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(gb(o,r),o=o.slice(0,r)),c&&o.sort(bb);const l=b*r,d=f.subarray(l,l+r),y=m.subarray(l,l+r);for(let i=0;i<r;i++)d[i]=o[i].value,y[i]=o[i].index}const y=t.slice();return y[y.length-1]=r,[Object(o.buffer)(y,n,f),Object(o.buffer)(y,"int32",m)]}const xb={kernelName:o.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{k:c,sorted:l}=r;nl(o,"topk");const d=n.data.get(o.dataId).values,[h,f]=yb(d,o.shape,o.dtype,c,l);return[n.makeTensorInfo(h.shape,h.dtype,h.values),n.makeTensorInfo(f.shape,f.dtype,f.values)]}};const Ob={kernelName:o.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:image,transforms:c}=t,{interpolation:l,fillMode:d,fillValue:h,outputShape:f}=n,[m,y,x,O]=image.shape,[v,k]=null!=f?f:[y,x],w=[m,v,k,O],S=o.util.computeStrides(image.shape),I=S[0],N=S[1],j=S[2],T=o.util.computeStrides(w),C=T[0],$=T[1],E=T[2],A=o.util.getTypedArrayFromDType(image.dtype,o.util.sizeFromShape(w));A.fill(h);const R=r.data.get(image.dataId).values,_=r.data.get(c.dataId).values;for(let b=0;b<m;++b){const e=1===c.shape[0]?_:_.subarray(8*b,8*b+8);for(let t=0;t<v;++t)for(let n=0;n<k;++n)for(let r=0;r<O;++r){let o;const c=e[6]*n+e[7]*t+1;if(0===c)continue;const f=(e[0]*n+e[1]*t+e[2])/c,m=(e[3]*n+e[4]*t+e[5])/c,O=vb(f,x,d),v=vb(m,y,d);switch(l){case"nearest":o=wb(R,y,x,I,N,j,b,v,O,r,h);break;case"bilinear":o=Sb(R,y,x,I,N,j,b,v,O,r,h);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${l}`)}A[b*C+t*$+n*E+r]=o}return r.makeTensorInfo(w,image.dtype,A)}return{dataId:r.write(A,w,image.dtype),shape:image.shape,dtype:image.dtype}}};function vb(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return o.util.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return o.util.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return o.util.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function kb(e,t,n,r,o,c,l,d,h,f,m){return 0<=d&&d<t&&0<=h&&h<n?e[l*r+d*o+h*c+f]:m}function wb(e,t,n,r,o,c,l,d,h,f,m){return kb(e,t,n,r,o,c,l,Math.round(d),Math.round(h),f,m)}function Sb(e,t,n,r,o,c,l,d,h,f,m){const y=Math.floor(d),x=Math.floor(h),O=y+1,v=x+1;return(O-d)*((v-h)*kb(e,t,n,r,o,c,l,y,x,f,m)+(h-x)*kb(e,t,n,r,o,c,l,y,v,f,m))+(d-y)*((v-h)*kb(e,t,n,r,o,c,l,O,x,f,m)+(h-x)*kb(e,t,n,r,o,c,l,O,v,f,m))}function Ib(e,t,n,r){const c=o.util.parseAxisParam(t,n)[0],l=[1,n[0],1];for(let i=0;i<c;i++)l[0]*=n[i];l[1]=n[c];for(let i=c+1;i<n.length;i++)l[2]*=n[i];const d={},h=new Int32Array(n[c]),f=new o.TensorBuffer(l,r,e),m=[],y=1===l[0]&&1===l[2];for(let i=0;i<n[c];i++){let element;if(y)element=e[i].toString();else{const e=[];for(let t=0;t<l[0];t++)for(let n=0;n<l[2];n++)e.push(f.get(t,i,n));element=e.join(",")}if(void 0!==d[element])h[i]=d[element];else{const e=Object.keys(d).length;d[element]=e,h[i]=e,m.push(i)}}const x=l.slice();x[1]=Object.keys(d).length;const O=new o.TensorBuffer(x,r);m.forEach(((e,i)=>{for(let t=0;t<l[0];t++)for(let n=0;n<l[2];n++)O.set(f.get(t,e,n),t,i,n)}));const v=n.slice();return v[c]=x[1],{outputValues:O.values,outputShape:v,indices:h}}const Nb={kernelName:o.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:o}=n,{x:c}=t;nl(c,"unique");const l=r.data.get(c.dataId).values,{outputValues:d,outputShape:h,indices:f}=Ib(l,o,c.shape,c.dtype);return[r.makeTensorInfo(h,c.dtype,d),r.makeTensorInfo([f.length],"int32",f)]}};const jb={kernelName:o.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:o}=t;let{axis:c}=r;c<0&&(c+=o.shape.length);const l=o.shape.length,d=o.shape[c],h=new Array(l-1);let f=0;for(let i=0;i<l;i++)i!==c&&(h[f++]=o.shape[i]);const m=new Array(l).fill(0),y=o.shape.slice();y[c]=1;const x=new Array(d);for(let i=0;i<x.length;i++){m[c]=i;const e=$d({inputs:{x:o},backend:n,attrs:{begin:m,size:y}});x[i]=Vl({inputs:{x:e},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(e)}return x}};const Tb={kernelName:o.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,segmentIds:l}=t,{numSegments:d}=r;nl(c,"unsortedSegmentSum");const h=[],f=[],m=c.shape.length-l.shape.length;let y=l;for(let i=0;i<m;++i){const e=Bh({inputs:{input:y},backend:n,attrs:{dim:i+1}});y=e,f.push(e)}for(let i=0;i<d;++i){const e=o.util.createScalarValue(i,"int32"),t=n.makeTensorInfo([],"int32",e),mask=Th({inputs:{a:t,b:y},backend:n}),r=Fl({inputs:{x:mask},backend:n,attrs:{dtype:"float32"}}),l=vh({inputs:{a:r,b:c},backend:n}),d=wh({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});h.push(d),f.push(t),f.push(mask),f.push(r),f.push(l),f.push(d)}const x=Pf({inputs:h,backend:n,attrs:{axis:0}});return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},Cb=[ql,Xl,Zl,Ql,Wl,ed,sd,id,od,ud,ld,pd,md,yd,Od,Sd,Id,Nd,jd,Hl,Td,Ad,Fd,Dd,Dl,Ld,Bd,$l,Wd,qd,Xd,Yd,Zd,Jd,Qd,eh,rh,sh,ih,oh,uh,ch,lh,hh,ph,fh,mh,bh,gh,yh,Ih,ll,Nh,Ch,Mh,Ph,Wh,Gh,np,sp,ip,cp,hp,pp,fp,bp,yp,vp,Sp,pl,Ip,Gd,jp,Cp,Ep,ml,_p,Mp,Lp,Wp,Up,qp,Xp,Jp,Qp,ef,rf,of,uf,cf,lf,df,hf,pf,ff,gf,yf,vf,Sf,kh,Nf,Tf,$f,Af,Ff,Df,Lf,Bf,Wf,Gf,xl,qf,Qf,nm,Rl,Kh,am,vl,wl,Ul,sm,im,om,um,cm,lm,hm,mm,gm,Om,vm,Im,jl,jm,Cm,Em,Ed,wf,_m,Fm,Mm,Lm,Bm,Wm,Vm,Um,qm,Km,Zm,Qm,tb,ab,ob,cb,Jh,Sh,db,pb,mb,xb,Ob,ad,Nb,jb,Tb,zf];for(const e of Cb)Object(o.registerKernel)(e);const $b={},Eb={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ab(e,t){if(!(e in $b)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const canvas=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;canvas.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete $b[e]}),!1),Object(o.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(Eb.failIfMajorPerformanceCaveat=!1);if(1===e)return canvas.getContext("webgl",Eb)||canvas.getContext("experimental-webgl",Eb);return canvas.getContext("webgl2",Eb)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;$b[e]=n}const n=$b[e];return null==n||n.isContextLost()?(delete $b[e],Ab(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),$b[e])}var Rb,_b,Fb;function Db(e,t){return[t,e]}function Mb(e){const t=o.util.sizeFromShape(e),n=Math.ceil(t/4);return o.util.sizeToSquarishShape(n)}function zb(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Lb(e,t){const n=e;let r,c,l,d,h,f,m,y,x,O;return 2===Object(o.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,c=n.R16F,l=n.RGBA16F,d=n.RGBA32F,h=n.RED,m=4,y=1,x=n.HALF_FLOAT,O=n.FLOAT,f=n.RGBA8):(r=e.RGBA,c=e.RGBA,l=e.RGBA,d=n.RGBA,h=e.RGBA,m=4,y=4,x=null!=t?t.HALF_FLOAT_OES:null,O=e.FLOAT,f=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:c,internalFormatPackedHalfFloat:l,internalFormatPackedFloat:d,textureFormatFloat:h,downloadTextureFormat:f,downloadUnpackNumChannels:m,defaultNumChannels:y,textureTypeHalfFloat:x,textureTypeFloat:O}}function Pb(e,t){const n=t();return Object(o.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Rb||(Rb={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(_b||(_b={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Fb||(Fb={}));function Bb(e){return!!(Object(o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Wb(e,t){return Zb(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const Vb=/ERROR: [0-9]+:([0-9]+):/g;function Ub(e,t){const n=Vb.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],c=e.split("\n"),l=c.length.toString().length+2,d=c.map(((line,e)=>o.util.rightPad((e+1).toString(),l)+line));let h=0;for(let i=0;i<d.length;i++)h=Math.max(d[i].length,h);const f=d.slice(0,r-1),m=d.slice(r-1,r),y=d.slice(r);console.log(f.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${o.util.rightPad(m[0],h)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(y.join("\n"))}function Gb(e,t){if(Pb(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Hb(e,t,n,r,o,c,l){const d=e.getAttribLocation(t,n);return-1!==d&&(Pb(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),Pb(e,(()=>e.vertexAttribPointer(d,o,e.FLOAT,!1,c,l))),Pb(e,(()=>e.enableVertexAttribArray(d))),!0)}function qb(e,t,n,r){Pb(e,(()=>function(e,t,n){Jb(e,n),Pb(e,(()=>e.activeTexture(e.TEXTURE0+n))),Pb(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),Pb(e,(()=>e.uniform1i(n,r)))}function Kb(e,t,n){Pb(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),Pb(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Xb(e,t){Pb(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),Pb(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function Yb(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Zb(e,t,n){const r=Pb(e,(()=>t()));if(null==r)throw new Error(n);return r}function Jb(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function Qb(e,t=2){return o.util.sizeFromShape(e.slice(0,e.length-t))}function eg(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function tg(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Qb(e),...eg(e)]),t}function ng(e){return e%2==0}function rg(e,t){if(e=e.slice(-2),t=t.slice(-2),o.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(ng(n)&&ng(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&ng(e[0])&&ng(t[0])}let ag,sg;function ig(e,t){return null!=e.getExtension(t)}function og(e){try{if(null!=Ab(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function ug(e){if(0===e)return!1;const t=Ab(e);if(1!==e){if(ig(t,"EXT_color_buffer_float"))return cg(t);const e="EXT_color_buffer_half_float";if(ig(t,e)){const n=t.getExtension(e);return function(e,t){const n=Lb(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const o=1,c=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,o,c,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const l=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,l),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const d=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(l),d}(t,n)}return!1}if(!ig(t,"OES_texture_float"))return!1;if(!ig(t,"WEBGL_color_buffer_float"))return!1;return cg(t)}function cg(e){const t=Lb(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),o}function lg(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const dg=Object(o.env)();function hg(){let e,t,n,r,c,output,l,d,h,f;return 2===Object(o.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",c="texture",output="outputColor",l="out vec4 outputColor;",d="\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",h="",f="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",c="texture2D",output="gl_FragColor",l="",d="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",h="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",f="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:c,output:output,defineOutput:l,defineSpecialNaN:d,defineSpecialInf:h,defineRound:f}}function pg(e,t,n="index"){const r=o.util.computeStrides(t);return r.map(((t,i)=>`${`int ${e[i]} = ${n} / ${t}`}; ${i===r.length-1?`int ${e[i+1]} = ${n} - ${e[i]} * ${t}`:`index -= ${e[i]} * ${t}`};`)).join("")}function fg(e,t,n="index"){const r=o.util.computeStrides(t);return r.map(((t,i)=>`${`int ${e[i]} = ${n} / outShapeStrides[${i}]`}; ${i===r.length-1?`int ${e[i+1]} = ${n} - ${e[i]} * outShapeStrides[${i}]`:`index -= ${e[i]} * outShapeStrides[${i}]`};`)).join("")}function mg(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),o=new Array(n-1);o[n-2]=r[n-1];for(let i=n-3;i>=0;--i)o[i]=`(${o[i+1]} * ${r[i+1]})`;return o}(e.map(((e,i)=>i)),t);return r.map(((t,i)=>`${`int ${e[i]} = ${n} / ${r[i]}`}; ${i===r.length-1?`int ${e[i+1]} = ${n} - ${e[i]} * ${r[i]}`:`index -= ${e[i]} * ${r[i]}`};`)).join("")}function bg(e){const t=o.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}dg.registerFlag("HAS_WEBGL",(()=>dg.getNumber("WEBGL_VERSION")>0)),dg.registerFlag("WEBGL_VERSION",(()=>og(2)?2:og(1)?1:0)),dg.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),dg.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===dg.get("WEBGL_VERSION"))),dg.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),dg.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),dg.registerFlag("WEBGL_PACK",(()=>dg.getBool("HAS_WEBGL"))),dg.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_CLIP",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_PACK_REDUCE",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_LAZILY_UNPACK",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_CONV_IM2COL",(()=>dg.getBool("WEBGL_PACK"))),dg.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==ag){const t=Ab(e);ag=t.getParameter(t.MAX_TEXTURE_SIZE)}return ag}(dg.getNumber("WEBGL_VERSION")))),dg.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==sg){const t=Ab(e);sg=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sg)}(dg.getNumber("WEBGL_VERSION")))),dg.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=dg.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Ab(e);return t=ig(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:ig(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),dg.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>dg.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!o.device_util.isMobile())),dg.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=Ab(e);if(1===e){if(!ig(t,"OES_texture_float"))return!1}else if(!ig(t,"EXT_color_buffer_float"))return!1;return cg(t)}(dg.getNumber("WEBGL_VERSION")))),dg.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!dg.getBool("WEBGL_FORCE_F16_TEXTURES")&&dg.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),dg.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>ug(dg.getNumber("WEBGL_VERSION")))),dg.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=dg.getNumber("WEBGL_VERSION"))&&null!=Ab(e).fenceSync;var e})),dg.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>dg.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),dg.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),dg.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>o.device_util.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),dg.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),dg.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),dg.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),dg.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),dg.registerFlag("WEBGL_EXP_CONV",(()=>!1)),dg.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>dg.getBool("IS_TEST")));const gg="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:yg}=o.backend_util;function xg(e,t,n){const r=[];if(e.forEach((e=>{const t=o.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=$g(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const c=r.join("\n"),l=e.map((e=>function(e,t,n=!1,r){let c="";c+=n?vg(e,r):Og(e,r);const l=e.shapeInfo.logicalShape,d=t.logicalShape;l.length<=d.length&&(c+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),c="get"+r+"AtOutCoords",l=e.shapeInfo.logicalShape.length,d=t.logicalShape.length,h=yg(e.shapeInfo.logicalShape,t.logicalShape),f=Cg(d),m=d-l;let y;const x=["x","y","z","w","u","v"];y=0===l?"":d<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${x[e+m]} = 0;`)).join("\n");let O="";O=d<2&&l>0?"coords":e.shapeInfo.logicalShape.map(((s,i)=>`coords.${x[i+m]}`)).join(", ");let output="return outputValue;";const v=1===o.util.sizeFromShape(e.shapeInfo.logicalShape),k=1===o.util.sizeFromShape(t.logicalShape);if(1!==l||v||k){if(v&&!k)output=1===d?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(h.length){const e=l-2,t=l-1;h.indexOf(e)>-1&&h.indexOf(t)>-1?output="return vec4(outputValue.x);":h.indexOf(e)>-1?output="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":h.indexOf(t)>-1&&(output="return vec4(outputValue.xx, outputValue.zz);")}}else output="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${c}() {\n      ${f} coords = getOutputCoords();\n      ${y}\n      vec4 outputValue = get${r}(${O});\n      ${output}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),c="get"+r+"AtOutCoords",l=t.texShape,d=e.shapeInfo.texShape,h=e.shapeInfo.logicalShape.length,f=t.logicalShape.length;if(!e.shapeInfo.isUniform&&h===f&&null==e.shapeInfo.flatOffset&&o.util.arraysEqual(d,l))return`\n      float ${c}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const m=Cg(f),y=yg(e.shapeInfo.logicalShape,t.logicalShape),x=f-h;let O;const v=["x","y","z","w","u","v"];O=0===h?"":f<2&&y.length>=1?"coords = 0;":y.map((e=>`coords.${v[e+x]} = 0;`)).join("\n");let k="";k=f<2&&h>0?"coords":e.shapeInfo.logicalShape.map(((s,i)=>`coords.${v[i+x]}`)).join(", ");return`\n    float ${c}() {\n      ${m} coords = getOutputCoords();\n      ${O}\n      return get${r}(${k});\n    }\n  `}(e,t));return c}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),d=t.texShape,h=hg(),f=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(h);let m,y,x=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${kg}\n    ${wg}\n    ${Sg}\n  `}(h);t.isPacked?(m=function(e,t,n){switch(e.length){case 0:return Ng();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(o.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const c=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${c});\n      int c = imod(index, ${c}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],o=Math.ceil(e[2]/2),c=o*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${c};\n      index -= b * ${c};\n\n      int r = 2 * (index / ${o});\n      int c = imod(index, ${o}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],o=Math.ceil(e[e.length-1]/2),c=o*Math.ceil(e[e.length-2]/2);let l=c,d="",h="b, r, c";for(let b=2;b<e.length-1;b++)l*=e[e.length-b-1],d=`\n      int b${b} = index / ${l};\n      index -= b${b} * ${l};\n    `+d,h=`b${b}, `+h;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${d}\n\n      int b = index / ${c};\n      index -= b * ${c};\n\n      int r = 2 * (index / ${o});\n      int c = imod(index, ${o}) * 2;\n\n      return ivec${e.length}(${h});\n    }\n  `}(e,t,n)}}(t.logicalShape,d,n.enableShapeUniforms),y=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(h)):(m=function(e,t,n){switch(e.length){case 0:return Ng();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(o.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${fg(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=pg(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${fg(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=pg(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=pg(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=pg(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,d,n.enableShapeUniforms),y=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(h)),n.packedInputs&&(x+=Ig);return[x,f,y,c,m,l,n.userCode].join("\n")}function Og(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[o,c]=e.shapeInfo.texShape;if(1===o&&1===c)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const l=jg(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${l});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[d,h]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${d}, ${h}, ${l});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${Tg(e)}\n      }\n    `;const o=e.shapeInfo.texShape,c=o[0],l=o[1];if(1===l&&1===c)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const d=jg(n);if(1===l)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${d}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${d}) + 0.5) / ${c}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===c)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${d}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${d}) + 0.5) / ${l}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${c}, ${l}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,c="get"+r.charAt(0).toUpperCase()+r.slice(1),l=e.shapeInfo.texShape;if(null!=l&&o.util.arraysEqual(n,l)){if(t)return`\n      float ${c}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=l[0];return`\n    float ${c}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${l[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:d,keptDims:h}=o.util.squeezeShape(n),f=d;if(f.length<n.length){const n=["row","col"];return`\n      ${Og(Eg(e,f),t)}\n      float ${c}(int row, int col) {\n        return ${c}(${Ag(n,h)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${c}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Tg(e)}\n      }\n    `;const m=l[0],y=l[1],x=jg(r);if(1===y)return t?`\n      float ${c}(int row, int col) {\n        float index = dot(vec3(row, col, ${x}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${c}(int row, int col) {\n      float index = dot(vec3(row, col, ${x}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${m}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===m)return t?`\n      float ${c}(int row, int col) {\n        float index = dot(vec3(row, col, ${x}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${c}(int row, int col) {\n      float index = dot(vec3(row, col, ${x}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${y}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(t)return`\n      float ${c}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${x};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `;return`\n  float ${c}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${x};\n    vec2 uv = uvFromFlat(${m}, ${y}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,c="get"+r.charAt(0).toUpperCase()+r.slice(1),l=n[1]*n[2],d=n[2],{newShape:h,keptDims:f}=o.util.squeezeShape(n),m=h;if(m.length<n.length){const n=["row","col","depth"];return`\n        ${Og(Eg(e,m),t)}\n        float ${c}(int row, int col, int depth) {\n          return ${c}(${Ag(n,f)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${c}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${l}, ${d}, 1)));\n        ${Tg(e)}\n      }\n    `;const y=e.shapeInfo.texShape,x=y[0],O=y[1],v=e.shapeInfo.flatOffset;if(O===l&&null==v)return t?`\n      float ${c}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${c}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${d}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${O}.0, ${x}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(O===d&&null==v)return t?`\n      float ${c}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${c}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${O}.0, ${x}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const k=jg(r);if(t)return`\n    float ${c}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${l} + col * ${d} + depth + ${k};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `;return`\n      float ${c}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${l} + col * ${d} + depth + ${k};\n        vec2 uv = uvFromFlat(${x}, ${O}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,c="get"+r.charAt(0).toUpperCase()+r.slice(1),l=n[3],d=n[2]*l,h=n[1]*d,{newShape:f,keptDims:m}=o.util.squeezeShape(n);if(f.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Og(Eg(e,f),t)}\n      float ${c}(int row, int col, int depth, int depth2) {\n        return ${c}(${Ag(n,m)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${c}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${h}, ${d}, ${l}, 1)));\n        ${Tg(e)}\n      }\n    `;const y=e.shapeInfo.flatOffset,x=e.shapeInfo.texShape,O=x[0],v=x[1],k=`int stride2 = ${r}Shape[3];`,w=`int stride1 = ${r}Shape[2] * stride2;`,S=`int stride0 = ${r}Shape[1] * stride1;`;if(v===h&&null==y)return t?`\n      float ${c}(int row, int col, int depth, int depth2) {\n        ${k}\n        ${w}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${c}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${d}, ${l}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${v}.0, ${O}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(v===l&&null==y)return t?`\n      float ${c}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${c}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${v}.0, ${O}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const I=jg(r);if(t)return`\n    float ${c}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${k}\n      ${w}\n      ${S}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${I});\n      return sampleTexture(${r}, uv);\n    }\n  `;return`\n    float ${c}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${d} +\n          depth * ${l} + depth2;\n      vec2 uv = uvFromFlat(${O}, ${v}, index + ${I});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),c=t[4],l=t[3]*c,d=t[2]*l,h=t[1]*d,{newShape:f,keptDims:m}=o.util.squeezeShape(t);if(f.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Og(Eg(e,f))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Ag(t,m)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${d}, ${l}, ${c})) +\n          depth3;\n        ${Tg(e)}\n      }\n    `;const y=e.shapeInfo.flatOffset,x=e.shapeInfo.texShape,O=x[0],v=x[1];if(v===h&&null==y)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${d}, ${l}, ${c}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${v}.0, ${O}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(v===c&&null==y)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${v}.0, ${O}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const k=jg(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${d} + depth * ${l} +\n          depth2 * ${c} + depth3 + ${k};\n      vec2 uv = uvFromFlat(${O}, ${v}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:c,keptDims:l}=o.util.squeezeShape(t);if(c.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Og(Eg(e,c))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Ag(t,l)});\n      }\n    `}const d=t[5],h=t[4]*d,f=t[3]*h,m=t[2]*f,y=t[1]*m;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${y}, ${m}, ${f}, ${h})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${d}, 1)));\n        ${Tg(e)}\n      }\n    `;const x=e.shapeInfo.flatOffset,O=e.shapeInfo.texShape,v=O[0],k=O[1];if(k===y&&null==x)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${m}, ${f}, ${h}, ${d})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${k}.0, ${v}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(k===d&&null==x)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${k}.0, ${v}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const w=jg(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${y} + col * ${m} + depth * ${f} +\n          depth2 * ${h} + depth3 * ${d} + depth4 + ${w};\n      vec2 uv = uvFromFlat(${v}, ${k}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function vg(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=hg();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,c=hg();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `;const l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${l[0]}, ${l[1]}, index);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,c="get"+r.charAt(0).toUpperCase()+r.slice(1),l=e.shapeInfo.texShape,d=l[0],h=l[1],f=hg();if(null!=l&&o.util.arraysEqual(n,l))return t?`\n      vec4 ${c}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${f.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${c}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${h}.0, ${d}.0);\n\n        return ${f.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${c}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${f.texture2D}(${r}, uv);\n    }\n  `;const m=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)],y=Math.ceil(n[1]/2);return`\n    vec4 ${c}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${y}, ${m[0]}, ${m[1]}, row, col);\n      return ${f.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),c=e.shapeInfo.texShape,l=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)];if(1===n[0]){const r=[1,2],c=["b","row","col"];return`\n        ${vg(Eg(e,n.slice(1)),t)}\n        vec4 ${o}(int b, int row, int col) {\n          return ${o}(${Ag(c,r)});\n        }\n      `}const d=hg();if(t)return`\n    vec4 ${o}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${d.texture2D}(${r}, uv);\n    }\n  `;const h=l[0],f=l[1],m=Math.ceil(n[2]/2),y=m*Math.ceil(n[1]/2);return`\n    vec4 ${o}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${h}, ${f}, ${y}, ${m}, b, row, col);\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=hg();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${o.texture2D}(${n}, uv);\n    }\n  `;const c=e.shapeInfo.logicalShape,l=c.length,d=e.shapeInfo.texShape,h=[Math.ceil(d[0]/2),Math.ceil(d[1]/2)],f=h[0],m=h[1],y=Math.ceil(c[l-1]/2);let x=y*Math.ceil(c[l-2]/2),O="int b, int row, int col",v=`b * ${x} + (row / 2) * ${y} + (col / 2)`;for(let b=2;b<l-1;b++)O=`int b${b}, `+O,x*=c[l-b-1],v=`b${b} * ${x} + `+v;return`\n    vec4 ${r}(${O}) {\n      int index = ${v};\n      int texR = index / ${m};\n      int texC = index - texR * ${m};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}, ${f});\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const kg="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",wg="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Sg="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ig="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ng(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function jg(e){return`offset${e}`}function Tg(e){const t=e.name,n=o.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Cg(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function $g(e,t,n){const{newShape:r,keptDims:c}=o.util.squeezeShape(t),l=t.length,d=e&&3===l&&1===t[0],h=d?t.slice(1):r,f=!e&&l>1&&!o.util.arraysEqual(t,n)&&r.length<l||d;return{useSqueezeShape:f,uniformShape:f?h:t,keptDims:c}}function Eg(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Ag(e,t){return t.map((t=>e[t])).join(", ")}function Rg(e,t,n,output){const r=n.map(((input,i)=>{const e={logicalShape:input.shape,texShape:input.isUniform?null:input.texData.texShape,isUniform:input.isUniform,isPacked:!input.isUniform&&input.texData.isPacked,flatOffset:null};return null!=input.texData&&null!=input.texData.slice&&input.texData.slice.flatOffset>0&&(e.flatOffset=input.texData.slice.flatOffset),{name:t.variableNames[i],shapeInfo:e}})),c=r.map((e=>e.shapeInfo)),l={logicalShape:output.shape,texShape:output.texData.texShape,isUniform:!1,isPacked:output.texData.isPacked,flatOffset:null},source=xg(r,l,t),d=function(e,t){const n=Zb(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(Pb(e,(()=>e.shaderSource(n,t))),Pb(e,(()=>e.compileShader(n))),Object(o.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw Ub(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,source),h=e.createProgram(d);return Object(o.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:d,source:source,webGLProgram:h,inShapeInfos:c,outShapeInfo:l,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:d,source:source,webGLProgram:h,inShapeInfos:c,outShapeInfo:l},_g(e,t,h))}function _g(e,t,n){const r={},c={},l={},d=[];let h,f,m,y=null,x=null;x=e.getUniformLocation(n,"NAN",!1),1===Object(o.env)().getNumber("WEBGL_VERSION")&&(y=e.getUniformLocation(n,"INFINITY",!1));const O=!1;for(let i=0;i<t.variableNames.length;i++){const o=t.variableNames[i];r[o]=e.getUniformLocation(n,o,O),r[`offset${o}`]=e.getUniformLocation(n,`offset${o}`,O),t.enableShapeUniforms&&(c[`${o}Shape`]=e.getUniformLocation(n,`${o}Shape`,O),l[`${o}TexShape`]=e.getUniformLocation(n,`${o}TexShape`,O))}return t.enableShapeUniforms&&(h=e.getUniformLocation(n,"outShape",O),m=e.getUniformLocation(n,"outShapeStrides",O),f=e.getUniformLocation(n,"outTexShape",O)),t.customUniforms&&t.customUniforms.forEach(((t,i)=>{d[i]=e.getUniformLocation(n,t.name,O)})),{uniformLocations:r,customUniformLocations:d,infLoc:y,nanLoc:x,inShapesLocations:c,inTexShapesLocations:l,outShapeLocation:h,outShapeStridesLocation:m,outTexShapeLocation:f}}function Fg(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((s,i)=>{const e=s.logicalShape,input=t[i],n=input.shape;if(!o.util.arraysEqual(e,n))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${e} and ${n} must match`);if(s.isUniform&&input.isUniform)return;const r=s.texShape,c=input.isUniform?null:input.texData.texShape;if(!o.util.arraysEqual(r,c))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${r} and ${c} must match`)}))}function Dg(e){return Object(o.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Mg{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Rb.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=hg();this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?fg(["r","c","d"],e):pg(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class zg{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Rb.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=hg();this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?fg(["r","c","d"],e):pg(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Lg{constructor(e){this.variableNames=["A"],this.outTexUsage=_b.DOWNLOAD;const t=hg();this.outputShape=e,this.userCode=`\n      ${gg}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class Pg{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=_b.DOWNLOAD;const t=hg();this.outputShape=e,this.userCode=`\n      ${gg}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class Bg{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=hg();this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length);let output="result";t&&(output="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":bg(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `}}class Wg{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=hg();this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length);let r="",output="result";t&&(output="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let col=0;col<=1;col++){const o=2*t+col;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${o}] = values[0];\n            } else if (offset == 1) {\n              result[${o}] = values[1];\n            } else if (offset == 2) {\n              result[${o}] = values[2];\n            } else {\n              result[${o}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":bg(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${output};\n        }\n    `}}function Vg(e){const t=hg();return function(e,t){const n=Zb(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(Pb(e,(()=>e.shaderSource(n,t))),Pb(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ug(e){return function(e,data){const t=Zb(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Pb(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,t))),Pb(e,(()=>e.bufferData(e.ARRAY_BUFFER,data,e.STATIC_DRAW))),t}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Gg(e){return function(e,data){const t=Zb(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Pb(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t))),Pb(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,data,e.STATIC_DRAW))),t}(e,new Uint16Array([0,1,2,2,1,3]))}function Hg(e,t,n,r,c,l){!function(e,t){const n=Object(o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const d=function(e){return Zb(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),h=e.TEXTURE_2D;return Pb(e,(()=>e.bindTexture(h,d))),Pb(e,(()=>e.texParameteri(h,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),Pb(e,(()=>e.texParameteri(h,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),Pb(e,(()=>e.texParameteri(h,e.TEXTURE_MIN_FILTER,e.NEAREST))),Pb(e,(()=>e.texParameteri(h,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===Object(o.env)().getNumber("WEBGL_VERSION")?Pb(e,(()=>e.texImage2D(h,0,r,t,n,0,c,l,null))):Pb(e,(()=>e.texStorage2D(h,1,r,t,n))),Pb(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:d,texShape:[n,t]}}function qg(e){return e.internalFormatFloat}function Kg(e){return e.internalFormatHalfFloat}function Xg(e){return e.downloadTextureFormat}function Yg(e){return e.internalFormatPackedFloat}function Zg(e){return e.internalFormatPackedHalfFloat}function Jg(e,t,n,r,o,c,l,d){const h=e,f=new Float32Array(function(e,t){const[n,r]=zb(e,t);return n*r*4}(c,l));return h.bindBuffer(h.PIXEL_PACK_BUFFER,t),h.getBufferSubData(h.PIXEL_PACK_BUFFER,0,f),h.bindBuffer(h.PIXEL_PACK_BUFFER,null),f}class Qg{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Object(o.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){$b[e]=t}(t,e)):this.gl=Ab(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===Object(o.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Wb(this.gl,e),ig(this.gl,t))this.textureHalfFloatExtension=Wb(this.gl,t);else if(Object(o.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),ig(this.gl,r))this.colorBufferHalfFloatExtension=Wb(this.gl,r);else if(Object(o.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",ig(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!ig(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=Ug(this.gl),this.indexBuffer=Gg(this.gl),this.framebuffer=function(e){return Zb(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Lb(this.gl,this.textureHalfFloatExtension)}get debug(){return Object(o.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Pb(e,(()=>e.finish())),Pb(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),Pb(e,(()=>e.deleteFramebuffer(this.framebuffer))),Pb(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),Pb(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),Pb(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=Db(t,n);return Hg(e,o,c,qg(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=Db(t,n);return Hg(e,o,c,Kg(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=Db(t,n);return Hg(e,o,c,Xg(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Pb(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===Object(o.env)().getNumber("WEBGL_VERSION")?Pb(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):Pb(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===Object(o.env)().getNumber("WEBGL_VERSION")?Pb(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):Pb(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),Pb(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,data){this.throwIfDisposed(),function(e,t,n,r,data,c){let l,d,h;Pb(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),data instanceof Uint8Array?(l=new Uint8Array(n*r*4),d=e.UNSIGNED_BYTE,h=e.RGBA):(l=new Float32Array(n*r*4),d=e.FLOAT,h=c.internalFormatPackedFloat),l.set(data),2===Object(o.env)().getNumber("WEBGL_VERSION")?Pb(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,d,l))):Pb(e,(()=>e.texImage2D(e.TEXTURE_2D,0,h,n,r,0,e.RGBA,d,l))),Pb(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,data,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=zb(t,n);return Hg(e,o,c,Zg(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,c]=zb(t,n);return Hg(e,o,c,Yg(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Xb(this.gl,this.framebuffer),this.outputTexture=null),Pb(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[o,c]=Db(t,n),l=new Uint8Array(t*n*4);return Pb(e,(()=>e.readPixels(0,0,o,c,r.downloadTextureFormat,e.UNSIGNED_BYTE,l))),new Float32Array(l.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,o,c){return Jg(this.gl,e,0,0,0,o,c,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const o=e.createBuffer();Pb(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,o)));const c=16*t*n;return Pb(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,c,e.STREAM_READ))),Pb(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),Pb(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),o}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Object(o.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(o,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=o}else Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return Pb(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=Vg(t));const n=function(e){return Zb(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return Pb(t,(()=>t.attachShader(n,this.vertexShader))),Pb(t,(()=>t.attachShader(n,e))),function(e,t){if(Pb(e,(()=>e.linkProgram(t))),!Object(o.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&Gb(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return Pb(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Hb(e,t,"clipSpacePos",n,3,20,0)&&Hb(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&Pb(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Gb(this.gl,this.program),Pb(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Zb(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Pb(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),qb(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,o]=zb(t,n);this.setOutputMatrixTextureDriver(e,r,o)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Gb(this.gl,this.program),Yb(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Pb(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Pb(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Wb(this.gl,2===Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await o.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let i=0;for(;i<e.length;++i){if(!e[i]())break}return i-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let i=0;i<=e;++i){const{resolveFn:e}=this.itemsToPoll[i];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||o.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Kb(this.gl,e,this.framebuffer),this.debug&&Yb(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Kb(this.gl,this.outputTexture,this.framebuffer),this.debug&&Yb(this.gl)):Xb(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;Kb(r,e,this.framebuffer),this.debug&&Yb(r),this.outputTexture=e,Pb(r,(()=>r.viewport(0,0,t,n))),Pb(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),Pb(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:ey,bincountImpl:ty,bincountReduceImpl:ny,castImpl:ry,ceilImpl:ay,concatImpl:sy,equalImpl:iy,expImpl:oy,expm1Impl:uy,floorImpl:cy,gatherNdImpl:ly,gatherV2Impl:dy,greaterImpl:hy,greaterEqualImpl:py,lessImpl:fy,lessEqualImpl:my,linSpaceImpl:by,logImpl:gy,maxImpl:yy,maximumImpl:xy,minimumImpl:Oy,multiplyImpl:vy,negImpl:ky,notEqualImpl:wy,prodImpl:Sy,raggedTensorToTensorImpl:Iy,rangeImpl:Ny,rsqrtImpl:jy,scatterImpl:Ty,sigmoidImpl:Cy,simpleAbsImpl:$y,sliceImpl:Ey,sparseFillEmptyRowsImpl:Ay,sparseReshapeImpl:Ry,sparseSegmentReductionImpl:_y,sqrtImpl:Fy,stridedSliceImpl:Dy,stringNGramsImpl:My,stringSplitImpl:zy,stringToHashBucketFastImpl:Ly,subImpl:Py,tileImpl:By,topKImpl:Wy,transposeImpl:Vy,uniqueImpl:Uy}=r;function Gy(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Hy(e,t){return 1===t?[e]:Gy(e,t)}class qy{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Dg(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Hy("rc",this.rank),t=Cg(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),output=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let col=0;col<=1;col++){let r=`${0===n?"r":"rp1"}, ${0===col?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let i=this.rank-2;i<this.rank;i++)t+=`${e[i]} >= ${this.enableShapeUniforms?`outShape[${i}]`:this.outputShape[i]}`,i<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),col=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${n};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Ky{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length);let n="";for(let i=0;i<4;i++){let e="thisRC = rc;";i%2==1&&(e+="thisRC.z += 1;"),i>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${i>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i>0?"}":""}\n      `}var r,o;this.userCode=`\n      ${r=t,o=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${o?mg(["r","c","d"],"inputShape"):pg(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":bg(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Xy{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Zy(t,n),o=Jy(e,r,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const c=Yy(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=c,this.log();const e=this.freeTextures[o].shift();return this.usedTextures[o].push(e),e}let l;return r===Fb.PACKED_2X2_FLOAT32?l=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===Fb.PACKED_2X2_FLOAT16?l=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===Fb.UNPACKED_FLOAT32?l=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===Fb.UNPACKED_FLOAT16?l=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===Fb.PACKED_4X1_UNSIGNED_BYTE&&(l=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[o].push(l),this.numUsedTextures++,this._numBytesAllocated+=c,this.log(),l}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const c=Zy(n,r),l=Jy(t,c,r);l in this.freeTextures||(this.freeTextures[l]=[]);const d=Yy(t,c,this.gpgpu.gl,this.gpgpu.textureConfig,r),h=Object(o.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==h&&this._numBytesAllocated>h?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=d):(this.freeTextures[l].push(e),this.numFreeTextures++,this._numBytesFree+=d),this.numUsedTextures--;const f=this.usedTextures[l],m=f.indexOf(e);if(m<0)throw new Error("Cannot release a texture that was never provided by this texture manager");f.splice(m,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Yy(e,t,n,r,o){const c=function(e,t){switch(e){case Fb.PACKED_2X2_FLOAT32:return Yg(t);case Fb.PACKED_2X2_FLOAT16:return Zg(t);case Fb.UNPACKED_FLOAT32:return qg(t);case Fb.UNPACKED_FLOAT16:return Kg(t);case Fb.PACKED_4X1_UNSIGNED_BYTE:return Xg(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let l;if(o){const[t,n]=zb(e[0],e[1]);l=t*n}else{const[t,n]=Db(e[0],e[1]);l=t*n}const d=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,c);return l*d}function Zy(e,t){if(e===_b.UPLOAD)return Fb.PACKED_2X2_FLOAT32;if(e===_b.RENDER||null==e)return function(e){return Object(o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?Fb.PACKED_2X2_FLOAT32:Fb.UNPACKED_FLOAT32:e?Fb.PACKED_2X2_FLOAT16:Fb.UNPACKED_FLOAT16}(t);if(e===_b.DOWNLOAD||e===_b.PIXELS)return Fb.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Jy(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Qy{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ex="return abs(x);";const tx="return x;";class nx{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class rx{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length);const t=e.length,n=Hy("rc",t),r=Cg(t),o=function(e,t){if(1===e)return"rc";let n="";for(let i=0;i<e;i++)n+=t[i],i<e-1&&(n+=",");return n}(t,n),c=n.slice(-2),l=t<=1?"rc":`vec2(${c.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${l}));\n      }\n    `}}const ax=o.kernel_impls.whereImpl,sx={};const ix=Object(o.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class ox extends o.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Object(o.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof Qg)t=e;else{const n=Ab(Object(o.env)().getNumber("WEBGL_VERSION"),e);t=new Qg(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=Ab(Object(o.env)().getNumber("WEBGL_VERSION"));t=new Qg(e),this.binaryCache=((n=Object(o.env)().getNumber("WEBGL_VERSION"))in sx||(sx[n]={}),sx[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Xy(this.gpgpu),this.numMBBeforeWarning=null==Object(o.env)().global.screen?1024:Object(o.env)().global.screen.height*Object(o.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o.DataStorage(this,Object(o.engine)())}nextDataId(){return ox.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((Object(o.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Object(o.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:_b.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,c){if(Object(o.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:_b.UPLOAD,refCount:c})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:c,slice:l,shape:d,isPacked:h}=t;if(null!=l){let t;t=h?new nx(d,tx):new Qy(d,tx);const n=this.runWebGLProgram(t,[{dataId:e,shape:d,dtype:r}],r),data=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),data}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const f=null!=this.activeTimers;let m,y;if(f&&(m=o.util.now()),"complex64"===r){const e=this.readSync(c.real.dataId),t=this.readSync(c.imag.dataId);y=o.backend_util.mergeRealAndImagArrays(e,t)}else y=this.getValuesFromTexture(e);return f&&(this.downloadWaitMs+=o.util.now()-m),this.convertAndCacheOnCPU(e,y)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:c,dtype:l,complexTensorInfos:d,isPacked:h}=t;if(null!=c){let t;t=h?new nx(r,tx):new Qy(r,tx);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:l}],l),data=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),data}if(null!=n)return this.convertAndCacheOnCPU(e);if(Object(o.env)().getBool("DEBUG")&&!Object(o.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Object(o.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let f,m,y=null;if("complex64"!==l&&Object(o.env)().get("WEBGL_BUFFER_SUPPORTED")){f=this.decode(e);const t=this.texData.get(f.dataId);y=this.gpgpu.createBufferFromTexture(t.texture.texture,...Mb(r))}if(this.pendingRead.set(e,[]),"complex64"!==l&&await this.gpgpu.createAndWaitForFence(),"complex64"===l){const e=await Promise.all([this.read(d.real.dataId),this.read(d.imag.dataId)]),t=e[0],n=e[1];m=o.backend_util.mergeRealAndImagArrays(t,n)}else if(null==y)m=this.getValuesFromTexture(e);else{const e=o.util.sizeFromShape(r);m=this.gpgpu.downloadFloat32MatrixFromBuffer(y,e)}if(null!=f&&this.disposeIntermediateTensorInfo(f),null!=y){const e=this.gpgpu.gl;Pb(e,(()=>e.deleteBuffer(y)))}const x=this.convertAndCacheOnCPU(e,m),O=this.pendingRead.get(e);return this.pendingRead.delete(e),O.forEach((e=>e(x))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Object(o.engine)().removeDataId(e,this),this.pendingDeletes--),x}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:c,slice:l,dtype:d,isPacked:h,texture:f}=n;if("complex64"===d)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=l){let n;n=h?new nx(c,tx):new Qy(c,tx);const r=this.runWebGLProgram(n,[{dataId:e,shape:c,dtype:d}],d),o=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),o}if(null==f)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const m=this.decode(e,t.customTexShape),y=Object(o.engine)().makeTensorFromTensorInfo(m),x=this.texData.get(m.dataId);return Object.assign({tensorRef:y},x.texture)}bufferSync(e){const data=this.readSync(e.dataId);if("string"===e.dtype)try{const t=data.map((e=>o.util.decodeString(e)));return Object(o.buffer)(e.shape,e.dtype,t)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Object(o.buffer)(e.shape,e.dtype,data)}checkNumericalProblems(e){if(null!=e)for(let i=0;i<e.length;i++){const t=e[i];if(!Bb(t)){if(Object(o.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${t} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${t} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),c=o.util.sizeFromShape(t);if(Object(o.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...Mb(t)).subarray(0,c);return this.disposeIntermediateTensorInfo(n),o}const l=Object(o.env)().getBool("WEBGL_PACK")&&!0===r,d=l?tg(t):t,h=l?new Pg(d):new Lg(d),output=this.runWebGLProgram(h,[{shape:d,dtype:n,dataId:e}],"float32"),f=this.texData.get(output.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(f.texture.texture,f.texShape[0],f.texShape[1]).subarray(0,c);return this.disposeIntermediateTensorInfo(output),m}timerAvailable(){return Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const c=o.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),l=o.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const d={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(c);d.kernelMs=o.util.sum(e),d.getExtraProfileInfo=()=>e.map(((e,i)=>({name:l[i],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else d.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,d})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:o.util.now(),endMs:null}}endTimer(e){return Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=o.util.now(),e)}async getQueryTime(e){if(Object(o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:o,isPacked:c,slice:l}=this.texData.get(e),d=l&&l.origDataId||e,h=this.dataRefCount.get(d);h>1?this.dataRefCount.set(d,h-1):(this.dataRefCount.delete(d),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,o,c)));const f=this.texData.get(e);f.texture=null,f.texShape=null,f.isPacked=!1,f.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=ix){return Object(o.env)().getBool("WEBGL_CPU_FORWARD")&&e.every((input=>null==this.texData.get(input.dataId).texture&&o.util.sizeFromShape(input.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){o.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ax(e.shape,t)}packedUnaryOp(e,t,n){const r=new nx(e.shape,t),c=this.compileAndRun(r,[e],n);return Object(o.engine)().makeTensorFromTensorInfo(c)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=$y(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Object(o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ex,e.dtype);const t=new Qy(e.shape,ex),n=this.compileAndRun(t,[e]);return Object(o.engine)().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&o.util.isString(n[0])){const c=n.map((e=>o.util.encodeString(e)));r=this.write(c,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return Object(o.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(input){const e=new rx(input.shape);return this.runWebGLProgram(e,[input],input.dtype)}packTensor(input){const e=new qy(input.shape);return this.runWebGLProgram(e,[input],input.dtype,null,!0)}packedReshape(input,e){const t=[Qb(input.shape),...eg(input.shape)],n={dtype:input.dtype,shape:t,dataId:input.dataId},r=[Qb(e),...eg(e)],o=new Ky(r,t),c=[t],output=this.runWebGLProgram(o,[n],input.dtype,c,!0);return{dataId:output.dataId,shape:e,dtype:output.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:c,dtype:l}=n;if(null!=t){const e=o.util.sizeFromShape(c),n=t[0]*t[1]*4;o.util.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const d=tg(c);let h;h=r?new zg(d):new Mg(d);const f=[null!=t?t:Mb(d)];return{dtype:l,shape:c,dataId:this.runWebGLProgram(h,[{shape:d,dtype:l,dataId:e}],l,f,!0,t).dataId}}runWebGLProgram(e,t,n,r,c=!1,l){const output=this.makeTensorInfo(e.outputShape,n),d=this.texData.get(output.dataId);if(e.packedOutput&&(d.isPacked=!0),e.outPackingScheme===Rb.DENSE){const t=null!=l?l:Mb(e.outputShape);d.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(d.usage=e.outTexUsage),0===o.util.sizeFromShape(output.shape))return d.values=o.util.getTypedArrayFromDType(output.dtype,0),output;const h=[],f=t.map((input=>{if("complex64"===input.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let t=this.texData.get(input.dataId);if(null==t.texture){if(!e.packedInputs&&o.util.sizeFromShape(input.shape)<=Object(o.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:input.shape,texData:null,isUniform:!0,uniformValues:t.values};e.packedInputs&&(t.isPacked=!0,t.shape=input.shape)}if(this.uploadToGPU(input.dataId),!!t.isPacked!=!!e.packedInputs)input=t.isPacked?this.unpackTensor(input):this.packTensor(input),h.push(input),t=this.texData.get(input.dataId);else if(t.isPacked&&!rg(t.shape,input.shape)){const e=input,n=input.shape;input.shape=t.shape,input=this.packedReshape(input,n),h.push(input),t=this.texData.get(input.dataId),e.shape=n}return{shape:input.shape,texData:t,isUniform:!1}}));this.uploadToGPU(output.dataId);const m={shape:output.shape,texData:d,isUniform:!1},y=function(e,t,output){let n="";t.concat(output).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const c=t.texData.texShape,{useSqueezeShape:l,uniformShape:d,keptDims:h}=$g(e.packedInputs,t.shape,c);let f="",m="",y="";if(1===d.length&&e.packedInputs){const e=[Math.ceil(c[0]/2),Math.ceil(c[1]/2)];f=`${e[0]>1}_${e[1]>1}`}else if(2!==d.length||e.packedInputs){if(d.length>2&&!e.packedInputs){const e=o.util.computeStrides(d);y=`${e[0]===c[1]}_${e[e.length-1]===c[1]}`}}else m=`${d[0]>1}_${d[1]>1}`;const x=t.shape.length,O=2===d.length&&o.util.arraysEqual(t.shape,c),v=1===o.util.sizeFromShape(t.shape),k=o.backend_util.getBroadcastDims(t.shape,output.shape),w=!e.packedInputs&&x===output.shape.length&&o.util.arraysEqual(c,output.texData.texShape),S=e.packedInputs||d.length>2?"":`${c[0]>1}_${c[1]>1}`;n+=`${x}_${w}_${l?h:""}_${d.length}_${v}_${k}_${O}_${f}_${m}_${y}_${S}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;n+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let c=e.constructor.name;return c+="_"+n+"_"+r+`${Object(o.env)().getNumber("WEBGL_VERSION")}`,c}(e,f,m),x=this.getAndSaveBinary(y,(()=>Rg(this.gpgpu,e,f,m))),O=null!=this.activeTimers;let v;O&&(v=this.startTimer()),Object(o.env)().get("ENGINE_COMPILE_ONLY")||function(e,t,n,output,r){t.program.enableShapeUniforms||(Fg(t.inShapeInfos,n),Fg([t.outShapeInfo],[output]));const c=output.texData.texture,l=output.texData.texShape;output.texData.isPacked?e.setOutputPackedMatrixTexture(c.texture,l[0],l[1]):e.setOutputMatrixTexture(c.texture,l[0],l[1]),e.setProgram(t.webGLProgram),1===Object(o.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((input,i)=>{const n=t.program.variableNames[i],r=t.uniformLocations[n],c=t.uniformLocations[`offset${n}`],l=t.inShapesLocations[`${n}Shape`],d=t.inTexShapesLocations[`${n}TexShape`];if(l){const{uniformShape:n}=$g(t.program.packedInputs,input.shape,input.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(l,new Int32Array(n));break;case 2:e.gl.uniform2iv(l,new Int32Array(n));break;case 3:e.gl.uniform3iv(l,new Int32Array(n));break;case 4:e.gl.uniform4iv(l,new Int32Array(n))}}if(d&&e.gl.uniform2i(d,input.texData.texShape[0],input.texData.texShape[1]),null!=r)if(input.isUniform)if(o.util.sizeFromShape(input.shape)<2)e.gl.uniform1f(r,input.uniformValues[0]);else{let t=input.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=input.texData.slice&&null!=c&&e.gl.uniform1i(c,input.texData.slice.flatOffset),e.setInputMatrixTexture(input.texData.texture.texture,r,i)}));const d=t.outShapeLocation;if(d)switch(output.shape.length){case 1:e.gl.uniform1iv(d,new Int32Array(output.shape));break;case 2:e.gl.uniform2iv(d,new Int32Array(output.shape));break;case 3:e.gl.uniform3iv(d,new Int32Array(output.shape));break;case 4:e.gl.uniform4iv(d,new Int32Array(output.shape))}if(t.outShapeStridesLocation){const n=o.util.computeStrides(output.shape);switch(output.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,output.texData.texShape[0],output.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,i)=>{const o=t.customUniformLocations[i],c=r[i];if("float"===n.type)e.gl.uniform1fv(o,c);else if("vec2"===n.type)e.gl.uniform2fv(o,c);else if("vec3"===n.type)e.gl.uniform3fv(o,c);else if("vec4"===n.type)e.gl.uniform4fv(o,c);else if("int"===n.type)e.gl.uniform1iv(o,c);else if("ivec2"===n.type)e.gl.uniform2iv(o,c);else if("ivec3"===n.type)e.gl.uniform3iv(o,c);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(o,c)}})),e.executeProgram()}(this.gpgpu,x,f,m,r),h.forEach((e=>this.disposeIntermediateTensorInfo(e))),O&&(v=this.endTimer(v),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(v)}));const k=Object(o.env)().get("WEBGL_FLUSH_THRESHOLD");if(k>0){const time=o.util.now();time-this.lastGlFlushTime>k&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=time)}if(!Object(o.env)().getBool("WEBGL_LAZILY_UNPACK")&&d.isPacked&&!1===c){const e=this.unpackTensor(output);return this.disposeIntermediateTensorInfo(output),e}return output}compileAndRun(e,t,n,r,o=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,o)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Object(o.env)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Object(o.tidy)((()=>{if(!Object(o.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Object(o.env)().getBool("DEBUG");Object(o.env)().set("DEBUG",!1);const t=this.abs(Object(o.scalar)(1e-8)).dataSync()[0];if(Object(o.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:c,texture:l,usage:d,isPacked:h}=t;if(null!=l)return;const f=null!=this.activeTimers;let m;f&&(m=o.util.now());let y=t.texShape;if(null==y&&(y=function(e,t=!1){let n=Object(o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,i)=>i>=e.length-2?o.util.nearestLargerEven(e[i]):e[i]))).length&&(e=[2,e[0]])),2!==e.length){const t=o.util.squeezeShape(e);e=t.newShape}let r=o.util.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Qb(e);let n=2,c=2;return e.length&&([n,c]=eg(e)),r=t*(n/2)*(c/2),o.util.sizeToSquarishShape(r).map((e=>2*e))}return o.util.sizeToSquarishShape(r)}(n,h),t.texShape=y),null!=c){const e=tg(n);let l,d=y[1],x=y[0];const O=c instanceof Uint8Array||c instanceof Uint8ClampedArray;!h&&O||([d,x]=zb(y[0],y[1])),l=h?new Wg(e,O):new Bg(e,O);const v=O?[x,d]:y,k=this.makeTensorInfo(v,r),w=this.texData.get(k.dataId);w.usage=O?_b.PIXELS:_b.UPLOAD,w.texShape=v,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(k.dataId),d,x,c);const S=[[x,d]],I=!0,N=this.runWebGLProgram(l,[k],r,S,I),j=this.texData.get(N.dataId);t.texShape=j.texShape,t.isPacked=j.isPacked,t.usage=j.usage,Object(o.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(N.dataId):(t.texture=j.texture,t.values=null,this.texData.delete(N.dataId)),this.disposeIntermediateTensorInfo(k),f&&(this.uploadWaitMs+=o.util.now()-m)}else{const e=this.acquireTexture(y,d,r,h);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(a,e){if("float32"===e||"complex64"===e)return a;if("int32"===e||"bool"===e){const t="int32"===e?new Int32Array(a.length):new Uint8Array(a.length);for(let i=0;i<t.length;++i)t[i]=Math.round(a[i]);return t}throw new Error(`Unknown dtype ${e}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*o.util.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const p=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(p)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Object(o.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw Ub(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:o,inShapesLocations:c,inTexShapesLocations:l,outShapeLocation:d,outShapeStridesLocation:h,outTexShapeLocation:f}=_g(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=o,e.inShapesLocations=c,e.inTexShapesLocations=l,e.outShapeLocation=d,e.outShapeStridesLocation=h,e.outTexShapeLocation=f}}}ox.nextDataId=0;o.device_util.isBrowser()&&Object(o.registerBackend)("webgl",(()=>new ox),2);class ux{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=Dg(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class cx{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n);const c=this.outputShape.length;this.enableShapeUniforms=Dg(c);let l="";if(r)if(0===c||1===o.util.sizeFromShape(this.outputShape))l="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(l=`\n          ${Cg(c)} coords = getOutputCoords();\n        `,1===c)this.enableShapeUniforms?l+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":l+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Hy("coords",c);this.enableShapeUniforms?l+=`\n            bool nextRowOutOfBounds =\n              (${e[c-2]} + 1) >= outShape[${c} - 2];\n            bool nextColOutOfBounds =\n              (${e[c-1]} + 1) >= outShape[${c} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:l+=`\n            bool nextRowOutOfBounds =\n              (${e[c-2]} + 1) >= ${this.outputShape[c-2]};\n            bool nextColOutOfBounds =\n              (${e[c-1]} + 1) >= ${this.outputShape[c-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${l}\n\n        setOutput(result);\n      }\n    `}}function lx(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const dx={kernelName:o.Identity,backendName:"webgl",kernelFunc:lx};function hx(e){const{inputs:t,backend:n}=e,{real:r,imag:o}=t,c=n.makeTensorInfo(r.shape,"complex64"),l=n.texData.get(c.dataId),d=lx({inputs:{x:r},backend:n}),h=lx({inputs:{x:o},backend:n});return l.complexTensorInfos={real:d,imag:h},c}const px={kernelName:o.Complex,backendName:"webgl",kernelFunc:hx},fx="return (a < 0.) ? b * a : a;",mx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const bx={kernelName:o.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{alpha:l}=r,d=n.makeTensorInfo([],"float32",o.util.createScalarValue(l,"float32")),h=Object(o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cx(mx,c.shape,d.shape):new ux(fx,c.shape,d.shape),f=n.runWebGLProgram(h,[c,d],"float32");return n.disposeIntermediateTensorInfo(d),f}},gx="return (a < 0.) ? b * a : a;",yx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const xx={kernelName:o.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:c}=t,l=Object(o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cx(yx,r.shape,c.shape):new ux(gx,r.shape,c.shape);return n.runWebGLProgram(l,[r,c],"float32")}};function Ox({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:c,backend:l})=>{const{x:d}=c,h=l,f=r||d.dtype;if(h.shouldExecuteOnCPU([d])&&null!=n){const e=h.texData.get(d.dataId),t=n(e.values,f);return h.makeTensorInfo(d.shape,f,t)}let m;return m=Object(o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new nx(d.shape,t):new Qy(d.shape,e),h.runWebGLProgram(m,[d],f)}}function vx({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:c,dtype:l}){return({inputs:d,backend:h})=>{const{a:a,b:b}=d,f=h;if(r&&"complex64"===a.dtype){const t=f.texData.get(a.dataId),n=f.texData.get(b.dataId),[r,c]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,c={dataId:n.dataId,dtype:n.dtype,shape:a.shape},l={dataId:r.dataId,dtype:r.dtype,shape:b.shape},d=new ux(e,a.shape,b.shape);return f.runWebGLProgram(d,[c,l],Object(o.upcastType)(n.dtype,r.dtype))})),l=hx({inputs:{real:r,imag:c},backend:f});return f.disposeIntermediateTensorInfo(r),f.disposeIntermediateTensorInfo(c),l}const m=l||Object(o.upcastType)(a.dtype,b.dtype);if(("string"===a.dtype||"string"===b.dtype||f.shouldExecuteOnCPU([a,b]))&&null!=c){const e=f.texData.get(a.dataId).values,t=f.texData.get(b.dataId).values,n="string"===a.dtype?o.backend_util.fromUint8ToStringArray(e):e,r="string"===a.dtype?o.backend_util.fromUint8ToStringArray(t):t,[l,d]=c(a.shape,b.shape,n,r,m),h=f.makeTensorInfo(d,m);return f.texData.get(h.dataId).values=l,h}let y;return y=Object(o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new cx(t,a.shape,b.shape,n):new ux(e,a.shape,b.shape),f.runWebGLProgram(y,[a,b],m)}}function kx(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?yx:gx;if("leakyrelu"===e)return t?mx:fx;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class wx{constructor(e,t,n,r=!1,o=!1,c=!1,l=null,d=!1,h=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Dg(this.outputShape.length);const f=r?e[1]:e[2],m=Math.ceil(f/2),y=r?"i * 2, rc.y":"rc.y, i * 2",x=o?"rc.z, i * 2":"i * 2, rc.z",O=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],v=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let k="",w="";l&&(k=d?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${l}\n        }`:h?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${l}\n        }`:`vec4 activation(vec4 x) {\n          ${l}\n        }`,w="result = activation(result);");const S=c?"result += getBiasAtOutCoords();":"";c&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),h&&this.variableNames.push("leakyreluAlpha");let I="rc.x",N="rc.x";e[0]<t[0]?I=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(N=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${k}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${m}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${m}; i++) {\n          int batchA = ${I};\n          int batchB = ${N};\n          vec4 a = getMatrixA(batchA, ${y});\n          vec4 b = getMatrixB(batchB, ${x});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${O[0]} * ${v[0]});\n          result += (${O[1]} * ${v[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${S}\n\n        ${w}\n\n        setOutput(result);\n      }\n    `}}const Sx="return areal * breal - aimag * bimag;",Ix="return areal * bimag + aimag * breal;";class Nx{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const jx="return a * b;";function Tx(e){const{inputs:t,backend:n}=e,{a:a,b:b}=t,r=o.backend_util.upcastType(a.dtype,b.dtype);if("complex64"===a.dtype){const e=n.texData.get(a.dataId),t=n.texData.get(b.dataId),r=new Nx(Sx,a.shape,b.shape),o=new Nx(Ix,a.shape,b.shape),c=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:b.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:b.shape}],l=n.runWebGLProgram(r,c,"float32"),d=n.runWebGLProgram(o,c,"float32"),h=hx({inputs:{real:l,imag:d},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),h}if(n.shouldExecuteOnCPU([a,b])){const e=n.texData.get(a.dataId),t=n.texData.get(b.dataId),[o,c]=vy(a.shape,b.shape,e.values,t.values,r),l=n.makeTensorInfo(c,r);return n.texData.get(l.dataId).values=o,l}let c;return c=Object(o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cx(jx,a.shape,b.shape):new ux(jx,a.shape,b.shape),n.runWebGLProgram(c,[a,b],r)}const Cx={kernelName:o.Multiply,backendName:"webgl",kernelFunc:Tx};function $x(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{shape:l}=r,d=n,h=o.util.sizeFromShape(c.shape),f=o.util.inferFromImplicitShape(l,h),m=o.util.sizeFromShape(f);o.util.assert(h===m,(()=>`The new shape (${f}) has ${m} elements and the old shape (${c.shape}) has ${h} elements. The new shape and old shape must have the same number of elements.`));const y=d.texData.get(c.dataId);return!y.isPacked||rg(c.shape,f)||null!==y.texture&&rg(y.shape,f)?(d.incRef(c.dataId),{dataId:c.dataId,shape:f,dtype:c.dtype}):function(input,e,t){const n=[Qb(input.shape),...eg(input.shape)],r={dtype:input.dtype,shape:n,dataId:input.dataId},o=[Qb(e),...eg(e)],c=new Ky(o,n),l=[n],output=t.runWebGLProgram(c,[r],input.dtype,l,!0);return{dataId:output.dataId,shape:e,dtype:output.dtype}}(c,f,d)}const Ex={kernelName:o.Reshape,backendName:"webgl",kernelFunc:$x};class Ax{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:c,outSize:l}=e;this.outputShape=[r,l];const d=4*Math.floor(n/4),h=n%4;let f="sumValue += dot(values, ones);";if(null!=t){const e=1/t;f=`sumValue += dot(values * ${o.util.isInt(e)?e.toPrecision(2):e}, ones);`}let m="";c%n>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${c}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${d}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${f}\n        }\n\n        int inIdx = inOffset + ${d};\n        if (${1===h}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${f}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${f}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${f}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Rx{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:o,outSize:c}=e;this.outputShape=[r,c];let l="0.0",d="";"prod"===t?l="1.0":"min"===t?(l="1.0 / 1e-20",d="min"):"max"===t&&(l="-1.0 / 1e-20",d="max");let h=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?h="sumValue":"prod"===t?h="prodValue":"all"===t?h="allValue":"any"===t&&(h="anyValue");const f=4*Math.floor(n/4),m=n%4;let y=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${d}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${d}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,x="vec4";"all"===t?(l="1.0",y="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",x="bvec4"):"any"===t&&(l="0.0",y="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",x="bvec4");let O="";o%n>0&&(O=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${l};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${O}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${l});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${f}; i += 4) {\n          int inIdx = inOffset + i;\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${y}\n        }\n\n        int inIdx = inOffset + ${f};\n        if (${1===m}) {\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${y}\n        } else if (${2===m}) {\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${y}\n        } else if (${3===m}) {\n          ${x} values = ${x}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${y}\n        }\n        setOutput(${h});\n      }\n    `}}function _x(e,t,n,r){const c=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=o.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let l=e;for(let i=0;i<c.length;i++){const{inSize:o,windowSize:d,outSize:h}=c[i];let f,m;f="mean"===n?0===i?new Ax({windowSize:d,inSize:o,batchSize:e.shape[0],outSize:h},o):new Ax({windowSize:d,inSize:o,batchSize:e.shape[0],outSize:h}):new Rx({windowSize:d,inSize:o,batchSize:e.shape[0],outSize:h},n),m=l,l=r.runWebGLProgram(f,[l],t),m.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(m)}return l}class Fx{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];this.outputShape=n,this.rank=n.length;const r=Cg(this.rank),o=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let i=0;i<e.length;i++)r[e[i]]=n[i];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class Dx{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Cg(this.rank),o=Gy("rc",this.rank),c=new Array(this.rank);for(let i=0;i<t.length;i++)c[t[i]]=o[i];const l=`vec2(${c.slice(-2).join()})`,d=`++${o[this.rank-1]} < ${n[this.rank-1]}`,h=`getChannel(getA(${c.join()}), ${l})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${h};\n      if(${d}) {\n        result[1] = ${h};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${h};\n        if(${d}) {\n          result[3] = ${h};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Mx(e,t,n){const r=Object(o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Dx(e.shape,t):new Fx(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function zx(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r;return function(e,t,n,r){const c=t,l=e.shape.length,d=o.util.parseAxisParam(c,e.shape);let h=d;const f=o.backend_util.getAxesPermutation(h,l),m=null!=f;let y=e;m&&(y=Mx(e,f,r),h=o.backend_util.getInnerMostAxes(h.length,l)),o.backend_util.assertAxesAreInnerMostDims("sum",h,l);const[x,O]=o.backend_util.computeOutAndReduceShapes(y.shape,h);let v=x;n&&(v=o.backend_util.expandShapeToKeepDim(x,d));const k=o.util.sizeFromShape(O),w=$x({inputs:{x:y},attrs:{shape:[o.util.sizeFromShape(e.shape)/k,k]},backend:r}),S=_x(w,Object(o.sumOutType)(e.dtype),"sum",r),I=$x({inputs:{x:S},attrs:{shape:v},backend:r});return r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(S),m&&r.disposeIntermediateTensorInfo(y),I}(c,l,d,n)}const Lx={kernelName:o.Sum,backendName:"webgl",kernelFunc:zx};function Px(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{perm:c}=r,l=n,d=o.shape.length,h=new Array(d);for(let i=0;i<h.length;i++)h[i]=o.shape[c[i]];let f;if(l.shouldExecuteOnCPU([o])){const e=l.texData.get(o.dataId).values,t=Vy(e,o.shape,o.dtype,c,h);f=l.makeTensorInfo(h,o.dtype);l.texData.get(f.dataId).values=t}else f=Mx(o,c,l);return f}const Bx={kernelName:o.Transpose,backendName:"webgl",kernelFunc:Px};function Wx({a:a,b:b,transposeA:e,transposeB:t,backend:n,bias:r=null,preluActivationWeights:c=null,leakyreluAlpha:l=0,activation:d=null}){const h=a.shape.length,f=b.shape.length,m=e?a.shape[h-2]:a.shape[h-1],y=t?b.shape[f-1]:b.shape[f-2],x=e?a.shape[h-1]:a.shape[h-2],O=t?b.shape[f-2]:b.shape[f-1],v=a.shape.slice(0,-2),k=b.shape.slice(0,-2),w=o.util.sizeFromShape(v),S=o.util.sizeFromShape(k),I=o.broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0,-2),b.shape.slice(0,-2)).concat([x,O]);o.util.assert(m===y,(()=>`Error in matMul: inner shapes (${m}) and (${y}) of Tensors with shapes ${a.shape} and ${b.shape} and transposeA=${e} and transposeB=${t} must match.`));const N=e?[w,m,x]:[w,x,m],j=t?[S,O,y]:[S,y,O],T=$x({inputs:{x:a},backend:n,attrs:{shape:N}}),C=$x({inputs:{x:b},backend:n,attrs:{shape:j}}),$=[T,C],E=Math.max(w,S),A=e?T.shape[1]:T.shape[2],R=null!=r,_=null!=c,F="leakyrelu"===d,D=null!=d?kx(d,!0):null;let M;if((1===x||1===O)&&A>1e3&&!1===(R||_||F||null!=D)){let r=T,o=C;e&&(r=Px({inputs:{x:T},backend:n,attrs:{perm:[0,2,1]}}),$.push(r)),t&&(o=Px({inputs:{x:C},backend:n,attrs:{perm:[0,2,1]}}),$.push(o));const c=1===O;let l=r;1!==O&&(l=$x({inputs:{x:r},backend:n,attrs:{shape:[E,A,1]}}),$.push(l));const d=1===O?2:1;let h=o;c&&(h=$x({inputs:{x:o},backend:n,attrs:{shape:[E,1,A]}}),$.push(h));const f=Tx({inputs:{a:l,b:h},backend:n});M=zx({inputs:{x:f},backend:n,attrs:{axis:d,keepDims:!0}}),$.push(f)}else{const d=Object(o.upcastType)(a.dtype,b.dtype),h=new wx(N,j,[E,x,O],e,t,R,D,_,F),f=[T,C];if(null!=r&&f.push(r),_&&f.push(c),F){const e=n.makeTensorInfo([],"float32",o.util.createScalarValue(l,"float32"));f.push(e),$.push(e)}M=n.runWebGLProgram(h,f,d)}const z=$x({inputs:{x:M},backend:n,attrs:{shape:I}});$.push(M);for(const i of $)n.disposeIntermediateTensorInfo(i);return z}const Vx={kernelName:o._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b,bias:o,preluActivationWeights:c}=t,{transposeA:l,transposeB:d,activation:h,leakyreluAlpha:f}=r;return Wx({a:a,b:b,transposeA:l,transposeB:d,backend:n,bias:o,preluActivationWeights:c,leakyreluAlpha:f,activation:h})}},Ux="return abs(x);";const Gx={kernelName:o.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=$y(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let c;return c=Object(o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new nx(r.shape,Ux):new Qy(r.shape,Ux),n.runWebGLProgram(c,[r],r.dtype)}},Hx=Ox({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),qx={kernelName:o.Acos,backendName:"webgl",kernelFunc:Hx},Kx=Ox({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Xx={kernelName:o.Acosh,backendName:"webgl",kernelFunc:Kx},Yx="return a + b;",Zx=vx({opSnippet:Yx,packedOpSnippet:Yx,supportsComplex:!0,cpuKernelImpl:ey}),Jx={kernelName:o.Add,backendName:"webgl",kernelFunc:Zx};class Qx{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,i)=>`T${i}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class eO{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,i)=>`T${i}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const tO={kernelName:o.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,c=n;if(1===c.length)return lx({inputs:{x:c[0]},backend:r});if(c.length>Object(o.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(c.length/2),n=e({inputs:c.slice(0,t),backend:r}),o=e({inputs:c.slice(t),backend:r});return e({inputs:[n,o],backend:r})}const l=c.map((e=>e.dtype)).reduce(((e,t)=>Object(o.upcastType)(e,t))),d=c.map((e=>e.shape)),h=Object(o.env)().getBool("WEBGL_PACK")?new eO(c[0].shape,d):new Qx(c[0].shape,d);return r.runWebGLProgram(h,c,l)}};const nO={kernelName:o.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r,h=c.shape.length,f=o.util.parseAxisParam(l,c.shape);let m=f;const y=o.backend_util.getAxesPermutation(m,h);let x=c;null!=y&&(x=Px({inputs:{x:c},backend:n,attrs:{perm:y}}),m=o.backend_util.getInnerMostAxes(m.length,h)),o.backend_util.assertAxesAreInnerMostDims("all",m,h);const[O,v]=o.backend_util.computeOutAndReduceShapes(x.shape,m),k=$x({inputs:{x:x},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(v)]}}),w=_x(k,k.dtype,"all",n);let S;if(d){S=$x({inputs:{x:w},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(O,f)}})}else S=$x({inputs:{x:w},backend:n,attrs:{shape:O}});return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),null!=y&&n.disposeIntermediateTensorInfo(x),S}};const rO={kernelName:o.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r,h=c.shape.length,f=o.util.parseAxisParam(l,c.shape);let m=f;const y=o.backend_util.getAxesPermutation(m,h);let x=c;null!=y&&(x=Px({inputs:{x:c},backend:n,attrs:{perm:y}}),m=o.backend_util.getInnerMostAxes(m.length,h)),o.backend_util.assertAxesAreInnerMostDims("any",m,h);const[O,v]=o.backend_util.computeOutAndReduceShapes(x.shape,m),k=$x({inputs:{x:x},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(v)]}}),w=_x(k,k.dtype,"any",n);let S;if(d){S=$x({inputs:{x:w},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(O,f)}})}else S=$x({inputs:{x:w},backend:n,attrs:{shape:O}});return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),null!=y&&n.disposeIntermediateTensorInfo(x),S}};class aO{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:c}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,c];const l="max"===t?">":"<",d=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${d};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${l} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class sO{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,o.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const c=e[e.length-1],l=Math.ceil(c/t);this.outputShape=e.slice(0,-1),l>1&&this.outputShape.push(l),r||this.variableNames.push("bestIndicesA");const d=this.outputShape,h=d.length,f=Cg(h),m=Hy("coords",h);let y,x;if(1===l){x=h+1;const e=Cg(x);y=`\n        ${e} sourceLocR = ${e}(${m.join()}, 0);\n        ++${m[h-1]};\n        ${e} sourceLocG = ${e}(${m.join()}, 0);\n        ++${m[h-2]};\n        ${e} sourceLocA = ${e}(${m.join()}, 0);\n        --${m[h-1]};\n        ${e} sourceLocB = ${e}(${m.join()}, 0);\n        --${m[h-2]};`}else x=h,y=`\n        ${f} sourceLocR = coords;\n        ++${m[h-1]};\n        ${f} sourceLocG = coords;\n        ++${m[h-2]};\n        ${f} sourceLocA = coords;\n        --${m[h-1]};\n        ${f} sourceLocB = coords;\n        --${m[h-2]};`;const O=["x","y","z","w","u","v"].slice(0,x),v="."+O[x-1],k=O.map((e=>"int "+e)),w=Hy("sourceLocR",x-1).concat("inIdx.r"),S=Hy("sourceLocG",x-1).concat("inIdx.g"),I=Hy("sourceLocB",x-1).concat("inIdx.b"),N=Hy("sourceLocA",x-1).concat("inIdx.a"),j="max"===n?"greaterThan":"lessThan",T=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${w.join()}),\n                             getBestIndicesAChannel(${S.join()}),\n                             getBestIndicesAChannel(${I.join()}),\n                             getBestIndicesAChannel(${N.join()})));`,C=`vec4(\n            getAChannel(${w.join()}),\n            hasNextCol ? getAChannel(${S.join()}) : 0.,\n            hasNextRow ? getAChannel(${I.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${N.join()}) : 0.)`,$=r?"":`\n      float getBestIndicesAChannel(${k.join()}) {\n        return getChannel(getBestIndicesA(${O.join()}),\n                                          vec2(${O.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${k.join()}) {\n        return getChannel(getA(${O.join()}),\n                               vec2(${O.slice(-2).join()}));\n      }\n      ${$}\n      void main() {\n        ${f} coords = getOutputCoords();\n        bool hasNextCol = ${m[h-1]} < ${d[h-1]-1};\n        bool hasNextRow = ${m[h-2]} < ${d[h-2]-1};\n        ${y}\n        ivec4 srcIdx = ivec4(sourceLocR${v}, sourceLocG${v},\n          sourceLocB${v}, sourceLocA${v}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${C};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${T}\n          vec4 candidate = ${C};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${j}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function iO(e,t,n,r=null){let c=t.shape[0],l=t.shape[1];null!=r&&(c=r.shape[0],l=r.shape[1]);const d=o.backend_util.computeOptimalWindowSize(l),h={windowSize:d,inSize:l,batchSize:c,outSize:Math.ceil(l/d)},f=new aO(h,n,null==r),m=[t];null!=r&&m.push(r);const output=e.runWebGLProgram(f,m,"int32");if(1===output.shape[1])return output;const y=iO(e,t,n,output);return e.disposeIntermediateTensorInfo(output),y}function oO(e,t,n,r=null){const c=null!=r?r.shape:t.shape,l=c[c.length-1],d=o.backend_util.computeOptimalWindowSize(l),h=new sO(c,d,n,null==r),f=null==r?[t]:[t,r],output=e.runWebGLProgram(h,f,"int32");if(output.shape.length===t.shape.length){const r=oO(e,t,n,output);return e.disposeIntermediateTensorInfo(output),r}return output}function uO(e,t,n,r){const c=[n];if(o.backend_util.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),c,t.shape.length),!Object(o.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],l=e.texData.get(t.dataId);let d=t;null!==l&&l.isPacked&&(d=e.unpackTensor(t),n.push(d));const[h,f]=o.backend_util.computeOutAndReduceShapes(d.shape,c),m=o.util.sizeFromShape(f),y=$x({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}});n.push(y);const x=iO(e,y,r);n.push(x);const O=$x({inputs:{x:x},backend:e,attrs:{shape:h}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),O}return oO(e,t,r)}const cO={kernelName:o.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l}=r;let d=o.util.parseAxisParam(l,c.shape);const h=o.backend_util.getAxesPermutation(d,c.shape.length);let f=c;const m=[];null!=h&&(f=Px({inputs:{x:c},backend:n,attrs:{perm:h}}),m.push(f),d=o.backend_util.getInnerMostAxes(d.length,f.shape.length)),o.backend_util.assertAxesAreInnerMostDims("argMax",[d[0]],f.shape.length);const y=uO(n,f,d[0],"max");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const lO={kernelName:o.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l}=r;let d=o.util.parseAxisParam(l,c.shape);const h=o.backend_util.getAxesPermutation(d,c.shape.length);let f=c;const m=[];null!=h&&(f=Px({inputs:{x:c},backend:n,attrs:{perm:h}}),m.push(f),d=o.backend_util.getInnerMostAxes(d.length,f.shape.length)),o.backend_util.assertAxesAreInnerMostDims("argMin",[d[0]],f.shape.length);const y=uO(n,f,d[0],"min");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},dO=Ox({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),hO={kernelName:o.Asin,backendName:"webgl",kernelFunc:dO},pO=Ox({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),fO={kernelName:o.Asinh,backendName:"webgl",kernelFunc:pO},mO=Ox({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),bO={kernelName:o.Atan,backendName:"webgl",kernelFunc:mO},gO=vx({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),yO={kernelName:o.Atan2,backendName:"webgl",kernelFunc:gO},xO=Ox({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),OO={kernelName:o.Atanh,backendName:"webgl",kernelFunc:xO};class vO{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const c=e.filterWidth,l=e.strideHeight,d=e.strideWidth,h=e.dilationHeight,f=e.dilationWidth,m=e.effectiveFilterHeight,y=e.effectiveFilterWidth,x=e.padInfo.top,O=e.padInfo.left;this.outputShape=e.outShape;const v="avg"===t,k=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,w=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let S="0.0";if(v||(S="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${l}, ${d});\n        const ivec2 pads = ivec2(${x}, ${O});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${m};\n              wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${y};\n                wC += ${f}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?k:w:`wR * ${y} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let I=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(I="avgValue / count");const N=4*Math.floor(c/4),j=c%4,T=`\n      if (${v}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${l}, ${d});\n      const ivec2 pads = ivec2(${x}, ${O});\n      const float initializationValue = ${S};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${S});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${m};\n            wR += ${h}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${N}; wC += 4) {\n            int xC = xCCorner + wC * ${f};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              getValue(batch, xR, xC + 2 * ${f}, d),\n              getValue(batch, xR, xC + 3 * ${f}, d)\n            );\n\n            ${T}\n          }\n\n          int xC = xCCorner + ${N};\n          if (${1===j}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${T}\n          } else if (${2===j}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${T}\n          } else if (${3===j}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${f}, d),\n              getValue(batch, xR, xC + 2 * ${f}, d),\n              initializationValue\n            );\n\n            ${T}\n          }\n        }\n        setOutput(${I});\n      }\n    `}}class kO{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const c=e.filterWidth,l=e.strideDepth,d=e.strideHeight,h=e.strideWidth,f=e.dilationDepth,m=e.dilationHeight,y=e.dilationWidth,x=e.effectiveFilterDepth,O=e.effectiveFilterHeight,v=e.effectiveFilterWidth,k=e.padInfo.front,w=e.padInfo.top,S=e.padInfo.left;this.outputShape=e.outShape;const I="avg"===t;let N="0.0";if(I||(N="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${l}, ${d}, ${h});\n        const ivec3 pads = ivec3(${k}, ${w}, ${S});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${x};\n              wD += ${f}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${O};\n                wR += ${m}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${v};\n                  wC += ${y}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${O} * ${v} +\n                      wR * ${v} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let j=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(j="avgValue / count");const T=4*Math.floor(c/4),C=c%4,$=`\n      if (${I}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${l}, ${d}, ${h});\n      const ivec3 pads = ivec3(${k}, ${w}, ${S});\n      const float initializationValue = ${N};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${N});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${x};\n            wD += ${f}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${O};\n            wR += ${m}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${T}; wC += 4) {\n              int xC = xCCorner + wC * ${y};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${y}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${y}, ch)\n              );\n\n              ${$}\n            }\n\n            int xC = xCCorner + ${T};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${y}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${y}, ch),\n                initializationValue\n              );\n\n              ${$}\n            }\n          }\n          setOutput(${j});\n        }\n      }\n    `}}const wO={kernelName:o.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t;lg(c,"avgPool");const{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=r;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(d,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`));const m=o.backend_util.computePool2DInfo(c.shape,l,d,1,h,f);if(1===m.filterWidth&&1===m.filterHeight&&o.util.arraysEqual(m.inShape,m.outShape))return lx({inputs:{x:c},backend:n});const y=new vO(m,"avg",!1);return n.runWebGLProgram(y,[c],"float32")}};const SO={kernelName:o.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{filterSize:l,strides:d,pad:h,dimRoundingMode:f,dataFormat:m}=r,y=o.backend_util.computePool3DInfo(c.shape,l,d,[1,1,1],h,f,m),x=new kO(y,"avg",!1);return n.runWebGLProgram(x,[c],"float32")}};class IO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,c=e.dilationHeight,l=e.dilationWidth,d=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=d-1-e.padInfo.top,m=h-1-e.padInfo.left,y=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${f}, ${m});\n      const float avgMultiplier = float(${y});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${h};\n            wC+= ${l}) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,c=e.strideHeight,l=e.strideWidth,d=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,m=e.effectiveFilterDepth,y=e.effectiveFilterHeight,x=e.effectiveFilterWidth,O=m-1-e.padInfo.front,v=y-1-e.padInfo.top,k=x-1-e.padInfo.left,w=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${O}, ${v}, ${k});\n      const float avgMultiplier = float(${w});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${m};\n            wD += ${d}) {\n          float dyD = float(dyDCorner + wD) / ${o}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${y};\n              wR += ${h}) {\n            float dyR = float(dyRCorner + wR) / ${c}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${x};\n                wC += ${f}) {\n              float dyC = float(dyCCorner + wC) / ${l}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const jO={kernelName:o.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input}=t,l=input,{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=r,y=o.backend_util.computePool3DInfo(l.shape,d,h,[1,1,1],f,m),x=new NO(y);return n.runWebGLProgram(x,[c],l.dtype)}};const TO={kernelName:o.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input}=t,l=input;lg([c,input],"avgPoolGrad");const{filterSize:d,strides:h,pad:f}=r,m=o.backend_util.computePool2DInfo(l.shape,d,h,1,f),y=new IO(m);return n.runWebGLProgram(y,[c],l.dtype)}};const CO={kernelName:o.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:b}=t,{transposeA:o,transposeB:c}=r;return Wx({a:a,b:b,transposeA:o,transposeB:c,backend:n})}};class $O{constructor(e,t,n,r,c,l){this.outputShape=[],this.variableNames=["x","mean","variance"],o.backend_util.assertAndGetBroadcastShape(e,t),o.backend_util.assertAndGetBroadcastShape(e,n);let d="0.0";null!=r&&(o.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),d="getOffsetAtOutCoords()");let h="1.0";null!=c&&(o.backend_util.assertAndGetBroadcastShape(e,c),this.variableNames.push("scale"),h="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${d};\n        float scale = ${h};\n        float inv = scale * inversesqrt(variance + float(${l}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class EO{constructor(e,t,n,r,c,l){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],o.backend_util.assertAndGetBroadcastShape(e,t),o.backend_util.assertAndGetBroadcastShape(e,n);let d="vec4(0.0)";null!=r&&(o.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),d="getOffsetAtOutCoords()");let h="vec4(1.0)";null!=c&&(o.backend_util.assertAndGetBroadcastShape(e,c),this.variableNames.push("scale"),h="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${d};\n        vec4 scale = ${h};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${l}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const AO={kernelName:o.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:c,variance:l,offset:d,scale:h}=e;o.util.assert(c.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.util.assert(null==d||c.shape.length===d.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.util.assert(null==h||c.shape.length===h.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:f}=n;null==f&&(f=.001);const m=[r,c,l];let y=null;null!=d&&(y=d.shape,m.push(d));let x=null;null!=h&&(x=h.shape,m.push(h));const O=Object(o.env)().getBool("WEBGL_PACK_NORMALIZATION")?new EO(r.shape,c.shape,l.shape,y,x,f):new $O(r.shape,c.shape,l.shape,y,x,f);return t.runWebGLProgram(O,m,m[0].dtype)}};class RO{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Cg(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return _O.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let body;body=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,i)=>`sourceLoc.${_O[i]} = start[${i}] + coords.${_O[i]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${body}\n        setOutput(getSource(${n}));\n      }\n    `}}const _O=["x","y","z","w","u","v"];class FO{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=Cg(this.rank),n=Hy("coords",this.rank),r=Hy("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,c=`getChannel(getSource(${r.join()}), ${o})`,l=`\n      result.x = ${c};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${c};\n        --${r[this.rank-1]};\n      }\n    `,d=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${c};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${c};\n        }\n      }\n    `,h=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,i)=>`start[${i}]`)).join()});`:e.map(((e,i)=>`${r[i]} = ${n[i]} + start[${i}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${h}\n        vec4 result = vec4(0.);\n        ${l}\n        ${d}\n        setOutput(result);\n      }\n    `}}function DO(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{begin:l,size:d}=r,[h,f]=o.slice_util.parseSliceParams(c,l,d);if(o.slice_util.assertParamsValid(c,h,f),0===o.util.sizeFromShape(f))return n.makeTensorInfo(f,c.dtype,[]);if(n.shouldExecuteOnCPU([c])||"string"===c.dtype){const e=n.texData.get(c.dataId),t=Ey(e.values,h,f,c.shape,c.dtype);return n.makeTensorInfo(f,c.dtype,t)}const{isPacked:m}=n.texData.get(c.dataId),y=o.slice_util.isSliceContinous(c.shape,h,f);if(m||!y){const e=Object(o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new FO(f):new RO(f),t=[h];return n.runWebGLProgram(e,[c],c.dtype,t)}return n.uploadToGPU(c.dataId),function(e,t,n,r){const c=r.texData.get(e.dataId),l=r.makeTensorInfo(n,e.dtype),d=r.texData.get(l.dataId);Object.assign(d,c),d.refCount=1,d.shape=n,d.dtype=e.dtype;let h=o.slice_util.computeFlatOffset(t,o.util.computeStrides(e.shape));c.slice&&(h+=c.slice.flatOffset),d.slice={flatOffset:h,origDataId:c.slice&&c.slice.origDataId||e.dataId};const f=r.dataRefCount.get(d.slice.origDataId)||1;return r.dataRefCount.set(d.slice.origDataId,f+1),l}(c,h,f,n)}const MO={kernelName:o.Slice,backendName:"webgl",kernelFunc:DO},zO={kernelName:o.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{blockShape:l,crops:d}=r;o.util.assert(c.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const h=l.reduce(((a,b)=>a*b)),f=o.backend_util.getReshaped(c.shape,l,h),m=o.backend_util.getPermuted(f.length,l.length),y=o.backend_util.getReshapedPermuted(c.shape,l,h),x=o.backend_util.getSliceBeginCoords(d,l.length),O=o.backend_util.getSliceSize(y,d,l.length),v=[],k=$x({inputs:{x:c},backend:n,attrs:{shape:f}}),w=Px({inputs:{x:k},backend:n,attrs:{perm:m}}),S=$x({inputs:{x:w},backend:n,attrs:{shape:y}}),I=DO({inputs:{x:S},backend:n,attrs:{begin:x,size:O}});return v.push(k),v.push(w),v.push(S),v.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const LO={kernelName:o.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:l}=r,d=n.readSync(o.dataId),h=n.readSync(c.dataId),f=ty(d,h,c.dtype,c.shape,l);return n.makeTensorInfo([l],c.dtype,f)}};const PO={kernelName:o.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:c}=t,l=n.readSync(r.dataId),d=n.readSync(c.dataId),h=o.backend_util.assertAndGetBroadcastShape(Array.from(l),Array.from(d));return n.makeTensorInfo([h.length],"int32",Int32Array.from(h))}},BO=vx({opSnippet:"return float(a != b);",cpuKernelImpl:wy,dtype:"bool"}),WO={kernelName:o.NotEqual,backendName:"webgl",kernelFunc:BO};function VO(e){const{inputs:t,backend:n}=e,{input:input}=t;return lx({inputs:{x:n.texData.get(input.dataId).complexTensorInfos.real},backend:n})}const UO={kernelName:o.Real,backendName:"webgl",kernelFunc:VO};const GO={kernelName:o.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:c}=t,{x:l}=n,{dtype:d}=c;if("complex64"===d){if("complex64"===l.dtype)return lx({inputs:{x:l},backend:r});const t=o.zeros(l.shape),n=e({inputs:{x:l},backend:r,attrs:{dtype:"float32"}}),c=hx({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),c}if("complex64"===l.dtype){const t=VO({inputs:{input:l},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:d}});return r.disposeIntermediateTensorInfo(t),n}if(!o.util.hasEncodingLoss(l.dtype,d)){const e=lx({inputs:{x:l},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:d}}if(r.shouldExecuteOnCPU([l])){const e=r.texData.get(l.dataId).values,[t,n,o]=ry(e,l.shape,l.dtype,d);return r.makeTensorInfo(t,n,o)}if("int32"===d)return function(input,e){const t=new Qy(input.shape,"return float(int(x));"),output=e.runWebGLProgram(t,[input],"int32");return{dataId:output.dataId,shape:output.shape,dtype:output.dtype}}(l,r);if("bool"===d){const e=r.makeTensorInfo([],"bool",o.util.getTypedArrayFromDType("bool",1)),t=BO({inputs:{a:l,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${l.dtype} to ${d}`)}},HO="return ceil(x);",qO=Ox({opSnippet:HO,packedOpSnippet:HO,cpuKernelImpl:ay}),KO={kernelName:o.Ceil,backendName:"webgl",kernelFunc:qO};class XO{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class YO{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const ZO={kernelName:o.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{clipValueMin:l,clipValueMax:d}=r;let h;h=Object(o.env)().getBool("WEBGL_PACK_CLIP")?new YO(c.shape):new XO(c.shape);const f=[[l],[d]];return n.runWebGLProgram(h,[c],c.dtype,f)}};class JO{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function QO(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const ev={kernelName:o.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,o=n.texData.get(r.dataId),c=new JO(r.shape),l=[QO(r,o.complexTensorInfos.real),QO(r,o.complexTensorInfos.imag)];return n.runWebGLProgram(c,l,l[0].dtype)}};class tv{constructor(e){this.outputShape=[],this.outputShape=o.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,i)=>`T${i}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let i=1;i<t.length;i++)t[i]=t[i-1]+e[i][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<t.length;i++){const e=t[i-1];n.push(`else if (yC < ${t[i]}) setOutput(getT${i}(yR, yC-${e}));`)}const r=t.length,c=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${c}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class nv{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=o.backend_util.computeOutShape(e,t);const n=this.outputShape,r=n.length,c=Cg(r),l=Hy("coords",r),d=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,i)=>`T${i}`));const h=new Array(e.length-1);h[0]=e[0][t];for(let i=1;i<h.length;i++)h[i]=h[i-1]+e[i][t];const f=d[t],m=d.slice(-2),y=d.join();let x=`if (${f} < ${h[0]}) {\n        return getChannel(\n            getT0(${y}), vec2(${m.join()}));\n        }`;for(let i=1;i<h.length;i++){const e=h[i-1];x+=`\n        if (${f} < ${h[i]}  && ${f} >= ${h[i-1]}) {\n          return getChannel(\n            getT${i}(${rv(d,f,e)}),\n            vec2(${rv(m,f,e)}));\n        }`}const O=h.length,v=h[h.length-1];x+=`\n        return getChannel(\n          getT${O}(${rv(d,f,v)}),\n          vec2(${rv(m,f,v)}));`,this.userCode=`\n      float getValue(${d.map((e=>"int "+e))}) {\n        ${x}\n      }\n\n      void main() {\n        ${c} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${l}), 0., 0., 0.);\n\n        ${l[r-1]} = ${l[r-1]} + 1;\n        if (${l[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${l});\n        }\n\n        ${l[r-2]} = ${l[r-2]} + 1;\n        if (${l[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${l});\n        }\n\n        ${l[r-1]} = ${l[r-1]} - 1;\n        if (${l[r-2]} < ${n[r-2]} &&\n            ${l[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${l});\n        }\n        setOutput(result);\n      }\n    `}}function rv(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function av(e){const{inputs:t,backend:n}=e,{input:input}=t;return lx({inputs:{x:n.texData.get(input.dataId).complexTensorInfos.imag},backend:n})}const sv={kernelName:o.Imag,backendName:"webgl",kernelFunc:av};function iv(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>VO({inputs:{input:e},backend:n}))),o=e.map((e=>av({inputs:{input:e},backend:n}))),c=iv(r,t,n),l=iv(o,t,n),d=hx({inputs:{real:c,imag:l},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),o.forEach((i=>n.disposeIntermediateTensorInfo(i))),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(l),d}let c=n.shouldExecuteOnCPU(e);if("string"===r&&(c=!0),c){const c=e.map((e=>{const r=o.util.sizeFromShape(e.shape.slice(t));return $x({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),l=c.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),d=o.backend_util.computeOutShape(c.map((e=>e.shape)),1),h=1===c[0].shape[0],f=sy(l,d,r,h),m=o.backend_util.computeOutShape(e.map((e=>e.shape)),t),y=n.makeTensorInfo(m,r,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const l=Object(o.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>l){const r=[];for(let i=0;i<e.length;i+=l){const o=e.slice(i,i+l);r.push(iv(o,t,n))}const o=iv(r,t,n);for(const i of r)n.disposeIntermediateTensorInfo(i);return o}if(Object(o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const o=new nv(e.map((e=>e.shape)),t);return n.runWebGLProgram(o,e,r)}const{tensors2D:d,outShape:h}=function(e,t,n){const r=o.backend_util.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>$x({inputs:{x:e},attrs:{shape:[-1,o.util.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),f=new tv(d.map((e=>e.shape))),m=n.runWebGLProgram(f,d,r);d.forEach((e=>n.disposeIntermediateTensorInfo(e)));const y=$x({inputs:{x:m},attrs:{shape:h},backend:n});return n.disposeIntermediateTensorInfo(m),y}function ov(e){const{inputs:t,backend:n,attrs:r}=e,{axis:c}=r,l=o.util.parseAxisParam(c,t[0].shape)[0],d=o.backend_util.computeOutShape(t.map((e=>e.shape)),l);if(0===o.util.sizeFromShape(d))return n.makeTensorInfo(d,t[0].dtype,[]);const h=t.filter((e=>o.util.sizeFromShape(e.shape)>0));if(1===h.length)return lx({inputs:{x:h[0]},backend:n});const f=h.map((e=>e.shape));return o.backend_util.assertParamsConsistent(f,l),iv(h,l,n)}const uv={kernelName:o.Concat,backendName:"webgl",kernelFunc:ov};class cv{constructor(e,t=!1,n=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const c=e.padInfo.top,l=e.padInfo.left,d=e.strideHeight,h=e.strideWidth,f=e.dilationHeight,m=e.dilationWidth,y=e.filterHeight,x=e.filterWidth,O=4*Math.floor(e.inChannels/4),v=e.inChannels%4,k="channelsLast"===e.dataFormat,w=k?1:2,S=k?2:3,I=k?3:1;let N="",j="";n&&(N=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,j="result = activation(result);");const T=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${N}\n\n      const ivec2 strides = ivec2(${d}, ${h});\n      const ivec2 pads = ivec2(${c}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${I}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${w}], coords[${S}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${y}; wR++) {\n          int xR = xRCorner + wR * ${f};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC++) {\n            int xC = xCCorner + wC * ${m};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${O}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${k}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===v}) {\n\n              if (${k}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${O}) *\n                    getW(wR, wC, ${O}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${O}, xR, xC) *\n                    getW(wR, wC, ${O}, d2);\n              }\n\n            } else if (${2===v}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${O}, d2),\n                getW(wR, wC, ${O} + 1, d2)\n              );\n\n              if (${k}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${O}),\n                  getX(batch, xR, xC, ${O} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${O}, xR, xC),\n                  getX(batch, ${O} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===v}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${O}, d2),\n                getW(wR, wC, ${O} + 1, d2),\n                getW(wR, wC, ${O} + 2, d2)\n              );\n\n              if (${k}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${O}),\n                  getX(batch, xR, xC, ${O} + 1),\n                  getX(batch, xR, xC, ${O} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${O}, xR, xC),\n                  getX(batch, ${O} + 1, xR, xC),\n                  getX(batch, ${O} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${T}\n        ${j}\n        setOutput(result);\n      }\n    `}}class lv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,o=e.strideDepth,c=e.strideHeight,l=e.strideWidth,d=e.dilationDepth,h=e.dilationHeight,f=e.dilationWidth,m=e.filterDepth,y=e.filterHeight,x=e.filterWidth,O=4*Math.floor(e.inChannels/4),v=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${c}, ${l});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${m}; wF++) {\n          int xF = xFCorner + wF * ${d};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${y}; wR++) {\n            int xR = xRCorner + wR * ${h};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${x}; wC++) {\n              int xC = xCCorner + wC * ${f};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${O}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===v}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${O}) *\n                  getW(wF, wR, wC, ${O}, d2);\n              } else if (${2===v}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${O}),\n                  getX(batch, xF, xR, xC, ${O} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${O}, d2),\n                  getW(wF, wR, wC, ${O} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===v}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${O}),\n                  getX(batch, xF, xR, xC, ${O} + 1),\n                  getX(batch, xF, xR, xC, ${O} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${O}, d2),\n                  getW(wF, wR, wC, ${O} + 1, d2),\n                  getW(wF, wR, wC, ${O} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dv{constructor(e,t=!1,n=null,r=!1,c=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Dg(this.outputShape.length);const l=e.padInfo.left,d=e.strideWidth,h=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,y=m;let x="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<m;e++)x+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;x+=`\n     for (int r = 0; r < ${f}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<m;e++)x+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;x+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(y+1)/2;t++){const n=2*t;if(x+=`\n           xC = xCCorner + ${n*h};\n           `,1===d){if(n<m&&(l%2==1?(x+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,x+=1===h&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):x+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<m)){const e=l%2==0?o.util.nearestLargerEven(h):h;h%2==0&&l%2==1||h%2!=0&&l%2!=1?(x+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,x+=h>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):x+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<m&&(l%2==1?(x+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<m&&(x+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(x+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<m&&(x+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<m&&(x+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<m&&(x+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}x+="\n     }\n   ",x+="\n     }\n   ",x+="\n     }\n   ";let O="",v="";n&&(O=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:c?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),c&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${O}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${x}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${k}\n         ${v}\n         setOutput(result);\n       }\n     `}}class hv{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Dg(this.outputShape.length);const{dataFormat:n}=t,r=hg(),o="channelsLast"===n,c=o?1:2,l=o?2:3,d=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let h="";for(let e=0;e<=1;e++)for(let col=0;col<=1;col++)h+=`\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${e};\n\n          ${d}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${c}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${l}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${h}\n\n        ${r.output} = result;\n      }\n    `}}function pv(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function fv({x:e,filter:filter,convInfo:t,backend:n,bias:r=null,preluActivationWeights:c=null,leakyreluAlpha:l=0,activation:d=null}){const h=e.shape,f=n.texData.get(e.dataId),m=t.inChannels,y=h[0]*h[1]*h[2],x=t.outChannels,O="channelsLast"===t.dataFormat;let v;const k=[];if(null!=c){const e=pv(c.shape,O);null!=e&&(c=$x({inputs:{x:c},backend:n,attrs:{shape:e}}),k.push(c))}if(null!=r){const e=pv(r.shape,O);null!=e&&(r=$x({inputs:{x:r},backend:n,attrs:{shape:e}}),k.push(r))}if(!((1===y||1===x)&&m>1e3)&&f.isPacked&&O&&null!=f.texture&&h[2]%2!=0&&o.util.arraysEqual(f.shape.slice(-3),h.slice(-3))){const m=h[0]*h[1]*(h[2]+1),y={dataId:e.dataId,shape:[1,m,t.inChannels],dtype:e.dtype},x=f.shape;f.shape=f.shape.slice(),f.shape[f.shape.length-2]++,o.util.assert(rg(f.shape,y.shape),(()=>`packed reshape ${f.shape} to ${y.shape} isn't free`));const O=$x({inputs:{x:filter},backend:n,attrs:{shape:[1,t.inChannels,t.outChannels]}});k.push(O);const w=Wx({a:y,b:O,backend:n,transposeA:false,transposeB:false,bias:r,activation:d,preluActivationWeights:c,leakyreluAlpha:l}),S=n.texData.get(w.dataId);o.util.assert(S.isPacked,(()=>"batchMatMul result is expected to be packed")),f.shape=x,S.shape=t.outShape,v=lx({inputs:{x:w},backend:n}),v.shape=t.outShape,k.push(w)}else{const o=t.outHeight*t.outWidth,h=$x({inputs:{x:e},backend:n,attrs:{shape:O?[t.batchSize,o,t.inChannels]:[t.batchSize,t.inChannels,o]}}),f=$x({inputs:{x:filter},backend:n,attrs:{shape:[1,t.inChannels,t.outChannels]}}),m=Wx({a:O?h:f,b:O?f:h,transposeA:!O,transposeB:false,backend:n,bias:r,activation:d,preluActivationWeights:c,leakyreluAlpha:l});v=$x({inputs:{x:m},backend:n,attrs:{shape:t.outShape}}),k.push(h),k.push(f),k.push(m)}for(const i of k)n.disposeIntermediateTensorInfo(i);return v}function mv({x:e,filter:filter,convInfo:t,backend:n,bias:r=null,preluActivationWeights:c=null,leakyreluAlpha:l=0,activation:d=null}){const{filterWidth:h,filterHeight:f,inChannels:m,outWidth:y,outHeight:x,dataFormat:O}=t,v="channelsLast"===O,k=h*f*m,w=x*y,S=[t.batchSize,k,w],I=[];if(null!=c){const e=pv(c.shape,v);null!=e&&(c=$x({inputs:{x:c},backend:n,attrs:{shape:e}}),I.push(c))}if(null!=r){const e=pv(r.shape,v);null!=e&&(r=$x({inputs:{x:r},backend:n,attrs:{shape:e}}),I.push(r))}const N=$x({inputs:{x:filter},backend:n,attrs:{shape:[1,k,o.util.sizeFromShape(filter.shape)/k]}});I.push(N);const j=new hv(S,t),T=[e.shape,[t.padInfo.top,t.padInfo.left],[t.strideHeight,t.strideWidth],[t.dilationHeight,t.dilationWidth],[t.inChannels],[t.filterWidth*t.inChannels],[t.outWidth]],C=n.runWebGLProgram(j,[e],"float32",T),$=$x({inputs:{x:C},backend:n,attrs:{shape:S}});I.push(C),I.push($);const E=null!=r,A=null!=c,R="leakyrelu"===d,_=d?kx(d,!0):null,F=new wx(v?$.shape:N.shape,v?N.shape:$.shape,v?[t.batchSize,w,t.outChannels]:[t.batchSize,t.outChannels,w],!0,!1,E,_,A,R),D=v?[$,N]:[N,$];if(r&&D.push(r),A&&D.push(c),R){const e=n.makeTensorInfo([],"float32",o.util.createScalarValue(l,"float32"));D.push(e),I.push(e)}const M=n.runWebGLProgram(F,D,"float32"),z=$x({inputs:{x:M},backend:n,attrs:{shape:t.outShape}});I.push(M);for(const i of I)n.disposeIntermediateTensorInfo(i);return z}const bv={kernelName:o.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dataFormat:h,dilations:f,dimRoundingMode:m}=r,y=o.backend_util.convertConv2DDataFormat(h),x=o.backend_util.computeConv2DInfo(c.shape,filter.shape,l,f,d,m,!1,y);let O;if(1!==x.filterHeight||1!==x.filterWidth||1!==x.dilationHeight||1!==x.dilationWidth||1!==x.strideHeight||1!==x.strideWidth||"SAME"!==x.padInfo.type&&"VALID"!==x.padInfo.type)if(x.strideWidth<=2&&"channelsLast"===y&&Object(o.env)().getBool("WEBGL_EXP_CONV")){const e=new dv(x),t=[[x.padInfo.top,x.padInfo.left],[x.strideHeight,x.strideWidth],[x.dilationHeight,x.dilationWidth],[x.inHeight,x.inWidth]];O=n.runWebGLProgram(e,[c,filter],"float32",t)}else if(Object(o.env)().getBool("WEBGL_CONV_IM2COL"))O=mv({x:c,filter:filter,convInfo:x,backend:n});else{const e=new cv(x);O=n.runWebGLProgram(e,[c,filter],"float32")}else O=fv({x:c,filter:filter,convInfo:x,backend:n});const v=$x({inputs:{x:O},backend:n,attrs:{shape:x.outShape}});return n.disposeIntermediateTensorInfo(O),v}};class gv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,c="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${c}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,c="channelsLast"===e.dataFormat,l=t-1-e.padInfo.top,d=n-1-e.padInfo.left,h=c?1:2,f=c?2:3,m=c?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${m}];\n\n        ivec2 dyCorner = ivec2(coords[${h}], coords[${f}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${c}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.padInfo.front,c=e.padInfo.top,l=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${o};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${c};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${l};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ov{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,c=e.strideHeight,l=e.strideWidth,d=t-1-e.padInfo.front,h=n-1-e.padInfo.top,f=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${h}, ${f});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${c}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${l}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const vv={kernelName:o.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,dy:l}=t,{strides:d,pad:h,dataFormat:f,dimRoundingMode:m,filterShape:y}=r,x=o.backend_util.convertConv2DDataFormat(f),O=o.backend_util.computeConv2DInfo(c.shape,y,d,1,h,m,!1,x),v=new gv(O);return n.runWebGLProgram(v,[c,l],"float32")}};const kv={kernelName:o.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,filter:filter}=t,{inputShape:l,strides:d,pad:h,dataFormat:f,dimRoundingMode:m}=r,y=o.backend_util.convertConv2DDataFormat(f),x=o.backend_util.computeConv2DInfo(l,filter.shape,d,1,h,m,!1,y),O=new yv(x);return n.runWebGLProgram(O,[c,filter],"float32")}};const wv={kernelName:o.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dilations:h}=r,f=o.backend_util.computeConv3DInfo(c.shape,filter.shape,l,h,d),m=new lv(f);return n.runWebGLProgram(m,[c,filter],"float32")}};const Sv={kernelName:o.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,dy:l}=t,{strides:d,pad:h,filterShape:f}=r,m=o.backend_util.computeConv3DInfo(c.shape,f,d,1,h),y=new xv(m);return n.runWebGLProgram(y,[c,l],"float32")}};const Iv={kernelName:o.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,filter:filter}=t,{pad:l,strides:d,inputShape:h}=r,f=o.backend_util.computeConv3DInfo(h,filter.shape,d,1,l),m=new Ov(f);return n.runWebGLProgram(m,[c,filter],"float32")}},Nv=Ox({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),jv={kernelName:o.Cos,backendName:"webgl",kernelFunc:Nv},Tv=Ox({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Cv={kernelName:o.Cosh,backendName:"webgl",kernelFunc:Tv};class $v{constructor(e,t,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[c,l,d,h]=e,[f]=t,[m,y]=n;this.outputShape=[f,m,y,h];const x="bilinear"===r?1:0,[O,v]=[l-1+".0",d-1+".0"],[k,w,S]=m>1?[""+(l-1)/(m-1),"(y2-y1) * height_ratio",`y1*${O} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${O}`],[I,N,j]=y>1?[""+(d-1)/(y-1),"(x2-x1) * width_ratio",`x1*${v} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${v}`];this.userCode=`\n      const float height_ratio = float(${k});\n      const float width_ratio = float(${I});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${c}) {\n          return;\n        }\n\n        float height_scale = ${w};\n        float width_scale = ${N};\n\n        float in_y = ${S};\n        if( in_y < 0.0 || in_y > ${O} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${j};\n        if( in_x < 0.0 || in_x > ${v} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${x} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Ev={kernelName:o.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:image,boxes:o,boxInd:c}=t,{cropSize:l,method:d,extrapolationValue:h}=r,f=new $v(image.shape,o.shape,l,d,h);return n.runWebGLProgram(f,[image,o,c],"float32")}};var Av;!function(e){e.Prod="*",e.Sum="+"}(Av||(Av={}));class Rv{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,c=this.op===Av.Prod?"1.0":"0.0",l=n?c:`getX(${_v(o,"coords",this.op)})`,d=this.outputShape[this.outputShape.length-1];let h="",f="";n?(h=r?"end != "+(d-1):"end != 0",f=r?"end + 1":"end - 1"):(h=r?`end + pow2 < ${d}`:"end >= pow2",f=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Cg(o)} coords = getOutputCoords();\n        int end = ${Fv(o,"coords",this.op)};\n        float val = ${l};\n        int pow2 = int(pow(2.0, index));\n        if (${h}) {\n          int idx = ${f};\n          ${Fv(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${_v(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function _v(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Fv(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Dv(e,t,n,r,c,l){const d=t.shape.length,h=o.backend_util.getAxesPermutation([r],d);let f=t;null!=h&&(f=Px({inputs:{x:t},backend:n,attrs:{perm:h}}));const m=o.backend_util.getInnerMostAxes(1,d)[0];if(m!==d-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const y=f.shape[m];let x=lx({inputs:{x:f},backend:n});for(let i=0;i<=Math.ceil(Math.log2(y))-1;i++){const t=new Rv(e,f.shape,!1,l),r=[[i]],o=x;x=n.runWebGLProgram(t,[x],x.dtype,r),n.disposeIntermediateTensorInfo(o)}if(c){const t=new Rv(e,f.shape,c,l),r=x;x=n.runWebGLProgram(t,[x],x.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=h){const e=Px({inputs:{x:x},backend:n,attrs:{perm:o.backend_util.getUndoAxesPermutation(h)}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(f),e}return x}const Mv={kernelName:o.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{axis:c,exclusive:l,reverse:d}=r;return Dv(Av.Prod,o,n,c,l,d)}};const zv={kernelName:o.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{axis:c,exclusive:l,reverse:d}=r;return Dv(Av.Sum,o,n,c,l,d)}};const Lv={kernelName:o.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o,weights:c}=t,{size:l,binaryOutput:d}=r;if(1===o.shape.length){const e=n.readSync(o.dataId),t=n.readSync(c.dataId),r=ty(e,t,c.dtype,c.shape,l);return n.makeTensorInfo([l],c.dtype,r)}if(2===o.shape.length){const e=n.bufferSync(o),t=n.bufferSync(c),r=ny(e,t,l,d);return n.makeTensorInfo(r.shape,c.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`)}};class Pv{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Bv={kernelName:o.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:o}=t,{blockSize:c,dataFormat:l}=r,d=o.shape[0],h=("NHWC"===l?o.shape[1]:o.shape[2])*c,f=("NHWC"===l?o.shape[2]:o.shape[3])*c,m=("NHWC"===l?o.shape[3]:o.shape[1])/(c*c),y=new Pv("NHWC"===l?[d,h,f,m]:[d,m,h,f],c,l);return n.runWebGLProgram(y,[o],o.dtype)}};class Wv{constructor(e,t=!1,n=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Dg(this.outputShape.length);const c=e.filterHeight,l=e.filterWidth,d=e.outChannels/e.inChannels;let h="",f="";n&&(h=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${h}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${d};\n        int q = d2 - d1 * ${d};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${l}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}class Vv{constructor(e,t=!1,n=null,r=!1,c=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Dg(this.outputShape.length);const l=e.outChannels/e.inChannels,d=e.padInfo.left,h=e.strideWidth,f=e.dilationWidth,m=e.filterHeight,y=e.filterWidth,x=y;let O="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<y;e++)O+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;O+=`\n    for (int r = 0; r < ${m}; r++) {\n      `;for(let e=0;e<y;e++)O+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;O+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(x+1)/2;e++){const t=2*e;if(O+=`\n          xC = xCCorner + ${t*f};\n          `,1===h){if(t<y&&(d%2==1?(O+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,O+=1===f&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):O+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<y)){const e=d%2==0?o.util.nearestLargerEven(f):f;f%2==0&&d%2==1||f%2!=0&&d%2!=1?(O+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,O+=f>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):O+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<y&&(d%2==1?(O+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<y&&(O+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(O+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<y&&(O+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<y&&(O+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<y&&(O+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}O+="\n    }\n  ",O+="\n      }\n    ";let v="",k="";n&&(v=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:c?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,k="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),c&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${v}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${O}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${w}\n        ${k}\n        setOutput(result);\n      }\n    `}}const Uv={kernelName:o.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dilations:h,dimRoundingMode:f}=r;let m=h;null==m&&(m=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const y=o.backend_util.computeConv2DInfo(c.shape,filter.shape,l,m,d,f,!0);let x;x=Object(o.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1?new Vv(y):new Wv(y);const O=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]];return n.runWebGLProgram(x,[c,filter],"float32",O)}};class Gv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,c=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${c} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Hv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,c=t-1-e.padInfo.top,l=n-1-e.padInfo.left,d=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${d}; dm++) {\n              int d2 = d1 * ${d} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const qv={kernelName:o.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,dy:l}=t,{strides:d,dilations:h,pad:f,dimRoundingMode:m,filterShape:y}=r,x=o.backend_util.computeConv2DInfo(c.shape,y,d,h,f,m,!0),O=new Gv(x);return n.runWebGLProgram(O,[c,l],"float32")}};const Kv={kernelName:o.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,filter:filter}=t,{strides:l,dilations:d,pad:h,dimRoundingMode:f,inputShape:m}=r,y=o.backend_util.computeConv2DInfo(m,filter.shape,l,d,h,f,!0),x=new Hv(y);return n.runWebGLProgram(x,[c,filter],"float32")}};class Xv{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Yv={kernelName:o.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,c=[...r.shape,...r.shape],l=o.util.sizeFromShape(r.shape),d=$x({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=new Xv(l),f=n.runWebGLProgram(h,[d],d.dtype),m=$x({inputs:{x:f},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};class Zv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:o,strideWidth:c,filterHeight:l,filterWidth:d,dilationHeight:h,dilationWidth:f}=e,{top:m,left:y}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${c});\n      const ivec2 pads = ivec2(${m}, ${y});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${l}; h++) {\n          int hIn = hBeg + h * ${h};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${d}; w++) {\n              int wIn = wBeg + w * ${f};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Jv={kernelName:o.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter}=t,{strides:l,pad:d,dilations:h}=r,f=o.backend_util.computeDilation2DInfo(c.shape,filter.shape,l,d,"NHWC",h);let m;const y=new Zv(f);m=n.runWebGLProgram(y,[c,filter],"float32");const x=$x({inputs:{x:m},backend:n,attrs:{shape:f.outShape}});return n.disposeIntermediateTensorInfo(m),x}};const Qv={kernelName:o.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:c}=r,l=t,{allDims:d,summedDims:h,idDims:f}=o.backend_util.decodeEinsumEquation(c,l.length);o.backend_util.checkEinsumDimSizes(d.length,f,l);const{path:path,steps:m}=o.backend_util.getEinsumComputePath(h,f),y=m.length;let x=null,O=d.length;const v=[];for(let i=0;i<y;++i){for(const e of m[i]){const{permutationIndices:t,expandDims:r}=o.backend_util.getEinsumPermutation(O,f[e]);let c;o.backend_util.isIdentityPermutation(t)?c=l[e]:(c=Px({inputs:{x:l[e]},backend:n,attrs:{perm:t}}),v.push(c));const d=c.shape.slice();for(let e=0;e<r.length;++e)d.splice(r[e],0,1);o.util.arraysEqual(c.shape,d)||(c=$x({inputs:{x:c},backend:n,attrs:{shape:d}}),v.push(c)),null===x?x=c:(x=Tx({inputs:{a:c,b:x},backend:n}),v.push(x))}i<y-1&&(path[i]>=0&&(x=zx({inputs:{x:x},backend:n,attrs:{axis:path[i]-(d.length-O),keepDims:!1}}),v.push(x)),O--)}for(const e of v)e!==x&&n.disposeIntermediateTensorInfo(e);return x}},ek=Ox({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),tk={kernelName:o.Elu,backendName:"webgl",kernelFunc:ek},nk={kernelName:o.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:c}=t,l=Object(o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cx("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,c.shape):new ux("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,c.shape);return n.runWebGLProgram(l,[r,c],r.dtype)}},rk=vx({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:iy}),ak={kernelName:o.Equal,backendName:"webgl",kernelFunc:rk},sk=Ox({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${o.backend_util.ERF_P};\n  float a1 = ${o.backend_util.ERF_A1};\n  float a2 = ${o.backend_util.ERF_A2};\n  float a3 = ${o.backend_util.ERF_A3};\n  float a4 = ${o.backend_util.ERF_A4};\n  float a5 = ${o.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),ik={kernelName:o.Erf,backendName:"webgl",kernelFunc:sk},ok=Ox({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:oy,dtype:"float32"}),uk={kernelName:o.Exp,backendName:"webgl",kernelFunc:ok};function ck(e){const{inputs:t,attrs:n,backend:r}=e,{dim:c}=n,{input:input}=t,l=input.shape.length,d=input.shape.slice();let h=c;return c<0&&(o.util.assert(-(l+1)<=c,(()=>`Axis must be in the interval [${-(l+1)}, ${l}]`)),h=l+c+1),d.splice(h,0,1),$x({inputs:{x:input},backend:r,attrs:{shape:d}})}const lk={kernelName:o.ExpandDims,backendName:"webgl",kernelFunc:ck},dk="return exp(x) - 1.0;",hk=Ox({opSnippet:dk,packedOpSnippet:dk,cpuKernelImpl:uy}),pk={kernelName:o.Expm1,backendName:"webgl",kernelFunc:hk};class fk{constructor(component,e,t){this.variableNames=["real","imag"];const n=e[1];this.outputShape=e;const r=t?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,o=t?`${n}.0`:"1.0";let c;if("real"===component)c="return real * expR - imag * expI;";else{if("imag"!==component)throw new Error(`FFT component must be either "real" or "imag", got ${component}.`);c="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${c}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${n});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${n}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${o};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function mk(e,t,n){const r=n.texData.get(e.dataId),c=o.util.sizeFromShape(e.shape),l=e.shape[e.shape.length-1],d=$x({inputs:{x:e},backend:n,attrs:{shape:[c/l,l]}}),h=d.shape,f=new fk("real",h,t),m=new fk("imag",h,t),y=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:h},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:h}],x=n.runWebGLProgram(f,y,"float32"),O=n.runWebGLProgram(m,y,"float32"),v=hx({inputs:{real:x,imag:O},backend:n});n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(O);const k=$x({inputs:{x:v},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(v),k}const bk={kernelName:o.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t;return mk(input,!1,n)}};class gk{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function yk(e){const{backend:t,attrs:n}=e,{shape:r,value:c}=n;let{dtype:l}=n;if(l=l||o.util.inferDtype(c),"string"===l){const e=o.util.getArrayFromDType(l,o.util.sizeFromShape(r));return e.fill(c),t.makeTensorInfo(r,l,e)}{const e=new gk(r,c),n=[[c]];return t.runWebGLProgram(e,[],l,n)}}const xk={kernelName:o.Fill,backendName:"webgl",kernelFunc:yk};class Ok{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const vk={kernelName:o.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:image}=e,n=t,r=new Ok(image.shape);return n.runWebGLProgram(r,[image],image.dtype)}},kk="return floor(x);",wk=Ox({opSnippet:kk,packedOpSnippet:kk,cpuKernelImpl:cy}),Sk={kernelName:o.Floor,backendName:"webgl",kernelFunc:wk},Ik=vx({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),Nk={kernelName:o.FloorDiv,backendName:"webgl",kernelFunc:Ik};class jk{constructor(e){this.variableNames=["A"];const t=hg(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Tk{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=hg(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const Ck={kernelName:o.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:c}=t;const{numChannels:l}=r,d="undefined"!=typeof HTMLVideoElement&&c instanceof HTMLVideoElement,h="undefined"!=typeof HTMLImageElement&&c instanceof HTMLImageElement,[f,m]=d?[c.videoWidth,c.videoHeight]:[c.width,c.height],y=[m,f],x=[m,f,l];if(h||d){const e=Object(o.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=$k&&e===Ek||(Ek=e,$k=document.createElement("canvas").getContext("2d",{willReadFrequently:Ek})),$k.canvas.width=f,$k.canvas.height=m,$k.drawImage(c,0,0,f,m),c=$k.canvas}const O=n.makeTensorInfo(y,"int32");n.texData.get(O.dataId).usage=_b.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(O.dataId),c);const v=Object(o.env)().getBool("WEBGL_PACK")?new Tk(x):new jk(x),k=n.runWebGLProgram(v,[O],"int32");return n.disposeData(O.dataId),k}};let $k,Ek=Object(o.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const Ak={kernelName:o.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter,bias:l,preluActivationWeights:d}=t,{strides:h,pad:f,dataFormat:m,dilations:y,dimRoundingMode:x,activation:O,leakyreluAlpha:v}=r,k=o.backend_util.convertConv2DDataFormat(m),w=o.backend_util.computeConv2DInfo(c.shape,filter.shape,h,y,f,x,!1,k);let S;const I=[],N=null!=l,j=null!=d,T="leakyrelu"===O,C=()=>{const e=[c,filter],t=(input,e)=>{if("NCHW"===e&&1===input.shape.length&&1!==input.shape[0]){const e=$x({inputs:{x:input},backend:n,attrs:{shape:[input.shape[0],1,1]}});return I.push(e),e}return input};if(N&&e.push(t(l,m)),j&&e.push(t(d,m)),T){const t=n.makeTensorInfo([],"float32",o.util.createScalarValue(v,"float32"));e.push(t),I.push(t)}return e};if(1!==w.filterHeight||1!==w.filterWidth||1!==w.dilationHeight||1!==w.dilationWidth||1!==w.strideHeight||1!==w.strideWidth||"SAME"!==w.padInfo.type&&"VALID"!==w.padInfo.type)if(w.strideWidth<=2&&"channelsLast"===k&&Object(o.env)().getBool("WEBGL_EXP_CONV")){const e=O?kx(O,!0):null,t=new dv(w,N,e,j,T),r=[[w.padInfo.top,w.padInfo.left],[w.strideHeight,w.strideWidth],[w.dilationHeight,w.dilationWidth],[w.inHeight,w.inWidth]],o=C();S=n.runWebGLProgram(t,o,"float32",r)}else if(Object(o.env)().getBool("WEBGL_CONV_IM2COL"))S=mv({x:c,filter:filter,convInfo:w,backend:n,bias:l,activation:O,preluActivationWeights:d,leakyreluAlpha:v});else{const e=O?kx(O,!1):null,t=new cv(w,N,e,j,T),r=C();S=n.runWebGLProgram(t,r,"float32")}else S=fv({x:c,filter:filter,convInfo:w,backend:n,bias:l,activation:O,preluActivationWeights:d,leakyreluAlpha:v});const $=$x({inputs:{x:S},backend:n,attrs:{shape:w.outShape}});return I.push(S),I.forEach((e=>n.disposeIntermediateTensorInfo(e))),$}};const Rk={kernelName:o.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,filter:filter,bias:l,preluActivationWeights:d}=t,{strides:h,pad:f,dilations:m,dimRoundingMode:y,activation:x,leakyreluAlpha:O}=r,v=[];let k=m;null==k&&(k=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(h,k),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${h} and dilations '${k}'`));const w=o.backend_util.computeConv2DInfo(c.shape,filter.shape,h,k,f,y,!0),S=Object(o.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&w.strideWidth<=2&&w.outChannels/w.inChannels==1,I=x?kx(x,S):null,N=[c,filter],j=null!=l,T=null!=d,C="leakyrelu"===x;if(j&&N.push(l),T&&N.push(d),C){const e=n.makeTensorInfo([],"float32",o.util.createScalarValue(O,"float32"));N.push(e),v.push(e)}let $;$=S?new Vv(w,j,I,T,C):new Wv(w,j,I,T,C);const E=[[w.padInfo.top,w.padInfo.left],[w.strideHeight,w.strideWidth],[w.dilationHeight,w.dilationWidth],[w.inHeight,w.inWidth]],A=n.runWebGLProgram($,N,"float32",E);return v.forEach((e=>n.disposeIntermediateTensorInfo(e))),A}};class _k{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const o=Cg(t.length),c=Cg(n.length),l=this.sliceDim>1?"strides[j]":"strides",d=Cg(r.length),h=r.length>1?"paramsShape[j]":"paramsShape";this.userCode=`\n        ${o} strides = ${o}(${this.strides});\n        ${d} paramsShape = ${d}(${this.paramsShape});\n         void main() {\n          ${c} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            out_of_bounds = out_of_bounds || index < 0;\n            out_of_bounds = out_of_bounds || index >= ${h};\n            flattenIndex += index * ${l};\n          }\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const Fk={kernelName:o.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:c}=t,l=c.shape,d=l[l.length-1],h=o.util.sizeFromShape(r.shape),[f,m,y,x]=o.backend_util.prepareAndValidate(r,c),O=$x({inputs:{x:c},backend:n,attrs:{shape:[m,d]}}),v=$x({inputs:{x:r},backend:n,attrs:{shape:[o.util.sizeFromShape(r.shape)/y,y]}});if(n.shouldExecuteOnCPU([r,c])||"string"===r.dtype){const e=n.readSync(c.dataId),t=n.bufferSync(r),o=ly(e,t,r.dtype,m,d,y,x,r.shape,h);return n.makeTensorInfo(f,r.dtype,o.values)}const k=new _k(d,x,[m,y],r.shape),w=n.runWebGLProgram(k,[v,O],v.dtype),S=$x({inputs:{x:w},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(w),S}};class Dk{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Cg(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let i=0;i<e.length;i++)2===i?r.push("index"):r.push(`${n[i]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function Mk(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,indices:l}=t,{axis:d,batchDims:h}=r,f=o.util.parseAxisParam(d,c.shape)[0];if(Object(o.env)().get("DEBUG")){const e=n.readSync(l.dataId),t=c.shape[f];for(let i=0;i<e.length;++i){const n=e[i];o.util.assert(n<=t-1&&n>=0,(()=>`GatherV2: the index value ${n} is not in [0, ${t-1}]`))}}const m=o.backend_util.segment_util.collectGatherOpShapeInfo(c,l,f,h),y=o.util.sizeFromShape(l.shape),x=[],O=$x({inputs:{x:c},backend:n,attrs:{shape:[m.batchSize,m.outerSize,m.dimSize,m.sliceSize]}}),v=$x({inputs:{x:l},backend:n,attrs:{shape:[m.batchSize,y/m.batchSize]}});x.push(O),x.push(v);const k=[m.batchSize,m.outerSize,y/m.batchSize,m.sliceSize];if(n.shouldExecuteOnCPU([c,l])||"string"===c.dtype){const e=n.bufferSync(v),t=n.bufferSync(O),r=dy(t,e,k);return x.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(m.outputShape,r.dtype,r.values)}const w=new Dk(O.shape,k),S=n.runWebGLProgram(w,[O,v],O.dtype);x.push(S);const I=$x({inputs:{x:S},backend:n,attrs:{shape:m.outputShape}});return x.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}const zk={kernelName:o.GatherV2,backendName:"webgl",kernelFunc:Mk},Lk=vx({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:hy,dtype:"bool"}),Pk={kernelName:o.Greater,backendName:"webgl",kernelFunc:Lk},Bk=vx({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:py}),Wk={kernelName:o.GreaterEqual,backendName:"webgl",kernelFunc:Bk};const Vk={kernelName:o.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:input}=t;return mk(input,!0,n)}},Uk=Ox({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Gk={kernelName:o.IsFinite,backendName:"webgl",kernelFunc:Uk},Hk=Ox({opSnippet:"return float(isinf(x));",dtype:"bool"}),qk={kernelName:o.IsInf,backendName:"webgl",kernelFunc:Hk},Kk=Ox({opSnippet:"return float(isnan(x));",dtype:"bool"}),Xk={kernelName:o.IsNan,backendName:"webgl",kernelFunc:Kk},Yk=vx({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:fy,dtype:"bool"}),Zk={kernelName:o.Less,backendName:"webgl",kernelFunc:Yk},Jk=vx({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:my,dtype:"bool"}),Qk={kernelName:o.LessEqual,backendName:"webgl",kernelFunc:Jk};const ew={kernelName:o.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:o,num:c}=n,l=by(r,o,c);return t.makeTensorInfo([l.length],"float32",l)}},tw=Ox({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:gy}),nw={kernelName:o.Log,backendName:"webgl",kernelFunc:tw},rw=Ox({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),aw={kernelName:o.Log1p,backendName:"webgl",kernelFunc:rw},sw=vx({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),iw={kernelName:o.LogicalAnd,backendName:"webgl",kernelFunc:sw},ow=Ox({opSnippet:"return float(!(x >= 1.0));"}),uw={kernelName:o.LogicalNot,backendName:"webgl",kernelFunc:ow},cw=vx({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),lw={kernelName:o.LogicalOr,backendName:"webgl",kernelFunc:cw};class dw{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[];const c=t,l=e[3]-1;let d;this.outputShape=e;const h=`float(${n}) + float(${r}) * sum`;d=.5===o?`inversesqrt(${h})`:1===o?`1.0/(${h})`:`exp(log(${h}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${c}; j <= ${c}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${l}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${d};\n        setOutput(val);\n      }\n    `}}class hw{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const c=t,l=e[3]-1;let d;this.outputShape=e;const h=`float(${n}) + float(${r}) * sum`;d=.5===o?`inversesqrt(${h})`:1===o?`1.0/(${h})`:`exp(log(${h}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${c};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${c}; j <= ${c}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${l}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${d};\n        setOutput(result);\n      }\n    `}}const pw={kernelName:o.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{depthRadius:l,bias:d,alpha:h,beta:f}=r,m=Object(o.env)().getBool("WEBGL_PACK_NORMALIZATION")?new hw(c.shape,l,d,h,f):new dw(c.shape,l,d,h,f);return n.runWebGLProgram(m,[c],c.dtype)}};class fw{constructor(e,t,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const mw={kernelName:o.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:o,y:c,dy:l}=t,{depthRadius:d,bias:h,alpha:f,beta:m}=r,y=new fw(o.shape,d,h,f,m);return n.runWebGLProgram(y,[o,c,l],o.dtype)}};function bw(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{reductionIndices:l,keepDims:d}=r,h=c.shape.length,f=o.util.parseAxisParam(l,c.shape);let m=f;const y=o.backend_util.getAxesPermutation(m,h),x=null!=y,O=n.shouldExecuteOnCPU([c]);let v=c;if(x){if(O){const e=n.texData.get(v.dataId).values,t=new Array(h);for(let i=0;i<t.length;i++)t[i]=c.shape[y[i]];const r=Vy(e,c.shape,c.dtype,y,t);v=n.makeTensorInfo(t,c.dtype);n.texData.get(v.dataId).values=r}else v=Mx(c,y,n);m=o.backend_util.getInnerMostAxes(m.length,h)}o.backend_util.assertAxesAreInnerMostDims("max",m,h);const[k,w]=o.backend_util.computeOutAndReduceShapes(v.shape,m);let S,I=k;if(d&&(I=o.backend_util.expandShapeToKeepDim(k,f)),O){const e=n.texData.get(v.dataId).values,t=yy(e,o.util.sizeFromShape(w),I,c.dtype);S=n.makeTensorInfo(I,c.dtype);n.texData.get(S.dataId).values=t}else S=function(e,t,n,r){const c=o.util.sizeFromShape(t),l=$x({inputs:{x:e},attrs:{shape:[o.util.sizeFromShape(e.shape)/c,c]},backend:r}),d=_x(l,e.dtype,"max",r),h=$x({inputs:{x:d},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(d),h}(v,w,I,n);return x&&n.disposeIntermediateTensorInfo(v),S}const gw={kernelName:o.Max,backendName:"webgl",kernelFunc:bw},yw=vx({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:xy}),xw={kernelName:o.Maximum,backendName:"webgl",kernelFunc:yw};const Ow={kernelName:o.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t;lg(c,"maxPool");const{filterSize:l,strides:d,pad:h,dimRoundingMode:f}=r;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(d,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${d} and dilations '1'`));const m=o.backend_util.computePool2DInfo(c.shape,l,d,1,h,f);if(1===m.filterWidth&&1===m.filterHeight&&o.util.arraysEqual(m.inShape,m.outShape))return lx({inputs:{x:c},backend:n});const y=new vO(m,"max",!1);return n.runWebGLProgram(y,[c],c.dtype)}};const vw={kernelName:o.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{filterSize:l,strides:d,pad:h,dataFormat:f,dimRoundingMode:m}=r,y=o.backend_util.computePool3DInfo(c.shape,l,d,[1,1,1],h,m,f),x=new kO(y,"max",!1);return n.runWebGLProgram(x,[c],c.dtype)}};class kw{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,o=e.effectiveFilterHeight,c=e.effectiveFilterWidth,l=o-1-e.padInfo.top,d=c-1-e.padInfo.left,h=o*c-1;this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${c}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${h} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${c} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ww{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.dilationDepth,c=e.dilationHeight,l=e.dilationWidth,d=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=d-1-e.padInfo.front,y=h-1-e.padInfo.top,x=f-1-e.padInfo.left,O=d*h*f-1;this.userCode=`\n      const ivec3 pads = ivec3(${m}, ${y}, ${x});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${d};\n           wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${c}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${f};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${O} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${h} * ${f} +\n                  wR * ${f} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Sw={kernelName:o.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input}=t,l=input,{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=r,y=o.backend_util.computePool3DInfo(l.shape,d,h,[1,1,1],f,m),x=new kO(y,"max",!0),O=n.runWebGLProgram(x,[l],l.dtype),v=new ww(y),k=n.runWebGLProgram(v,[c,O],l.dtype);return n.disposeIntermediateTensorInfo(O),k}};const Iw={kernelName:o.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:c,input:input,output:output}=t,l=input;lg([input,output],"maxPoolGrad");const{filterSize:d,strides:h,pad:f,dimRoundingMode:m}=r,y=o.backend_util.computePool2DInfo(l.shape,d,h,1,f,m),x=new vO(y,"max",!0),O=n.runWebGLProgram(x,[l],l.dtype),v=new kw(y),k=n.runWebGLProgram(v,[c,O],l.dtype);return n.disposeIntermediateTensorInfo(O),k}};const Nw={kernelName:o.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:c,strides:l,pad:d,includeBatchInIndex:h}=t,f=n;o.util.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const m=[1,1];o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const y=o.backend_util.computePool2DInfo(r.shape,c,l,m,d),[x,O]=function(e,t,n,r){let o=new vO(n,"max",!1);const c=r.runWebGLProgram(o,[e],"float32");return o=new vO(n,"max",!0,!0,t),[c,r.runWebGLProgram(o,[e],"float32")]}(r,h,y,f);return[x,O]}};const jw={kernelName:o.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:c,axis:l}=t,d=n,h=r.shape.length,f=o.util.parseAxisParam(l,r.shape);let m=f;const y=o.backend_util.getAxesPermutation(m,h),x=null!=y,O=d.shouldExecuteOnCPU([r]),v=[];let k=r;if(x){if(O){const e=d.texData.get(k.dataId).values,t=new Array(h);for(let i=0;i<t.length;i++)t[i]=r.shape[y[i]];const n=Vy(e,r.shape,r.dtype,y,t);k=d.makeTensorInfo(t,r.dtype);d.texData.get(k.dataId).values=n}else k=Mx(r,y,d);v.push(k),m=o.backend_util.getInnerMostAxes(m.length,h)}o.backend_util.assertAxesAreInnerMostDims("sum",m,h);const[w,S]=o.backend_util.computeOutAndReduceShapes(k.shape,m);let I=w;c&&(I=o.backend_util.expandShapeToKeepDim(w,f));const N=function(e,t,n,r){const c=o.util.sizeFromShape(t),l=$x({inputs:{x:e},attrs:{shape:[o.util.sizeFromShape(e.shape)/c,c]},backend:r}),d=_x(l,"float32","mean",r),h=$x({inputs:{x:d},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(d),h}(k,S,I,d);for(const i of v)d.disposeIntermediateTensorInfo(i);return N}};const Tw={kernelName:o.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r,h=c.shape.length,f=o.util.parseAxisParam(l,c.shape);let m=f;const y=o.backend_util.getAxesPermutation(m,h);let x=c;null!=y&&(x=Px({inputs:{x:c},backend:n,attrs:{perm:y}}),m=o.backend_util.getInnerMostAxes(m.length,c.shape.length)),o.backend_util.assertAxesAreInnerMostDims("min",m,h);const[O,v]=o.backend_util.computeOutAndReduceShapes(x.shape,m),k=$x({inputs:{x:x},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(v)]}}),w=_x(k,k.dtype,"min",n);let S;if(d){S=$x({inputs:{x:w},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(O,f)}})}else S=$x({inputs:{x:w},backend:n,attrs:{shape:O}});return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(w),null!=y&&n.disposeIntermediateTensorInfo(x),S}},Cw=vx({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Oy}),$w={kernelName:o.Minimum,backendName:"webgl",kernelFunc:Cw};class Ew{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=Cg(r),c=t.map((p=>p[0])).join(","),l=t.map(((p,i)=>p[0]+e[i])).join(","),d=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),h="reflect"===n?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${c});\n      ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${h};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${h};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${d}));\n      }\n    `:`\n        int start = ${c};\n        int end = ${l};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${h};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${h};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Aw{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=Cg(r),c=t.map((p=>p[0])).join(","),l=t.map(((p,i)=>p[0]+e[i])).join(","),d=Hy("rc",r),source=Hy("source",r),h=`${d[r-1]} < ${this.outputShape[r-1]}`,f=1===r?"source":`vec2(${source.slice(-2).join()})`,m="reflect"===n?0:1;let y="";if(1===r){const e=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${m};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${m};\n        }\n        source -= start;\n      `;y=`\n        ${o} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${source.join()}), ${f});\n        ${d[r-1]} += 1;\n        if(${h}) {\n          ${e}\n          result[1] = getChannel(getX(${source.join()}), ${f});\n        }\n      `}else{const e=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${m}) +\n                gte * ((end - 1) * 2 - source + ${m});\n        source -= start;\n      `;y=`\n        ${o} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${source.join()}), ${f});\n        ${d[r-1]} += 1;\n        if(${h}) {\n          ${e}\n          result[1] = getChannel(getX(${source.join()}), ${f});\n        }\n        rc = outputLoc;\n        ${d[r-2]} += 1;\n        if(${d[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${source.join()}), ${f});\n          ${d[r-1]} += 1;\n          if(${h}) {\n            ${e}\n            result[3] = getChannel(getX(${source.join()}), ${f});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${c});\n      const ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${y}\n        setOutput(result);\n      }\n    `}}const Rw={kernelName:o.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:c,mode:l}=n,d=Object(o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Aw(r.shape,c,l):new Ew(r.shape,c,l);return t.runWebGLProgram(d,[r],r.dtype)}},_w=vx({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Fw={kernelName:o.Mod,backendName:"webgl",kernelFunc:_w};class Dw{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const Mw=vx({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),zw={kernelName:o.RealDiv,backendName:"webgl",kernelFunc:Mw},Lw="return a - b;",Pw=vx({opSnippet:Lw,packedOpSnippet:Lw,supportsComplex:!0,cpuKernelImpl:Py}),Bw={kernelName:o.Sub,backendName:"webgl",kernelFunc:Pw};function Ww(e){const{inputs:t,backend:n,attrs:r}=e,{logits:c}=t,{dim:l}=r,d=o.util.parseAxisParam([l],c.shape),h=bw({inputs:{x:c},backend:n,attrs:{reductionIndices:d,keepDims:!1}}),f=o.backend_util.expandShapeToKeepDim(h.shape,d),m=$x({inputs:{x:h},backend:n,attrs:{shape:f}}),a=Pw({inputs:{a:c,b:m},backend:n}),b=ok({inputs:{x:a},backend:n}),y=zx({inputs:{x:b},backend:n,attrs:{axis:d,keepDims:!1}}),x=$x({inputs:{x:y},backend:n,attrs:{shape:f}}),O=Mw({inputs:{a:b,b:x},backend:n});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(x),O}const Vw={kernelName:o.Softmax,backendName:"webgl",kernelFunc:Ww};const Uw={kernelName:o.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:o}=t,{numSamples:c,seed:l,normalized:d}=r,h=d?o:Ww({inputs:{logits:o},backend:n,attrs:{dim:o.shape.length-1}}),f=h.shape[0],m=h.shape[1],y=new Dw(f,m,c),x=[[l]],O=n.runWebGLProgram(y,[h],"int32",x);return d||n.disposeIntermediateTensorInfo(h),O}};const Gw={kernelName:o.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,o]=ky(e.values,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,t)}let c;return c=Object(o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new nx(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Qy(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(c,[r],r.dtype)}},Hw=o.kernel_impls.nonMaxSuppressionV3Impl;const qw={kernelName:o.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:c,scores:l}=t,{maxOutputSize:d,iouThreshold:h,scoreThreshold:f}=r,m=n.readSync(c.dataId),y=n.readSync(l.dataId),{selectedIndices:x}=Hw(m,y,d,h,f);return n.makeTensorInfo([x.length],"int32",new Int32Array(x))}},Kw=o.kernel_impls.nonMaxSuppressionV4Impl;const Xw={kernelName:o.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:c,scores:l}=t,{maxOutputSize:d,iouThreshold:h,scoreThreshold:f,padToMaxOutputSize:m}=r,y=n.readSync(c.dataId),x=n.readSync(l.dataId),{selectedIndices:O,validOutputs:v}=Kw(y,x,d,h,f,m);return[n.makeTensorInfo([O.length],"int32",new Int32Array(O)),n.makeTensorInfo([],"int32",new Int32Array([v]))]}},Yw=o.kernel_impls.nonMaxSuppressionV5Impl;const Zw={kernelName:o.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:c,scores:l}=t,{maxOutputSize:d,iouThreshold:h,scoreThreshold:f,softNmsSigma:m}=r,y=n.readSync(c.dataId),x=n.readSync(l.dataId),O=d,v=h,k=f,w=m,{selectedIndices:S,selectedScores:I}=Yw(y,x,O,v,k,w);return[n.makeTensorInfo([S.length],"int32",new Int32Array(S)),n.makeTensorInfo([I.length],"float32",new Float32Array(I))]}};class Jw{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const Qw={kernelName:o.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:c}=t,{dtype:l,depth:d,onValue:h,offValue:f}=r,m=o.util.sizeFromShape(c.shape),y=new Jw(m,d,h,f),x=$x({inputs:{x:c},backend:n,attrs:{shape:[m]}}),O=n.runWebGLProgram(y,[x],l);n.disposeIntermediateTensorInfo(x);const v=$x({inputs:{x:O},backend:n,attrs:{shape:[...c.shape,d]}});return n.disposeIntermediateTensorInfo(O),v}};function eS(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=VO({inputs:{input:r},backend:n}),t=eS({inputs:{x:e},backend:n}),o=av({inputs:{input:r},backend:n}),i=eS({inputs:{x:o},backend:n}),c=hx({inputs:{real:t,imag:i},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),c}return yk({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const tS={kernelName:o.ZerosLike,backendName:"webgl",kernelFunc:eS};const nS={kernelName:o.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:o}=n;if("string"===o.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===o.dtype){const t=VO({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r}),c=av({inputs:{input:o},backend:r}),i=eS({inputs:{x:c},backend:r}),l=hx({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(i),l}return yk({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:r})}};const rS={kernelName:o.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:c}=r;if(1===t.length)return ck({inputs:{input:t[0]},backend:n,attrs:{dim:c}});const l=t[0].shape,d=t[0].dtype;t.forEach((e=>{o.util.assertShapesMatch(l,e.shape,"All tensors passed to stack must have matching shapes"),o.util.assert(d===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const h=[],f=ov({inputs:t.map((e=>{const t=ck({inputs:{input:e},backend:n,attrs:{dim:c}});return h.push(t),t})),backend:n,attrs:{axis:c}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class aS{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=Cg(r),c=t.map((p=>p[0])).join(","),l=t.map(((p,i)=>p[0]+e[i])).join(","),d=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${c});\n      ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${d}));\n        }\n      }\n    `:`\n        int start = ${c};\n        int end = ${l};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class sS{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((p,i)=>p[0]+e[i]+p[1]));const r=e.length,o=Cg(r),c=t.map((p=>p[0])).join(","),l=t.map(((p,i)=>p[0]+e[i])).join(","),d=Hy("rc",r),source=Hy("source",r),h=`${d[r-1]} < ${this.outputShape[r-1]}`,f=1===r?"source":`vec2(${source.slice(-2).join()})`,m=[`${o} rc = outputLoc;`,`${d[r-1]} += 1;\n       if(${h}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${d[r-2]} += 1;\n       if(${d[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${d[r-1]} += 1;\n         if(${h}) {`],y=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let x="";for(let i=0,e=1===r?2:4;i<e;i++)x+=`\n        ${m[i]}\n        if (${y}) {\n          result[${i}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${f});\n        }\n      `;x+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${c});\n      const ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${x}\n        setOutput(result);\n      }\n    `}}const iS=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{paddings:l,constantValue:d}=r;if(0===o.util.sizeFromShape(c.shape)){return yk({backend:n,attrs:{shape:l.map(((p,i)=>p[0]+c.shape[i]+p[1])),value:d,dtype:c.dtype}})}const h=Object(o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sS(c.shape,l,d):new aS(c.shape,l,d),f=[[d]];return n.runWebGLProgram(h,[c],c.dtype,f)},oS={kernelName:o.PadV2,backendName:"webgl",kernelFunc:iS},uS=vx({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),cS={kernelName:o.Pow,backendName:"webgl",kernelFunc:uS};const lS={kernelName:o.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{axis:l,keepDims:d}=r,h=c.shape.length,f=[],m=o.util.parseAxisParam(l,c.shape);let y=m;const x=o.backend_util.getAxesPermutation(y,h);let O,v=c;if(null!=x&&(v=Px({inputs:{x:c},backend:n,attrs:{perm:x}}),y=o.backend_util.getInnerMostAxes(y.length,h),f.push(v)),o.backend_util.assertAxesAreInnerMostDims("prod",y,h),n.shouldExecuteOnCPU([v])){const e=n.texData.get(v.dataId).values,{outVals:t,outShape:r,outDtype:o}=Sy(v.shape,v.dtype,e,y);O=n.makeTensorInfo(r,o,t)}else{const[e,t]=o.backend_util.computeOutAndReduceShapes(v.shape,y),r=o.util.sizeFromShape(t),l=$x({inputs:{x:v},backend:n,attrs:{shape:[-1,r]}}),d=_x(l,Object(o.sumOutType)(c.dtype),"prod",n);O=$x({inputs:{x:d},backend:n,attrs:{shape:e}}),f.push(l),f.push(d)}if(d){f.push(O);const e=o.backend_util.expandShapeToKeepDim(O.shape,m);O=$x({inputs:{x:O},backend:n,attrs:{shape:e}})}return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),O}};const dS={kernelName:o.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:o,values:c,defaultValue:l,rowPartitionTensors:d}=t,{rowPartitionTypes:h}=r,f=n.readSync(o.dataId),m=n.readSync(c.dataId),y=n.readSync(l.dataId),x=d.map((e=>n.readSync(e.dataId))),O=d.map((e=>e.shape)),[v,output]=Iy(f,o.shape,m,c.shape,c.dtype,y,l.shape,x,O,h);return n.makeTensorInfo(v,c.dtype,output)}},hS=e=>{const{backend:t,attrs:n}=e,{start:r,stop:o,step:c,dtype:l}=n,d=Ny(r,o,c,l);return t.makeTensorInfo([d.length],l,d)},pS={kernelName:o.Range,backendName:"webgl",kernelFunc:hS},fS=Ox({opSnippet:"return 1.0 / x;"}),mS={kernelName:o.Reciprocal,backendName:"webgl",kernelFunc:fS},bS=Ox({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),gS={kernelName:o.Relu,backendName:"webgl",kernelFunc:bS},yS=Ox({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),xS={kernelName:o.Relu6,backendName:"webgl",kernelFunc:yS};class OS{constructor(e,t,n,r,o){this.variableNames=["A"],this.outputShape=[];const[c,l,d,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?l-1:l,r&&n>1?d-1:d],m=[r&&t>1?t-1:t,r&&n>1?n-1:n];let y;y=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]});\n      const vec2 inputShapeRC = vec2(${l}.0, ${d}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${y};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class vS{constructor(e,t,n,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,l,d,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?l-1:l,r&&n>1?d-1:d],m=[r&&t>1?t-1:t,r&&n>1?n-1:n];let y;y=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]},\n          ${f[1]/m[1]});\n      const vec3 inputShapeRC = vec3(${l}.0, ${d}.0,\n                                     ${d}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${y};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${h-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const kS={kernelName:o.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:c}=t,{alignCorners:l,halfPixelCenters:d,size:h}=r,[f,m]=h,y=Object(o.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new vS(c.shape,f,m,l,d):new OS(c.shape,f,m,l,d);return n.runWebGLProgram(y,[c],"float32")}};class wS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,o]=t,[,c,l]=e,d=[n&&c>1?r-1:r,n&&l>1?o-1:o],h=[n&&c>1?c-1:c,n&&l>1?l-1:l],f=d[0]/h[0],m=d[1]/h[1],y=1/f,x=1/m,O=2*Math.ceil(y)+2,v=2*Math.ceil(x)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${f});\n        const float widthScale = float(${m});\n\n        const float invHeightScale = float(${y});\n        const float invWidthScale = float(${x});\n\n        const int winHeight = int(${O});\n        const int winWidth = int(${v});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${c}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${l}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const SS={kernelName:o.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:o,dy:c}=t,{alignCorners:l}=r,d=new wS(c.shape,o.shape,l);return n.runWebGLProgram(d,[c],c.dtype)}};class IS{constructor(e,t,n,r,o){this.variableNames=["A"],this.outputShape=[];const[c,l,d,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?l-1:l,r&&n>1?d-1:d],m=[r&&t>1?t-1:t,r&&n>1?n-1:n],y=r?"0.5":"0.0";let x;x=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]});\n      const vec2 inputShapeRC = vec2(${l}.0, ${d}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${x};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${y})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class NS{constructor(e,t,n,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[c,l,d,h]=e;this.outputShape=[c,t,n,h];const f=[r&&t>1?l-1:l,r&&n>1?d-1:d],m=[r&&t>1?t-1:t,r&&n>1?n-1:n],y=r?"0.5":"0.0";let x;x=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${f[0]/m[0]},\n          ${f[1]/m[1]},\n          ${f[1]/m[1]});\n      const vec3 inputShapeRC = vec3(${l}.0, ${d}.0,\n                                     ${d}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${x};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${y})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${h-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const jS={kernelName:o.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:c}=t,{alignCorners:l,halfPixelCenters:d,size:h}=r,[f,m]=h,y=Object(o.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new NS(c.shape,f,m,l,d):new IS(c.shape,f,m,l,d);return n.runWebGLProgram(y,[c],c.dtype)}};class TS{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,o]=t,[,c,l]=e,d=[n&&c>1?r-1:r,n&&l>1?o-1:o],h=[n&&c>1?c-1:c,n&&l>1?l-1:l],f=d[0]/h[0],m=d[1]/h[1],y=1/f,x=1/m,O=2*Math.ceil(y)+2,v=2*Math.ceil(x)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${f});\n        const float widthScale = float(${m});\n\n        const float invHeightScale = float(${y});\n        const float invWidthScale = float(${x});\n\n        const int winHeight = int(${O});\n        const int winWidth = int(${v});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${c}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${l}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${d[0]}) *\n                (float(dyR) / float(${h[0]}));\n\n            float sourceFracCol =\n                float(${d[1]}) *\n                  (float(dyC) / float(${h[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const CS={kernelName:o.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:o,dy:c}=t,{alignCorners:l}=r,d=new TS(c.shape,o.shape,l);return n.runWebGLProgram(d,[c],c.dtype)}};class $S{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,i)=>(i=>-1!==t.indexOf(i)&&1!==e[i]?`${e[i]} - coords[${i}] - 1`:`coords[${i}]`)(i))).join(","),o=Cg(n);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class ES{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=Hy("rc",n),o=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,c=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,l=Cg(n);function d(n){const r=e.map(((r,i)=>function(i,n){return-1!==t.indexOf(i)&&1!==e[i]?`${e[i]} - ${n[i]} - 1`:`${n[i]}`}(i,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${l} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return d(e)}(r.slice())};\n          if(${o}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",d(e)}(r.slice())};\n          }\n          if(${c}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",d(e)}(r.slice())};\n            if(${o}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",d(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const AS={kernelName:o.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{dims:l}=r,d=c.shape.length,h=o.util.parseAxisParam(l,c.shape);if(0===d)return lx({inputs:{x:c},backend:n});const f=Object(o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ES(c.shape,h):new $S(c.shape,h);return n.runWebGLProgram(f,[c],c.dtype)}};class RS{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let o="";o="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const _S={kernelName:o.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:image}=e,{radians:r,fillValue:c,center:l}=t,d=n,h=new RS(image.shape,c),[f,m]=o.backend_util.getImageCenter(l,image.shape[1],image.shape[2]),y=[[f,m,Math.sin(r),Math.cos(r)]];return d.runWebGLProgram(h,[image],image.dtype,y)}},FS=Ox({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),DS={kernelName:o.Round,backendName:"webgl",kernelFunc:FS},MS=Ox({opSnippet:"return inversesqrt(x);",cpuKernelImpl:jy}),zS={kernelName:o.Rsqrt,backendName:"webgl",kernelFunc:MS};class LS{constructor(e,t,n,r,o,c,l=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=c;const d=Cg(o.length),h=Cg(c.length);let f="";1===n?f="i":2===n&&(f="i, j");const m=`getIndices(${f})`;let y="";1===r?y="i":2===r&&(y="i, coords[1]");const x=`getUpdates(${y})`,O=t>1?"strides[j]":"strides";this.userCode=`\n        ${d} strides = ${d}(${o});\n\n        void main() {\n          ${h} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${m});\n              flattenedIndex += index * ${O};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${x};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const PS={kernelName:o.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:c,updates:l}=t,{shape:d}=r,{sliceRank:h,numUpdates:f,sliceSize:m,strides:y,outputSize:x}=o.backend_util.calculateShapes(l,c,d),O=[x/m,m];if(0===x)return n.makeTensorInfo(d,c.dtype);const v=$x({inputs:{x:c},backend:n,attrs:{shape:[f,h]}}),k=$x({inputs:{x:l},backend:n,attrs:{shape:[f,m]}}),w=n.makeTensorInfo([],"float32",new Float32Array([0])),S=new LS(f,h,v.shape.length,k.shape.length,y,O),I=n.runWebGLProgram(S,[k,v,w],k.dtype),N=$x({inputs:{x:I},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(I),n.disposeIntermediateTensorInfo(w),N}};class BS{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const c=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,l=2===Object(o.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":c,d="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${l}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${d} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const WS={kernelName:o.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:o,values:c}=t,{side:l}=r,d=new BS(o.shape[0],o.shape[1],c.shape[1],l),h=[[o.shape[1]]];return n.runWebGLProgram(d,[o,c],"int32",h)}};class VS{constructor(e,t,n){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)o="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],c=[],l=[];for(let i=0;i<t.length;i++)l.push(`${n[i]}`),i<e&&c.push(`${n[i]}`);r=c.join(),o=l.join()}const c=Cg(n);this.userCode=`\n      void main() {\n        ${c} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const US={kernelName:o.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:c,e:l}=t,d=new VS(r.shape.length,c.shape,c.shape.length);return n.runWebGLProgram(d,[r,c,l],Object(o.upcastType)(c.dtype,l.dtype))}},GS=Ox({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${o.backend_util.SELU_SCALEALPHA};\n  float scale = ${o.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),HS={kernelName:o.Selu,backendName:"webgl",kernelFunc:GS},qS=Ox({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Cy}),KS={kernelName:o.Sigmoid,backendName:"webgl",kernelFunc:qS},XS=Ox({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),YS={kernelName:o.Sign,backendName:"webgl",kernelFunc:XS},ZS=Ox({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),JS={kernelName:o.Sin,backendName:"webgl",kernelFunc:ZS},QS=Ox({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),eI={kernelName:o.Sinh,backendName:"webgl",kernelFunc:QS},tI=Ox({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),nI={kernelName:o.Softplus,backendName:"webgl",kernelFunc:tI},rI={kernelName:o.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{blockShape:l,paddings:d}=r;o.util.assert(c.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const h=l.reduce(((a,b)=>a*b)),f=[[0,0]];f.push(...d);for(let i=1+l.length;i<c.shape.length;++i)f.push([0,0]);const m=[],y=iS({inputs:{x:c},backend:n,attrs:{paddings:f,constantValue:0}}),x=o.backend_util.getReshaped(y.shape,l,h,!1),O=o.backend_util.getPermuted(x.length,l.length,!1),v=o.backend_util.getReshapedPermuted(y.shape,l,h,!1),k=$x({inputs:{x:y},backend:n,attrs:{shape:x}}),w=Px({inputs:{x:k},backend:n,attrs:{perm:O}}),S=$x({inputs:{x:w},backend:n,attrs:{shape:v}});return m.push(y),m.push(k),m.push(w),m.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};const aI={kernelName:o.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:o,denseShape:c,defaultValue:l}=t;if(1!==c.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${c.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Values must be a vector, saw:\n         ${o.shape}`);if(0!==l.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${l.shape}`);const d=n.readSync(r.dataId),h=n.readSync(o.dataId),f=n.readSync(c.dataId),m=n.readSync(l.dataId)[0],[y,x,O,v,k]=Ay(d,r.shape,r.dtype,h,o.dtype,f,m);return[n.makeTensorInfo(x,r.dtype,y),n.makeTensorInfo([x[0]],o.dtype,O),n.makeTensorInfo([v.length],"bool",new Uint8Array(v.map((e=>Number(e))))),n.makeTensorInfo([k.length],r.dtype,new Int32Array(k))]}};const sI={kernelName:o.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:o,newShape:c}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Input shape should be a vector but received shape ${o.shape}`);if(1!==c.shape.length)throw new Error(`Target shape should be a vector but received shape ${c.shape}`);const l=Array.from(n.readSync(o.dataId)),d=n.readSync(r.dataId),h=Array.from(n.readSync(c.dataId)),[f,m,y]=Ry(d,r.shape,r.dtype,l,h);return[n.makeTensorInfo(m,r.dtype,f),n.makeTensorInfo([y.length],c.dtype,new Int32Array(y))]}};const iI={kernelName:o.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const c=n.readSync(data.dataId),l=n.readSync(r.dataId),d=n.readSync(o.dataId),[h,f]=_y(c,data.shape,data.dtype,l,d,!0);return n.makeTensorInfo(f,data.dtype,h)}};const oI={kernelName:o.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:data,indices:r,segmentIds:o}=t;if(data.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const c=n.readSync(data.dataId),l=n.readSync(r.dataId),d=n.readSync(o.dataId),[h,f]=_y(c,data.shape,data.dtype,l,d);return n.makeTensorInfo(f,data.dtype,h)}};const uI={kernelName:o.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:c,sparseValues:l,defaultValue:d}=t,{outputShape:h}=r,{sliceRank:f,numUpdates:m,sliceSize:y,strides:x,outputSize:O}=o.backend_util.calculateShapes(l,c,h);if("string"===l.dtype){const e=n.bufferSync(c),t=n.bufferSync(l),r=o.util.decodeString(n.readSync(d.dataId)[0]),v=Ty(e,t,h,O,y,m,f,x,r,false);return n.makeTensorInfo(h,v.dtype,v.values)}const v=new LS(m,f,c.shape.length,l.shape.length,x,[O,1],false),k=n.runWebGLProgram(v,[l,c,d],l.dtype),w=$x({inputs:{x:k},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(k),w}};const cI={kernelName:o.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{numOrSizeSplits:l,axis:d}=r,h=o.util.parseAxisParam(d,c.shape)[0],f=o.backend_util.prepareSplitSize(c,l,h),m=c.shape.length,y=new Array(m).fill(0),x=c.shape.slice();return f.map((s=>{const e=[...x];e[h]=s;const t=DO({inputs:{x:c},backend:n,attrs:{begin:y,size:e}});return y[h]+=s,t}))}},lI="return sqrt(x);",dI=Ox({opSnippet:lI,packedOpSnippet:lI,cpuKernelImpl:Fy}),hI={kernelName:o.Sqrt,backendName:"webgl",kernelFunc:dI},pI=Ox({opSnippet:"return x * x;"}),fI={kernelName:o.Square,backendName:"webgl",kernelFunc:pI},mI="return (a - b) * (a - b);",bI=vx({opSnippet:mI,packedOpSnippet:mI}),gI={kernelName:o.SquaredDifference,backendName:"webgl",kernelFunc:bI};const yI={kernelName:o.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,o=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,c=new Qy(r.shape,o);return n.runWebGLProgram(c,[r],r.dtype)}};class xI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,o=Cg(n.length),c=Cg(n.length);let l="";if(1===r)l="coords * strides + begin";else{let e=0;l=n.map(((t,i)=>(e++,1===n.length?`coords * strides[${i}] + begin[${i}]`:`coords[${e-1}] * strides[${i}] + begin[${i}]`))).join(",")}this.userCode=`\n      ${o} begin = ${o}(${e});\n      ${o} strides = ${o}(${t});\n\n      void main() {\n        ${c} coords = getOutputCoords();\n        setOutput(getX(${l}));\n      }\n    `}}const OI={kernelName:o.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{begin:l,end:d,strides:h,beginMask:f,endMask:m,ellipsisMask:y,newAxisMask:x,shrinkAxisMask:O}=r,{finalShapeSparse:v,finalShape:k,isIdentity:w,sliceDim0:S,isSimpleSlice:I,begin:N,end:j,strides:T}=o.slice_util.sliceInfo(c.shape,l,d,h,f,m,y,x,O);let C;if(w)C=$x({inputs:{x:c},backend:n,attrs:{shape:k}});else if(S||I){o.util.assert(c.shape.length>=1,(()=>`Input must have rank at least 1, got: ${c.shape.length}`));const e=o.slice_util.computeOutShape(N,j,T),t=DO({inputs:{x:c},backend:n,attrs:{begin:N,size:e}});C=$x({inputs:{x:t},backend:n,attrs:{shape:k}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([c])){const e=n.readSync(c.dataId),t=Object(o.buffer)(c.shape,c.dtype,e),r=Dy(v,t,T,N);C=n.makeTensorInfo(k,c.dtype,r.values)}else{const e=new xI(N,T,v);C=n.runWebGLProgram(e,[c],c.dtype)}}const $=$x({inputs:{x:C},backend:n,attrs:{shape:k}});return n.disposeIntermediateTensorInfo(C),$}};const vI={kernelName:o.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:o,nGramWidths:c,leftPad:l,rightPad:d,padWidth:h,preserveShortSequences:f}=r,{data:data,dataSplits:m}=t,y=n.readSync(data.dataId),x=n.readSync(m.dataId),[O,v]=My(y,x,o,c,l,d,h,f);return[n.makeTensorInfo([O.length],"string",O),n.makeTensorInfo(m.shape,"int32",v)]}};const kI={kernelName:o.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:o}=r,{input:input,delimiter:c}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(1!==input.shape.length)throw new Error(`Input must be a vector, got shape: ${input.shape}`);if(0!==c.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${c.shape}`);const l=n.readSync(input.dataId),d=n.readSync(c.dataId)[0],[h,f,m]=zy(l,d,o),y=f.length;return[n.makeTensorInfo([y,2],"int32",h),n.makeTensorInfo([y],"string",f),n.makeTensorInfo([2],"int32",new Int32Array(m))]}};const wI={kernelName:o.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:o}=r,{input:input}=t;if("string"!==input.dtype)throw new Error("Input must be of datatype string");if(o<=0)throw new Error("Number of buckets must be at least 1");const c=n.readSync(input.dataId),output=Ly(c,o);return n.makeTensorInfo(input.shape,"int32",output)}},SI=Ox({opSnippet:"return tan(x);"}),II={kernelName:o.Tan,backendName:"webgl",kernelFunc:SI},NI=Ox({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),jI={kernelName:o.Tanh,backendName:"webgl",kernelFunc:NI};class TI{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[i]*t[i];this.outputShape=n,this.rank=n.length;const r=Cg(this.rank),o=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let i=0;i<e.length;i++)r.push(`imod(${n[i]}, ${e[i]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function CI(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{reps:l}=r;if("string"===c.dtype||c.shape.length>5){const data=n.readSync(c.dataId),e="string"===c.dtype?data.map((e=>o.util.decodeString(e))):data,t=Object(o.buffer)(c.shape,c.dtype,e),r=By(t,l);return n.makeTensorInfo(r.shape,r.dtype,r.values)}const d=new TI(c.shape,l);return n.runWebGLProgram(d,[c],c.dtype)}const $I={kernelName:o.Tile,backendName:"webgl",kernelFunc:CI};class EI{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class AI{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function RI(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function _I(e){let t=1;for(;t<e;)t*=2;return t}const FI={kernelName:o.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c}=t,{k:l,sorted:d}=r,h=Object(o.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),f=Object(o.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),m=c.shape,y=m[m.length-1];if(n.shouldExecuteOnCPU([c])||y<h||l>f){const e=n.readSync(c.dataId),[t,r]=Wy(e,m,c.dtype,l,d);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===l)return m[m.length-1]=0,[n.makeTensorInfo(m,c.dtype,[]),n.makeTensorInfo(m,"int32",[])];if(1===y)return[c,yk({attrs:{shape:m,dtype:"int32",value:0},backend:n})];const x=n.texData.get(c.dataId),O=null!==x&&x.isPacked,v=O?n.unpackTensor(c):c,k=o.util.sizeFromShape(m)/y,w=$x({inputs:{x:v},attrs:{shape:[k,y]},backend:n});O&&RI(n,v);const S=_I(l),I=_I(y);let N=null;const j=()=>null===N?[w,w]:[w,N],T=(e,t,r)=>{const o=j(),c=new EI(r),l=[[y],[null===N?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],d=N;N=n.runWebGLProgram(c,o,"int32",l),RI(n,d)};for(let e=1;e<S;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)T(t,n,[k,I])}for(let e=I;e>S;e/=2){const t=j(),r=new AI([k,e/2]),o=[[y],[null===N?1:0],[S]],c=N;N=n.runWebGLProgram(r,t,"int32",o),RI(n,c);const l=S/2,d=2*l;for(let e=l;e>=1;e/=2)T(d,e,N.shape)}let C=N;N=DO({inputs:{x:N},backend:n,attrs:{begin:0,size:[k,l]}}),RI(n,C);let $=Mk({inputs:{x:w,indices:N},backend:n,attrs:{axis:1,batchDims:1}});RI(n,w);const E=m.slice(0,-1);E.push(l),C=N,N=$x({inputs:{x:N},attrs:{shape:E},backend:n}),RI(n,C);const A=$;return $=$x({inputs:{x:$},attrs:{shape:E},backend:n}),RI(n,A),[$,N]}};class DI{constructor(e,t,n,r,o,c){this.variableNames=["Image","Transforms"],this.outputShape=c;const l="nearest"===n?1:2;let d;switch(r){case"constant":default:d=1;break;case"reflect":d=2;break;case"wrap":d=3;break;case"nearest":d=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${d} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${d} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${d} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${l} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const MI={kernelName:o.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:image,transforms:o}=t,{interpolation:c,fillMode:l,fillValue:d,outputShape:h}=r,[f,m,y,x]=image.shape,[O,v]=null!=h?h:[m,y],k=new DI(m,y,c,l,d,[f,O,v,x]);return n.runWebGLProgram(k,[image,o],"float32")}};const zI={kernelName:o.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:o}=n,{x:c}=t;lg(c,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const l=r.readSync(c.dataId),{outputValues:d,outputShape:h,indices:f}=Uy(l,o,c.shape,c.dtype);return[r.makeTensorInfo(h,c.dtype,d),r.makeTensorInfo([f.length],"int32",f)]}};const LI={kernelName:o.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:o}=t;let{axis:c}=r;c<0&&(c+=o.shape.length);const l=o,d=l.shape.length,h=o.shape[c],f=new Array(d-1);let m=0;for(let i=0;i<d;i++)i!==c&&(f[m++]=l.shape[i]);const y=[],x=new Array(d).fill(0),O=l.shape.slice();O[c]=1;const v=new Array(h);for(let i=0;i<v.length;i++){x[c]=i;const e=DO({inputs:{x:l},backend:n,attrs:{begin:x,size:O}}),t=$x({inputs:{x:e},backend:n,attrs:{shape:f}});v[i]=t,y.push(e)}return y.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}};class PI{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,o=e.inSize,c=e.numSegments,l=c*Math.ceil(o/n);this.outputShape=[r,l];const d=4*Math.floor(n/4),h=n%4,f="\n        sumValue += dot(values, segFilter);\n    ";let m="";o%n>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let y="";o%n>0&&(y=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${y}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${c})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${c})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${d}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${f}\n        }\n\n        int inIdx = inOffset + ${d};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${f}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${f}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${f}\n        }\n        setOutput(sumValue);\n      }\n    `}}const BI=[Vx,Gx,qx,Xx,Jx,tO,nO,rO,cO,lO,hO,fO,bO,yO,OO,wO,SO,jO,TO,CO,AO,zO,LO,PO,GO,KO,ZO,px,ev,uv,bv,vv,kv,wv,Sv,Iv,jv,Cv,Ev,Mv,zv,Lv,Bv,Uv,qv,Kv,Yv,Jv,Qv,tk,nk,ak,ik,uk,lk,pk,bk,xk,vk,Sk,Nk,Ck,Ak,Rk,Fk,zk,Pk,Wk,dx,Vk,sv,Gk,qk,Xk,bx,Zk,Qk,ew,nw,aw,iw,uw,lw,pw,mw,gw,xw,Ow,vw,Sw,Iw,Nw,jw,Tw,$w,Rw,Fw,Uw,Cx,Gw,qw,Xw,Zw,WO,Qw,nS,rS,oS,cS,xx,lS,dS,pS,UO,zw,mS,gS,xS,Ex,kS,SS,jS,CS,AS,_S,DS,zS,PS,WS,US,HS,KS,YS,JS,eI,MO,Vw,nI,rI,aI,sI,iI,oI,uI,cI,hI,fI,gI,yI,OI,vI,kI,wI,Bw,Lx,II,jI,$I,FI,MI,Bx,zI,LI,{kernelName:o.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:c,segmentIds:l}=t,{numSegments:d}=r,h=c.shape.length,f=[];let m=0;const y=o.backend_util.getAxesPermutation([m],h);let x=c;null!=y&&(x=Px({inputs:{x:c},backend:n,attrs:{perm:y}}),f.push(x),m=o.backend_util.getInnerMostAxes(1,h)[0]);const O=o.backend_util.segment_util.computeOutShape(x.shape,m,d),v=o.util.sizeFromShape([x.shape[m]]),k=$x({inputs:{x:x},backend:n,attrs:{shape:[-1,v]}});f.push(k);const w=Object(o.sumOutType)(c.dtype),S=(e,t,r,c,l)=>{const d=e.shape[0],h=e.shape[1],m=o.backend_util.segment_util.segOpComputeOptimalWindowSize(h,l),y=new PI({windowSize:m,inSize:h,batchSize:d,numSegments:l},t),output=n.compileAndRun(y,[e,r],c);if(f.push(output),output.shape[1]===l)return output;const x=hS({backend:n,attrs:{start:0,stop:l,step:1,dtype:"float32"}}),O=CI({inputs:{x:x},backend:n,attrs:{reps:[h/m]}});f.push(x),f.push(O);return S(output,t,O,c,l)},I=$x({inputs:{x:S(k,"unsortedSegmentSum",l,w,d)},backend:n,attrs:{shape:O}});let N=I;if(null!=y){f.push(I);const e=o.backend_util.getUndoAxesPermutation(y);N=Px({inputs:{x:N},backend:n,attrs:{perm:e}})}return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}},tS];for(const e of BI)Object(o.registerKernel)(e);o.version_core,Gc.b},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function o(e){return!0===(e&&e.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=o;var c={},l={};function d(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=l[e])?r:(n=f(e,(0|e)<0?-1:0,!0),o&&(l[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=c[e])?r:(n=f(e,e<0?-1:0,!1),o&&(c[e]=n),n)}function h(e,t){if(isNaN(e))return t?I:S;if(t){if(e<0)return I;if(e>=v)return $}else{if(e<=-k)return E;if(e+1>=k)return C}return e<0?h(-e,t).neg():f(e%O|0,e/O|0,t)}function f(e,t,n){return new r(e,t,n)}r.fromInt=d,r.fromNumber=h,r.fromBits=f;var m=Math.pow;function y(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return S;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var p;if((p=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===p)return y(e.substring(1),t,n).neg();for(var r=h(m(n,8)),o=S,i=0;i<e.length;i+=8){var c=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+c),n);if(c<8){var d=h(m(n,c));o=o.mul(d).add(h(l))}else o=(o=o.mul(r)).add(h(l))}return o.unsigned=t,o}function x(e,t){return"number"==typeof e?h(e,t):"string"==typeof e?y(e,t):f(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=y,r.fromValue=x;var O=4294967296,v=O*O,k=v/2,w=d(1<<24),S=d(0);r.ZERO=S;var I=d(0,!0);r.UZERO=I;var N=d(1);r.ONE=N;var j=d(1,!0);r.UONE=j;var T=d(-1);r.NEG_ONE=T;var C=f(-1,2147483647,!1);r.MAX_VALUE=C;var $=f(-1,-1,!0);r.MAX_UNSIGNED_VALUE=$;var E=f(0,-2147483648,!1);r.MIN_VALUE=E;var A=r.prototype;A.toInt=function(){return this.unsigned?this.low>>>0:this.low},A.toNumber=function(){return this.unsigned?(this.high>>>0)*O+(this.low>>>0):this.high*O+(this.low>>>0)},A.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var t=h(e),div=this.div(t),n=div.mul(t).sub(this);return div.toString(e)+n.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=h(m(e,6),this.unsigned),o=this,c="";;){var l=o.div(r),d=(o.sub(l.mul(r)).toInt()>>>0).toString(e);if((o=l).isZero())return d+c;for(;d.length<6;)d="0"+d;c=""+d+c}},A.getHighBits=function(){return this.high},A.getHighBitsUnsigned=function(){return this.high>>>0},A.getLowBits=function(){return this.low},A.getLowBitsUnsigned=function(){return this.low>>>0},A.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},A.isZero=function(){return 0===this.high&&0===this.low},A.eqz=A.isZero,A.isNegative=function(){return!this.unsigned&&this.high<0},A.isPositive=function(){return this.unsigned||this.high>=0},A.isOdd=function(){return 1==(1&this.low)},A.isEven=function(){return 0==(1&this.low)},A.equals=function(e){return o(e)||(e=x(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},A.eq=A.equals,A.notEquals=function(e){return!this.eq(e)},A.neq=A.notEquals,A.ne=A.notEquals,A.lessThan=function(e){return this.comp(e)<0},A.lt=A.lessThan,A.lessThanOrEqual=function(e){return this.comp(e)<=0},A.lte=A.lessThanOrEqual,A.le=A.lessThanOrEqual,A.greaterThan=function(e){return this.comp(e)>0},A.gt=A.greaterThan,A.greaterThanOrEqual=function(e){return this.comp(e)>=0},A.gte=A.greaterThanOrEqual,A.ge=A.greaterThanOrEqual,A.compare=function(e){if(o(e)||(e=x(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},A.comp=A.compare,A.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(N)},A.neg=A.negate,A.add=function(e){o(e)||(e=x(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,c=65535&this.low,l=e.high>>>16,d=65535&e.high,h=e.low>>>16,m=0,y=0,O=0,v=0;return O+=(v+=c+(65535&e.low))>>>16,y+=(O+=r+h)>>>16,m+=(y+=n+d)>>>16,m+=t+l,f((O&=65535)<<16|(v&=65535),(m&=65535)<<16|(y&=65535),this.unsigned)},A.subtract=function(e){return o(e)||(e=x(e)),this.add(e.neg())},A.sub=A.subtract,A.multiply=function(e){if(this.isZero())return S;if(o(e)||(e=x(e)),n)return f(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return S;if(this.eq(E))return e.isOdd()?E:S;if(e.eq(E))return this.isOdd()?E:S;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(w)&&e.lt(w))return h(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,c=this.low>>>16,l=65535&this.low,d=e.high>>>16,m=65535&e.high,y=e.low>>>16,O=65535&e.low,v=0,k=0,I=0,N=0;return I+=(N+=l*O)>>>16,k+=(I+=c*O)>>>16,I&=65535,k+=(I+=l*y)>>>16,v+=(k+=r*O)>>>16,k&=65535,v+=(k+=c*y)>>>16,k&=65535,v+=(k+=l*m)>>>16,v+=t*O+r*y+c*m+l*d,f((I&=65535)<<16|(N&=65535),(v&=65535)<<16|(k&=65535),this.unsigned)},A.mul=A.multiply,A.divide=function(e){if(o(e)||(e=x(e)),e.isZero())throw Error("division by zero");var t,r,c;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?f((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?I:S;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return I;if(e.gt(this.shru(1)))return j;c=I}else{if(this.eq(E))return e.eq(N)||e.eq(T)?E:e.eq(E)?N:(t=this.shr(1).div(e).shl(1)).eq(S)?e.isNegative()?N:T:(r=this.sub(e.mul(t)),c=t.add(r.div(e)));if(e.eq(E))return this.unsigned?I:S;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();c=S}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var l=Math.ceil(Math.log(t)/Math.LN2),d=l<=48?1:m(2,l-48),y=h(t),O=y.mul(e);O.isNegative()||O.gt(r);)O=(y=h(t-=d,this.unsigned)).mul(e);y.isZero()&&(y=N),c=c.add(y),r=r.sub(O)}return c},A.div=A.divide,A.modulo=function(e){return o(e)||(e=x(e)),n?f((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},A.mod=A.modulo,A.rem=A.modulo,A.not=function(){return f(~this.low,~this.high,this.unsigned)},A.and=function(e){return o(e)||(e=x(e)),f(this.low&e.low,this.high&e.high,this.unsigned)},A.or=function(e){return o(e)||(e=x(e)),f(this.low|e.low,this.high|e.high,this.unsigned)},A.xor=function(e){return o(e)||(e=x(e)),f(this.low^e.low,this.high^e.high,this.unsigned)},A.shiftLeft=function(e){return o(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):f(0,this.low<<e-32,this.unsigned)},A.shl=A.shiftLeft,A.shiftRight=function(e){return o(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?f(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):f(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},A.shr=A.shiftRight,A.shiftRightUnsigned=function(e){if(o(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?f(this.low>>>e|t<<32-e,t>>>e,this.unsigned):f(32===e?t:t>>>e-32,0,this.unsigned)},A.shru=A.shiftRightUnsigned,A.shr_u=A.shiftRightUnsigned,A.toSigned=function(){return this.unsigned?f(this.low,this.high,!1):this},A.toUnsigned=function(){return this.unsigned?this:f(this.low,this.high,!0)},A.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},A.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},A.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},,,function(e,t,n){"use strict";(function(e){var t=n(567);const r=()=>n(936);let o;class c{constructor(){this.util=n(937),this.textEncoder=new this.util.TextEncoder}fetch(path,e){return null!=Object(t.c)().global.fetch?Object(t.c)().global.fetch(path,e):(null==o&&(o=r()),o(path,e))}now(){const time=e.hrtime();return 1e3*time[0]+time[1]/1e6}encode(text,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(text)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}Object(t.c)().get("IS_NODE")&&!Object(t.c)().get("IS_BROWSER")&&Object(t.c)().setPlatform("node",new c)}).call(this,n(217))},,,function(e,t,n){(function(e){var r;!function(e,o,c){function l(e){var t,n=this,r=(t=4022871197,function(data){data=String(data);for(var i=0;i<data.length;i++){var e=.02519603282416938*(t+=data.charCodeAt(i));e-=t=e>>>0,t=(e*=t)>>>0,t+=4294967296*(e-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function d(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function h(e,t){var n=new l(e),r=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(576)&&n(587)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.alea=h}(0,e,n(576))}).call(this,n(569)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function l(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function d(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function h(e,t){var n=new l(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(576)&&n(587)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xor128=h}(0,e,n(576))}).call(this,n(569)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function l(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function d(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function h(e,t){var n=new l(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(576)&&n(587)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xorwow=h}(0,e,n(576))}).call(this,n(569)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function l(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function d(e,t){return t.x=e.x.slice(),t.i=e.i,t}function h(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.x&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(576)&&n(587)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xorshift7=h}(0,e,n(576))}).call(this,n(569)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function l(e){var t=this;t.next=function(){var e,n,r=t.w,o=t.X,i=t.i;return t.w=r=r+1640531527|0,n=o[i+34&127],e=o[i=i+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=o[i]=n^e,t.i=i,n+(r^r>>>16)|0},function(e,t){var n,r,i,o,c,l=[],d=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,d=Math.max(d,t.length)),i=0,o=-32;o<d;++o)t&&(r^=t.charCodeAt((o+32)%t.length)),0===o&&(c=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(c=c+1640531527|0,i=0==(n=l[127&o]^=r+c)?i+1:0);for(i>=128&&(l[127&(t&&t.length||0)]=-1),i=127,o=512;o>0;--o)r=l[i+34&127],n=l[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,l[i]=r^n;e.w=c,e.X=l,e.i=i}(t,e)}function d(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function h(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.X&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(576)&&n(587)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.xor4096=h}(0,e,n(576))}).call(this,n(569)(e))},function(e,t,n){(function(e){var r;!function(e,o,c){function l(e){var t=this,n="";t.next=function(){var b=t.b,e=t.c,n=t.d,a=t.a;return b=b<<25^b>>>7^e,e=e-n|0,n=n<<24^n>>>8^a,a=a-b|0,t.b=b=b<<20^b>>>12^e,t.c=e=e-n|0,t.d=n<<16^e>>>16^a,t.a=a-b|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function d(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function h(e,t){var n=new l(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&d(r,n),o.state=function(){return d(n,{})}),o}o&&o.exports?o.exports=h:n(576)&&n(587)?void 0===(r=function(){return h}.call(t,n,t,o))||(o.exports=r):this.tychei=h}(0,e,n(576))}).call(this,n(569)(e))},function(e,t,n){var r;!function(o,c,l){var d,h=256,f=l.pow(h,6),m=l.pow(2,52),y=2*m,mask=255;function x(e,t,n){var r=[],x=w(k((t=1==t?{entropy:!0}:t||{}).entropy?[e,S(c)]:null==e?function(){try{var e;return d&&(e=d.randomBytes)?e=e(h):(e=new Uint8Array(h),(o.crypto||o.msCrypto).getRandomValues(e)),S(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,S(c)]}}():e,3),r),I=new O(r),N=function(){for(var e=I.g(6),t=f,n=0;e<m;)e=(e+n)*h,t*=h,n=I.g(1);for(;e>=y;)e/=2,t/=2,n>>>=1;return(e+n)/t};return N.int32=function(){return 0|I.g(4)},N.quick=function(){return I.g(4)/4294967296},N.double=N,w(S(I.S),c),(t.pass||n||function(e,t,n,r){return r&&(r.S&&v(r,I),e.state=function(){return v(I,{})}),n?(l.random=e,t):e})(N,x,"global"in t?t.global:this==l,t.state)}function O(e){var t,n=e.length,r=this,i=0,o=r.i=r.j=0,s=r.S=[];for(n||(e=[n++]);i<h;)s[i]=i++;for(i=0;i<h;i++)s[i]=s[o=mask&o+e[i%n]+(t=s[i])],s[o]=t;(r.g=function(e){for(var t,n=0,i=r.i,o=r.j,s=r.S;e--;)t=s[i=mask&i+1],n=n*h+s[mask&(s[i]=s[o=mask&o+t])+(s[o]=t)];return r.i=i,r.j=o,n})(h)}function v(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function k(e,t){var n,r=[],o=typeof e;if(t&&"object"==o)for(n in e)try{r.push(k(e[n],t-1))}catch(e){}return r.length?r:"string"==o?e:e+"\0"}function w(e,t){for(var n,r=e+"",o=0;o<r.length;)t[mask&o]=mask&(n^=19*t[mask&o])+r.charCodeAt(o++);return S(t)}function S(a){return String.fromCharCode.apply(0,a)}if(w(l.random(),c),e.exports){e.exports=x;try{d=n(945)}catch(e){}}else void 0===(r=function(){return x}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},,function(e,t,n){"use strict";var r,o;n.d(t,"a",(function(){return r})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(r||(r={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(o||(o={}))},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]},,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r=n(543),o=n(638),c=n(968);class l extends o.a{decodeUTF8(){return new d(this)}}class d extends c.a{constructor(e){super(),this.upstream=e,this.impl=new h(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class h extends o.b{constructor(e){if(super(),this.upstream=e,Object(r.env)().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(969);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const t=await this.upstream.next();let n,text;return!t.done&&(n=t.value,text=Object(r.env)().get("IS_BROWSER")?this.decoder.decode(n,{stream:!0}):this.decoder.write(e.from(n.buffer)),this.outputQueue.push(text),!0)}}}).call(this,n(553).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(638);class o extends r.a{split(e){return new c(this,e)}}class c extends o{constructor(e,t){super(),this.upstream=e,this.impl=new l(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class l extends r.b{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const line of t.slice(0,-1))this.outputQueue.push(line);return this.carryover=t[t.length-1],!0}}},,,function(e,t,n){"use strict";n.r(t),n.d(t,"load",(function(){return x})),n.d(t,"version",(function(){return h}));var r=n(708),o=n(543);function c(e,a,t,n){return new(t||(t=Promise))((function(i,r){function o(e){try{s(n.next(e))}catch(e){r(e)}}function c(e){try{s(n.throw(e))}catch(e){r(e)}}function s(e){e.done?i(e.value):new t((function(a){a(e.value)})).then(o,c)}s((n=n.apply(e,a||[])).next())}))}function l(e,a){var t,n,i,r,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function c(r){return function(c){return function(r){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,n&&(i=2&r[0]?n.return:r[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,r[1])).done)return i;switch(n=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){o.label=r[1];break}if(6===r[0]&&o.label<i[1]){o.label=i[1],i=r;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(r);break}i[2]&&o.ops.pop(),o.trys.pop();continue}r=a.call(e,o)}catch(e){r=[6,e],n=0}finally{t=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,c])}}}var d={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},h="2.1.0",f=224,m={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},y={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};function x(e){return void 0===e&&(e={version:1,alpha:1}),c(this,void 0,void 0,(function(){var a,t,n,i,r,c,d;return l(this,(function(s){switch(s.label){case 0:if(null==o)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");if(n=e.version.toFixed(2),i=e.alpha?e.alpha.toFixed(2):"",r=-1,c=1,null==e.modelUrl){if(!(n in y))throw new Error("Invalid version of MobileNet. Valid versions are: "+Object.keys(y));if(!(i in y[n]))throw new Error("MobileNet constructed with invalid alpha "+e.alpha+". Valid multipliers for this version are: "+Object.keys(y[n])+".");a=y[n][i].inputRange,r=a[0],c=a[1]}return null!=e.inputRange&&(t=e.inputRange,r=t[0],c=t[1]),[4,(d=new O(n,i,e.modelUrl,r,c)).load()];case 1:return s.sent(),[2,d]}}))}))}var O=function(){function e(e,a,t,n,i){void 0===n&&(n=-1),void 0===i&&(i=1),this.version=e,this.alpha=a,this.modelUrl=t,this.inputMin=n,this.inputMax=i,this.normalizationConstant=(i-n)/255}return e.prototype.load=function(){return c(this,void 0,void 0,(function(){var e,a,t,n,i=this;return l(this,(function(c){switch(c.label){case 0:return this.modelUrl?(e=this,[4,Object(r.a)(this.modelUrl)]):[3,2];case 1:return e.model=c.sent(),[3,4];case 2:return a=y[this.version][this.alpha].url,t=this,[4,Object(r.a)(a,{fromTFHub:!0})];case 3:t.model=c.sent(),c.label=4;case 4:return[4,(n=Object(o.tidy)((function(){return i.model.predict(Object(o.zeros)([1,f,f,3]))}))).data()];case 5:return c.sent(),n.dispose(),[2]}}))}))},e.prototype.infer=function(e,a){var t=this;return void 0===a&&(a=!1),Object(o.tidy)((function(){e instanceof o.Tensor||(e=o.browser.fromPixels(e));var n=Object(o.add)(Object(o.mul)(Object(o.cast)(e,"float32"),t.normalizationConstant),t.inputMin),i=n;e.shape[0]===f&&e.shape[1]===f||(i=o.image.resizeBilinear(n,[f,f],!0));var r,c=Object(o.reshape)(i,[-1,f,f,3]);if(a){var l=m[t.version],s=t.model.execute(c,l);r=Object(o.squeeze)(s,[1,2])}else{var d=t.model.predict(c);r=Object(o.slice)(d,[0,1],[-1,1e3])}return r}))},e.prototype.classify=function(e,a){return void 0===a&&(a=3),c(this,void 0,void 0,(function(){var t,n;return l(this,(function(i){switch(i.label){case 0:return[4,v(t=this.infer(e),a)];case 1:return n=i.sent(),t.dispose(),[2,n]}}))}))},e}();function v(e,a){return c(this,void 0,void 0,(function(){var t,n,i,r,c,h,s;return l(this,(function(l){switch(l.label){case 0:return[4,(t=Object(o.softmax)(e)).data()];case 1:for(n=l.sent(),t.dispose(),i=[],s=0;s<n.length;s++)i.push({value:n[s],index:s});for(i.sort((function(e,a){return a.value-e.value})),r=new Float32Array(a),c=new Int32Array(a),s=0;s<a;s++)r[s]=i[s].value,c[s]=i[s].index;for(h=[],s=0;s<c.length;s++)h.push({className:d[c[s]],probability:r[s]});return[2,h]}}))}))}}])]);